
AtmelStart2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000091a  000009ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000091a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800118  00800118  000009c6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000009c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00000a68  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c07  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fce  00000000  00000000  00002877  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cd0  00000000  00000000  00003845  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  00004518  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b0b  00000000  00000000  00004844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000326  00000000  00000000  0000534f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00005675  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__vector_16>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea e1       	ldi	r30, 0x1A	; 26
  c8:	f9 e0       	ldi	r31, 0x09	; 9
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a8 31       	cpi	r26, 0x18	; 24
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a8 e1       	ldi	r26, 0x18	; 24
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a6 32       	cpi	r26, 0x26	; 38
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
  ea:	0c 94 8b 04 	jmp	0x916	; 0x916 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  f2:	0e 94 22 01 	call	0x244	; 0x244 <system_init>
  f6:	08 95       	ret

000000f8 <PWM_0_pwm_handler_cb>:
volatile uint16_t         PWM_0_isr_executed_counter = 0;
volatile PWM_0_register_t PWM_0_duty;

void PWM_0_pwm_handler_cb(void)
{
	PWM_0_duty++;
  f8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <PWM_0_duty>
  fc:	8f 5f       	subi	r24, 0xFF	; 255
  fe:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <PWM_0_duty>
	// Output duty cycle on PWM CH0
	PWM_0_load_duty_cycle_ch0(PWM_0_duty);
 102:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <PWM_0_duty>
 106:	0e 94 6f 01 	call	0x2de	; 0x2de <PWM_0_load_duty_cycle_ch0>
	PWM_0_isr_executed_counter++;
 10a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 10e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 118:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 11c:	08 95       	ret

0000011e <PWM_0_test_pwm_basic>:

uint8_t PWM_0_test_pwm_basic(void)
{

	// Enable pin output
	PWM_0_enable_output_ch0();
 11e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <PWM_0_enable_output_ch0>

	// Set channel 0 duty cycle value register value to specified value
	PWM_0_load_duty_cycle_ch0(0x3f);
 122:	8f e3       	ldi	r24, 0x3F	; 63
 124:	0e 94 6f 01 	call	0x2de	; 0x2de <PWM_0_load_duty_cycle_ch0>

	// Set counter register value
	PWM_0_load_counter(0);
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 6d 01 	call	0x2da	; 0x2da <PWM_0_load_counter>

	// Test IRQ mode

	ENABLE_INTERRUPTS();
 12e:	78 94       	sei

	PWM_0_register_callback(PWM_0_pwm_handler_cb);
 130:	8c e7       	ldi	r24, 0x7C	; 124
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 71 01 	call	0x2e2	; 0x2e2 <PWM_0_register_callback>

	// Wait for ISR to be executed 65000 times
	while (PWM_0_isr_executed_counter < 65000)
 138:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 13c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 140:	88 3e       	cpi	r24, 0xE8	; 232
 142:	9d 4f       	sbci	r25, 0xFD	; 253
 144:	c8 f3       	brcs	.-14     	; 0x138 <PWM_0_test_pwm_basic+0x1a>
		;

	return 1;
}
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	08 95       	ret

0000014a <main>:

uint16_t resultado;
int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 14a:	0e 94 79 00 	call	0xf2	; 0xf2 <atmel_start_init>

	/* Replace with your application code */
	while (1) {
		ADC_0_start_conversion(0);
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 da 00 	call	0x1b4	; 0x1b4 <ADC_0_start_conversion>
		resultado = ADC_0_get_conversion(1) ;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	0e 94 f6 00 	call	0x1ec	; 0x1ec <ADC_0_get_conversion>
 15a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <resultado>
 15e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <resultado+0x1>
		printf(" ADC: %u",resultado);
 162:	9f 93       	push	r25
 164:	8f 93       	push	r24
 166:	8e e0       	ldi	r24, 0x0E	; 14
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	9f 93       	push	r25
 16c:	8f 93       	push	r24
 16e:	0e 94 ad 01 	call	0x35a	; 0x35a <printf>
		PWM_0_test_pwm_basic();
 172:	0e 94 8f 00 	call	0x11e	; 0x11e <PWM_0_test_pwm_basic>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	2f ef       	ldi	r18, 0xFF	; 255
 178:	89 e6       	ldi	r24, 0x69	; 105
 17a:	98 e1       	ldi	r25, 0x18	; 24
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0x32>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x3c>
 186:	00 00       	nop
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	de cf       	rjmp	.-68     	; 0x14e <main+0x4>

00000192 <ADC_0_init>:
 *
 * \return Nothing
 */
void ADC_0_disable()
{
	ADCSRA &= ~(1 << ADEN);
 192:	e4 e6       	ldi	r30, 0x64	; 100
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	8e 7f       	andi	r24, 0xFE	; 254
 19a:	80 83       	st	Z, r24
 19c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 1a0:	81 e8       	ldi	r24, 0x81	; 129
 1a2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1a6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	08 95       	ret

000001b4 <ADC_0_start_conversion>:
 *
 * \return Nothing
 */
void ADC_0_start_conversion(adc_0_channel_t channel)
{
	ADMUX &= ~0x0f;
 1b4:	ec e7       	ldi	r30, 0x7C	; 124
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	90 81       	ld	r25, Z
 1ba:	90 7f       	andi	r25, 0xF0	; 240
 1bc:	90 83       	st	Z, r25
	ADMUX |= channel;
 1be:	90 81       	ld	r25, Z
 1c0:	89 2b       	or	r24, r25
 1c2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 1c4:	ea e7       	ldi	r30, 0x7A	; 122
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	80 64       	ori	r24, 0x40	; 64
 1cc:	80 83       	st	Z, r24
 1ce:	08 95       	ret

000001d0 <ADC_0_is_conversion_done>:
 * \retval true The ADC conversion is done
 * \retval false The ADC converison is not done
 */
bool ADC_0_is_conversion_done()
{
	return ((ADCSRA & (1 << ADIF)));
 1d0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
}
 1d4:	82 95       	swap	r24
 1d6:	81 70       	andi	r24, 0x01	; 1
 1d8:	08 95       	ret

000001da <ADC_0_get_conversion_result>:
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADCL | ADCH << 8);
 1da:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1de:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	98 2f       	mov	r25, r24
 1e6:	88 27       	eor	r24, r24
}
 1e8:	82 2b       	or	r24, r18
 1ea:	08 95       	ret

000001ec <ADC_0_get_conversion>:
 */
adc_result_t ADC_0_get_conversion(adc_0_channel_t channel)
{
	adc_result_t res;

	ADC_0_start_conversion(channel);
 1ec:	0e 94 da 00 	call	0x1b4	; 0x1b4 <ADC_0_start_conversion>
	while (!ADC_0_is_conversion_done())
 1f0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <ADC_0_is_conversion_done>
 1f4:	88 23       	and	r24, r24
 1f6:	e1 f3       	breq	.-8      	; 0x1f0 <ADC_0_get_conversion+0x4>
		;
	res = ADC_0_get_conversion_result();
 1f8:	0e 94 ed 00 	call	0x1da	; 0x1da <ADC_0_get_conversion_result>
	ADCSRA |= (1 << ADIF);
 1fc:	ea e7       	ldi	r30, 0x7A	; 122
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	20 81       	ld	r18, Z
 202:	20 61       	ori	r18, 0x10	; 16
 204:	20 83       	st	Z, r18
	return res;
}
 206:	08 95       	ret

00000208 <ADC_0_initialization>:
		DDRC &= ~(1 << pin);

		PORTC |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTC &= ~(1 << pin);
 208:	88 b1       	in	r24, 0x08	; 8
 20a:	8e 7f       	andi	r24, 0xFE	; 254
 20c:	88 b9       	out	0x08, r24	; 8
{

	// Disable pull-up.
	PC0_set_pull_mode(PORT_PULL_OFF);

	ADC_0_init();
 20e:	0e 94 c9 00 	call	0x192	; 0x192 <ADC_0_init>
 212:	08 95       	ret

00000214 <PWM_0_initialization>:
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 214:	8a b1       	in	r24, 0x0a	; 10
 216:	80 64       	ori	r24, 0x40	; 64
 218:	8a b9       	out	0x0a, r24	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 21a:	8b b1       	in	r24, 0x0b	; 11
 21c:	8f 7b       	andi	r24, 0xBF	; 191
 21e:	8b b9       	out	0x0b, r24	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	PWM_0_init();
 220:	0e 94 5f 01 	call	0x2be	; 0x2be <PWM_0_init>
 224:	08 95       	ret

00000226 <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 226:	8a b1       	in	r24, 0x0a	; 10
 228:	8e 7f       	andi	r24, 0xFE	; 254
 22a:	8a b9       	out	0x0a, r24	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 22c:	8b b1       	in	r24, 0x0b	; 11
 22e:	8e 7f       	andi	r24, 0xFE	; 254
 230:	8b b9       	out	0x0b, r24	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 232:	8a b1       	in	r24, 0x0a	; 10
 234:	82 60       	ori	r24, 0x02	; 2
 236:	8a b9       	out	0x0a, r24	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 238:	8b b1       	in	r24, 0x0b	; 11
 23a:	8d 7f       	andi	r24, 0xFD	; 253
 23c:	8b b9       	out	0x0b, r24	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 23e:	0e 94 8a 01 	call	0x314	; 0x314 <USART_0_init>
 242:	08 95       	ret

00000244 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
 244:	8d e3       	ldi	r24, 0x3D	; 61
 246:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f8065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 250:	94 b1       	in	r25, 0x04	; 4
 252:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 254:	95 b1       	in	r25, 0x05	; 5
 256:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 258:	97 b1       	in	r25, 0x07	; 7
 25a:	90 78       	andi	r25, 0x80	; 128
 25c:	97 b9       	out	0x07, r25	; 7

		PORTC |= mask;
 25e:	98 b1       	in	r25, 0x08	; 8
 260:	9f 67       	ori	r25, 0x7F	; 127
 262:	98 b9       	out	0x08, r25	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 264:	9a b1       	in	r25, 0x0a	; 10
 266:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 268:	9b b1       	in	r25, 0x0b	; 11
 26a:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 26c:	8d b1       	in	r24, 0x0d	; 13
 26e:	80 7f       	andi	r24, 0xF0	; 240
 270:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 272:	8e b1       	in	r24, 0x0e	; 14
 274:	8f 60       	ori	r24, 0x0F	; 15
 276:	8e b9       	out	0x0e, r24	; 14
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 278:	84 b1       	in	r24, 0x04	; 4
 27a:	80 62       	ori	r24, 0x20	; 32
 27c:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 27e:	85 b1       	in	r24, 0x05	; 5
 280:	8f 7d       	andi	r24, 0xDF	; 223
 282:	85 b9       	out	0x05, r24	; 5
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
 284:	84 b1       	in	r24, 0x04	; 4
 286:	8f 77       	andi	r24, 0x7F	; 127
 288:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~(1 << pin);

		PORTB |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTB &= ~(1 << pin);
 28a:	85 b1       	in	r24, 0x05	; 5
 28c:	8f 77       	andi	r24, 0x7F	; 127
 28e:	85 b9       	out	0x05, r24	; 5
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	60 e8       	ldi	r22, 0x80	; 128
 294:	81 e6       	ldi	r24, 0x61	; 97
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 58 01 	call	0x2b0	; 0x2b0 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 29c:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 29e:	15 be       	out	0x35, r1	; 53

	ENABLE_INTERRUPTS();
 2a0:	78 94       	sei
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	sysctrl_init();

	ADC_0_initialization();
 2a2:	0e 94 04 01 	call	0x208	; 0x208 <ADC_0_initialization>

	PWM_0_initialization();
 2a6:	0e 94 0a 01 	call	0x214	; 0x214 <PWM_0_initialization>

	USART_0_initialization();
 2aa:	0e 94 13 01 	call	0x226	; 0x226 <USART_0_initialization>
 2ae:	08 95       	ret

000002b0 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 2b0:	2f b7       	in	r18, 0x3f	; 63
	cli
 2b2:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 2b4:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 2b6:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 2b8:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 2ba:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 2bc:	08 95       	ret

000002be <PWM_0_init>:
 *
 * \return Nothing
 */
void PWM_0_load_duty_cycle_ch1(PWM_0_register_t duty_value)
{
	OCR0B = duty_value;
 2be:	e4 e6       	ldi	r30, 0x64	; 100
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	8f 7d       	andi	r24, 0xDF	; 223
 2c6:	80 83       	st	Z, r24
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	84 bd       	out	0x24, r24	; 36
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	85 bd       	out	0x25, r24	; 37
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	08 95       	ret

000002d4 <PWM_0_enable_output_ch0>:
 2d4:	84 b5       	in	r24, 0x24	; 36
 2d6:	84 bd       	out	0x24, r24	; 36
 2d8:	08 95       	ret

000002da <PWM_0_load_counter>:
 2da:	86 bd       	out	0x26, r24	; 38
 2dc:	08 95       	ret

000002de <PWM_0_load_duty_cycle_ch0>:
 2de:	87 bd       	out	0x27, r24	; 39
 2e0:	08 95       	ret

000002e2 <PWM_0_register_callback>:
 *
 * \return Nothing.
 */
void PWM_0_register_callback(pwm_irq_cb_t f)
{
	PWM_0_cb = f;
 2e2:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <PWM_0_cb+0x1>
 2e6:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <PWM_0_cb>
 2ea:	08 95       	ret

000002ec <__vector_16>:
}

ISR(TIMER0_OVF_vect)
{
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	8f 93       	push	r24
	static volatile uint8_t callback_count = 0;

	// Clear the interrupt flag
	TIFR0 |= (1 << TOV0);
 2f8:	85 b3       	in	r24, 0x15	; 21
 2fa:	81 60       	ori	r24, 0x01	; 1
 2fc:	85 bb       	out	0x15, r24	; 21

	// callback function - called every 0 passes
	if ((++callback_count >= PWM_0_INTERRUPT_CB_RATE) && (PWM_0_INTERRUPT_CB_RATE != 0)) {
 2fe:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <callback_count.1833>
 302:	8f 5f       	subi	r24, 0xFF	; 255
 304:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <callback_count.1833>
		if (PWM_0_cb != NULL) {
			PWM_0_cb();
		}
	}
}
 308:	8f 91       	pop	r24
 30a:	0f 90       	pop	r0
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

00000314 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(UCSR0A & (1 << RXC0)))
		;
	return UDR0;
}
 314:	e4 e6       	ldi	r30, 0x64	; 100
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	8d 7f       	andi	r24, 0xFD	; 253
 31c:	80 83       	st	Z, r24
 31e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 322:	87 e6       	ldi	r24, 0x67	; 103
 324:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 328:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 32c:	88 e9       	ldi	r24, 0x98	; 152
 32e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <__iob+0x3>
 33a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__iob+0x2>
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	08 95       	ret

00000342 <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0)))
 342:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 346:	95 ff       	sbrs	r25, 5
 348:	fc cf       	rjmp	.-8      	; 0x342 <USART_0_write>
		;
	UDR0 = data;
 34a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 34e:	08 95       	ret

00000350 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 350:	0e 94 a1 01 	call	0x342	; 0x342 <USART_0_write>
	return 0;
}
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	08 95       	ret

0000035a <printf>:
 35a:	a0 e0       	ldi	r26, 0x00	; 0
 35c:	b0 e0       	ldi	r27, 0x00	; 0
 35e:	e3 eb       	ldi	r30, 0xB3	; 179
 360:	f1 e0       	ldi	r31, 0x01	; 1
 362:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__prologue_saves__+0x20>
 366:	ae 01       	movw	r20, r28
 368:	4b 5f       	subi	r20, 0xFB	; 251
 36a:	5f 4f       	sbci	r21, 0xFF	; 255
 36c:	fa 01       	movw	r30, r20
 36e:	61 91       	ld	r22, Z+
 370:	71 91       	ld	r23, Z+
 372:	af 01       	movw	r20, r30
 374:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__iob+0x2>
 378:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__iob+0x3>
 37c:	0e 94 c3 01 	call	0x386	; 0x386 <vfprintf>
 380:	e2 e0       	ldi	r30, 0x02	; 2
 382:	0c 94 80 04 	jmp	0x900	; 0x900 <__stack+0x1>

00000386 <vfprintf>:
 386:	ab e0       	ldi	r26, 0x0B	; 11
 388:	b0 e0       	ldi	r27, 0x00	; 0
 38a:	e9 ec       	ldi	r30, 0xC9	; 201
 38c:	f1 e0       	ldi	r31, 0x01	; 1
 38e:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__prologue_saves__>
 392:	6c 01       	movw	r12, r24
 394:	7b 01       	movw	r14, r22
 396:	8a 01       	movw	r16, r20
 398:	fc 01       	movw	r30, r24
 39a:	17 82       	std	Z+7, r1	; 0x07
 39c:	16 82       	std	Z+6, r1	; 0x06
 39e:	83 81       	ldd	r24, Z+3	; 0x03
 3a0:	81 ff       	sbrs	r24, 1
 3a2:	cc c1       	rjmp	.+920    	; 0x73c <__EEPROM_REGION_LENGTH__+0x33c>
 3a4:	ce 01       	movw	r24, r28
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	3c 01       	movw	r6, r24
 3aa:	f6 01       	movw	r30, r12
 3ac:	93 81       	ldd	r25, Z+3	; 0x03
 3ae:	f7 01       	movw	r30, r14
 3b0:	93 fd       	sbrc	r25, 3
 3b2:	85 91       	lpm	r24, Z+
 3b4:	93 ff       	sbrs	r25, 3
 3b6:	81 91       	ld	r24, Z+
 3b8:	7f 01       	movw	r14, r30
 3ba:	88 23       	and	r24, r24
 3bc:	09 f4       	brne	.+2      	; 0x3c0 <vfprintf+0x3a>
 3be:	ba c1       	rjmp	.+884    	; 0x734 <__EEPROM_REGION_LENGTH__+0x334>
 3c0:	85 32       	cpi	r24, 0x25	; 37
 3c2:	39 f4       	brne	.+14     	; 0x3d2 <vfprintf+0x4c>
 3c4:	93 fd       	sbrc	r25, 3
 3c6:	85 91       	lpm	r24, Z+
 3c8:	93 ff       	sbrs	r25, 3
 3ca:	81 91       	ld	r24, Z+
 3cc:	7f 01       	movw	r14, r30
 3ce:	85 32       	cpi	r24, 0x25	; 37
 3d0:	29 f4       	brne	.+10     	; 0x3dc <vfprintf+0x56>
 3d2:	b6 01       	movw	r22, r12
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 ba 03 	call	0x774	; 0x774 <fputc>
 3da:	e7 cf       	rjmp	.-50     	; 0x3aa <vfprintf+0x24>
 3dc:	91 2c       	mov	r9, r1
 3de:	21 2c       	mov	r2, r1
 3e0:	31 2c       	mov	r3, r1
 3e2:	ff e1       	ldi	r31, 0x1F	; 31
 3e4:	f3 15       	cp	r31, r3
 3e6:	d8 f0       	brcs	.+54     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3e8:	8b 32       	cpi	r24, 0x2B	; 43
 3ea:	79 f0       	breq	.+30     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3ec:	38 f4       	brcc	.+14     	; 0x3fc <vfprintf+0x76>
 3ee:	80 32       	cpi	r24, 0x20	; 32
 3f0:	79 f0       	breq	.+30     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3f2:	83 32       	cpi	r24, 0x23	; 35
 3f4:	a1 f4       	brne	.+40     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3f6:	23 2d       	mov	r18, r3
 3f8:	20 61       	ori	r18, 0x10	; 16
 3fa:	1d c0       	rjmp	.+58     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 3fc:	8d 32       	cpi	r24, 0x2D	; 45
 3fe:	61 f0       	breq	.+24     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 400:	80 33       	cpi	r24, 0x30	; 48
 402:	69 f4       	brne	.+26     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 404:	23 2d       	mov	r18, r3
 406:	21 60       	ori	r18, 0x01	; 1
 408:	16 c0       	rjmp	.+44     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 40a:	83 2d       	mov	r24, r3
 40c:	82 60       	ori	r24, 0x02	; 2
 40e:	38 2e       	mov	r3, r24
 410:	e3 2d       	mov	r30, r3
 412:	e4 60       	ori	r30, 0x04	; 4
 414:	3e 2e       	mov	r3, r30
 416:	2a c0       	rjmp	.+84     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 418:	f3 2d       	mov	r31, r3
 41a:	f8 60       	ori	r31, 0x08	; 8
 41c:	1d c0       	rjmp	.+58     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 41e:	37 fc       	sbrc	r3, 7
 420:	2d c0       	rjmp	.+90     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 422:	20 ed       	ldi	r18, 0xD0	; 208
 424:	28 0f       	add	r18, r24
 426:	2a 30       	cpi	r18, 0x0A	; 10
 428:	40 f0       	brcs	.+16     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 42a:	8e 32       	cpi	r24, 0x2E	; 46
 42c:	b9 f4       	brne	.+46     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 42e:	36 fc       	sbrc	r3, 6
 430:	81 c1       	rjmp	.+770    	; 0x734 <__EEPROM_REGION_LENGTH__+0x334>
 432:	23 2d       	mov	r18, r3
 434:	20 64       	ori	r18, 0x40	; 64
 436:	32 2e       	mov	r3, r18
 438:	19 c0       	rjmp	.+50     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 43a:	36 fe       	sbrs	r3, 6
 43c:	06 c0       	rjmp	.+12     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 43e:	8a e0       	ldi	r24, 0x0A	; 10
 440:	98 9e       	mul	r9, r24
 442:	20 0d       	add	r18, r0
 444:	11 24       	eor	r1, r1
 446:	92 2e       	mov	r9, r18
 448:	11 c0       	rjmp	.+34     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 44a:	ea e0       	ldi	r30, 0x0A	; 10
 44c:	2e 9e       	mul	r2, r30
 44e:	20 0d       	add	r18, r0
 450:	11 24       	eor	r1, r1
 452:	22 2e       	mov	r2, r18
 454:	f3 2d       	mov	r31, r3
 456:	f0 62       	ori	r31, 0x20	; 32
 458:	3f 2e       	mov	r3, r31
 45a:	08 c0       	rjmp	.+16     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 45c:	8c 36       	cpi	r24, 0x6C	; 108
 45e:	21 f4       	brne	.+8      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 460:	83 2d       	mov	r24, r3
 462:	80 68       	ori	r24, 0x80	; 128
 464:	38 2e       	mov	r3, r24
 466:	02 c0       	rjmp	.+4      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 468:	88 36       	cpi	r24, 0x68	; 104
 46a:	41 f4       	brne	.+16     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 46c:	f7 01       	movw	r30, r14
 46e:	93 fd       	sbrc	r25, 3
 470:	85 91       	lpm	r24, Z+
 472:	93 ff       	sbrs	r25, 3
 474:	81 91       	ld	r24, Z+
 476:	7f 01       	movw	r14, r30
 478:	81 11       	cpse	r24, r1
 47a:	b3 cf       	rjmp	.-154    	; 0x3e2 <vfprintf+0x5c>
 47c:	98 2f       	mov	r25, r24
 47e:	9f 7d       	andi	r25, 0xDF	; 223
 480:	95 54       	subi	r25, 0x45	; 69
 482:	93 30       	cpi	r25, 0x03	; 3
 484:	28 f4       	brcc	.+10     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 486:	0c 5f       	subi	r16, 0xFC	; 252
 488:	1f 4f       	sbci	r17, 0xFF	; 255
 48a:	9f e3       	ldi	r25, 0x3F	; 63
 48c:	99 83       	std	Y+1, r25	; 0x01
 48e:	0d c0       	rjmp	.+26     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 490:	83 36       	cpi	r24, 0x63	; 99
 492:	31 f0       	breq	.+12     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 494:	83 37       	cpi	r24, 0x73	; 115
 496:	71 f0       	breq	.+28     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 498:	83 35       	cpi	r24, 0x53	; 83
 49a:	09 f0       	breq	.+2      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 49c:	59 c0       	rjmp	.+178    	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
 49e:	21 c0       	rjmp	.+66     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 4a0:	f8 01       	movw	r30, r16
 4a2:	80 81       	ld	r24, Z
 4a4:	89 83       	std	Y+1, r24	; 0x01
 4a6:	0e 5f       	subi	r16, 0xFE	; 254
 4a8:	1f 4f       	sbci	r17, 0xFF	; 255
 4aa:	88 24       	eor	r8, r8
 4ac:	83 94       	inc	r8
 4ae:	91 2c       	mov	r9, r1
 4b0:	53 01       	movw	r10, r6
 4b2:	13 c0       	rjmp	.+38     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4b4:	28 01       	movw	r4, r16
 4b6:	f2 e0       	ldi	r31, 0x02	; 2
 4b8:	4f 0e       	add	r4, r31
 4ba:	51 1c       	adc	r5, r1
 4bc:	f8 01       	movw	r30, r16
 4be:	a0 80       	ld	r10, Z
 4c0:	b1 80       	ldd	r11, Z+1	; 0x01
 4c2:	36 fe       	sbrs	r3, 6
 4c4:	03 c0       	rjmp	.+6      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4c6:	69 2d       	mov	r22, r9
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4cc:	6f ef       	ldi	r22, 0xFF	; 255
 4ce:	7f ef       	ldi	r23, 0xFF	; 255
 4d0:	c5 01       	movw	r24, r10
 4d2:	0e 94 af 03 	call	0x75e	; 0x75e <strnlen>
 4d6:	4c 01       	movw	r8, r24
 4d8:	82 01       	movw	r16, r4
 4da:	f3 2d       	mov	r31, r3
 4dc:	ff 77       	andi	r31, 0x7F	; 127
 4de:	3f 2e       	mov	r3, r31
 4e0:	16 c0       	rjmp	.+44     	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
 4e2:	28 01       	movw	r4, r16
 4e4:	22 e0       	ldi	r18, 0x02	; 2
 4e6:	42 0e       	add	r4, r18
 4e8:	51 1c       	adc	r5, r1
 4ea:	f8 01       	movw	r30, r16
 4ec:	a0 80       	ld	r10, Z
 4ee:	b1 80       	ldd	r11, Z+1	; 0x01
 4f0:	36 fe       	sbrs	r3, 6
 4f2:	03 c0       	rjmp	.+6      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 4f4:	69 2d       	mov	r22, r9
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 4fa:	6f ef       	ldi	r22, 0xFF	; 255
 4fc:	7f ef       	ldi	r23, 0xFF	; 255
 4fe:	c5 01       	movw	r24, r10
 500:	0e 94 a4 03 	call	0x748	; 0x748 <strnlen_P>
 504:	4c 01       	movw	r8, r24
 506:	f3 2d       	mov	r31, r3
 508:	f0 68       	ori	r31, 0x80	; 128
 50a:	3f 2e       	mov	r3, r31
 50c:	82 01       	movw	r16, r4
 50e:	33 fc       	sbrc	r3, 3
 510:	1b c0       	rjmp	.+54     	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
 512:	82 2d       	mov	r24, r2
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	88 16       	cp	r8, r24
 518:	99 06       	cpc	r9, r25
 51a:	b0 f4       	brcc	.+44     	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
 51c:	b6 01       	movw	r22, r12
 51e:	80 e2       	ldi	r24, 0x20	; 32
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 ba 03 	call	0x774	; 0x774 <fputc>
 526:	2a 94       	dec	r2
 528:	f4 cf       	rjmp	.-24     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
 52a:	f5 01       	movw	r30, r10
 52c:	37 fc       	sbrc	r3, 7
 52e:	85 91       	lpm	r24, Z+
 530:	37 fe       	sbrs	r3, 7
 532:	81 91       	ld	r24, Z+
 534:	5f 01       	movw	r10, r30
 536:	b6 01       	movw	r22, r12
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 ba 03 	call	0x774	; 0x774 <fputc>
 53e:	21 10       	cpse	r2, r1
 540:	2a 94       	dec	r2
 542:	21 e0       	ldi	r18, 0x01	; 1
 544:	82 1a       	sub	r8, r18
 546:	91 08       	sbc	r9, r1
 548:	81 14       	cp	r8, r1
 54a:	91 04       	cpc	r9, r1
 54c:	71 f7       	brne	.-36     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 54e:	e8 c0       	rjmp	.+464    	; 0x720 <__EEPROM_REGION_LENGTH__+0x320>
 550:	84 36       	cpi	r24, 0x64	; 100
 552:	11 f0       	breq	.+4      	; 0x558 <__EEPROM_REGION_LENGTH__+0x158>
 554:	89 36       	cpi	r24, 0x69	; 105
 556:	41 f5       	brne	.+80     	; 0x5a8 <__EEPROM_REGION_LENGTH__+0x1a8>
 558:	f8 01       	movw	r30, r16
 55a:	37 fe       	sbrs	r3, 7
 55c:	07 c0       	rjmp	.+14     	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
 55e:	60 81       	ld	r22, Z
 560:	71 81       	ldd	r23, Z+1	; 0x01
 562:	82 81       	ldd	r24, Z+2	; 0x02
 564:	93 81       	ldd	r25, Z+3	; 0x03
 566:	0c 5f       	subi	r16, 0xFC	; 252
 568:	1f 4f       	sbci	r17, 0xFF	; 255
 56a:	08 c0       	rjmp	.+16     	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
 56c:	60 81       	ld	r22, Z
 56e:	71 81       	ldd	r23, Z+1	; 0x01
 570:	07 2e       	mov	r0, r23
 572:	00 0c       	add	r0, r0
 574:	88 0b       	sbc	r24, r24
 576:	99 0b       	sbc	r25, r25
 578:	0e 5f       	subi	r16, 0xFE	; 254
 57a:	1f 4f       	sbci	r17, 0xFF	; 255
 57c:	f3 2d       	mov	r31, r3
 57e:	ff 76       	andi	r31, 0x6F	; 111
 580:	3f 2e       	mov	r3, r31
 582:	97 ff       	sbrs	r25, 7
 584:	09 c0       	rjmp	.+18     	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
 586:	90 95       	com	r25
 588:	80 95       	com	r24
 58a:	70 95       	com	r23
 58c:	61 95       	neg	r22
 58e:	7f 4f       	sbci	r23, 0xFF	; 255
 590:	8f 4f       	sbci	r24, 0xFF	; 255
 592:	9f 4f       	sbci	r25, 0xFF	; 255
 594:	f0 68       	ori	r31, 0x80	; 128
 596:	3f 2e       	mov	r3, r31
 598:	2a e0       	ldi	r18, 0x0A	; 10
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	a3 01       	movw	r20, r6
 59e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ultoa_invert>
 5a2:	88 2e       	mov	r8, r24
 5a4:	86 18       	sub	r8, r6
 5a6:	45 c0       	rjmp	.+138    	; 0x632 <__EEPROM_REGION_LENGTH__+0x232>
 5a8:	85 37       	cpi	r24, 0x75	; 117
 5aa:	31 f4       	brne	.+12     	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
 5ac:	23 2d       	mov	r18, r3
 5ae:	2f 7e       	andi	r18, 0xEF	; 239
 5b0:	b2 2e       	mov	r11, r18
 5b2:	2a e0       	ldi	r18, 0x0A	; 10
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	25 c0       	rjmp	.+74     	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
 5b8:	93 2d       	mov	r25, r3
 5ba:	99 7f       	andi	r25, 0xF9	; 249
 5bc:	b9 2e       	mov	r11, r25
 5be:	8f 36       	cpi	r24, 0x6F	; 111
 5c0:	c1 f0       	breq	.+48     	; 0x5f2 <__EEPROM_REGION_LENGTH__+0x1f2>
 5c2:	18 f4       	brcc	.+6      	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
 5c4:	88 35       	cpi	r24, 0x58	; 88
 5c6:	79 f0       	breq	.+30     	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
 5c8:	b5 c0       	rjmp	.+362    	; 0x734 <__EEPROM_REGION_LENGTH__+0x334>
 5ca:	80 37       	cpi	r24, 0x70	; 112
 5cc:	19 f0       	breq	.+6      	; 0x5d4 <__EEPROM_REGION_LENGTH__+0x1d4>
 5ce:	88 37       	cpi	r24, 0x78	; 120
 5d0:	21 f0       	breq	.+8      	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
 5d2:	b0 c0       	rjmp	.+352    	; 0x734 <__EEPROM_REGION_LENGTH__+0x334>
 5d4:	e9 2f       	mov	r30, r25
 5d6:	e0 61       	ori	r30, 0x10	; 16
 5d8:	be 2e       	mov	r11, r30
 5da:	b4 fe       	sbrs	r11, 4
 5dc:	0d c0       	rjmp	.+26     	; 0x5f8 <__EEPROM_REGION_LENGTH__+0x1f8>
 5de:	fb 2d       	mov	r31, r11
 5e0:	f4 60       	ori	r31, 0x04	; 4
 5e2:	bf 2e       	mov	r11, r31
 5e4:	09 c0       	rjmp	.+18     	; 0x5f8 <__EEPROM_REGION_LENGTH__+0x1f8>
 5e6:	34 fe       	sbrs	r3, 4
 5e8:	0a c0       	rjmp	.+20     	; 0x5fe <__EEPROM_REGION_LENGTH__+0x1fe>
 5ea:	29 2f       	mov	r18, r25
 5ec:	26 60       	ori	r18, 0x06	; 6
 5ee:	b2 2e       	mov	r11, r18
 5f0:	06 c0       	rjmp	.+12     	; 0x5fe <__EEPROM_REGION_LENGTH__+0x1fe>
 5f2:	28 e0       	ldi	r18, 0x08	; 8
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	05 c0       	rjmp	.+10     	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
 5f8:	20 e1       	ldi	r18, 0x10	; 16
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
 5fe:	20 e1       	ldi	r18, 0x10	; 16
 600:	32 e0       	ldi	r19, 0x02	; 2
 602:	f8 01       	movw	r30, r16
 604:	b7 fe       	sbrs	r11, 7
 606:	07 c0       	rjmp	.+14     	; 0x616 <__EEPROM_REGION_LENGTH__+0x216>
 608:	60 81       	ld	r22, Z
 60a:	71 81       	ldd	r23, Z+1	; 0x01
 60c:	82 81       	ldd	r24, Z+2	; 0x02
 60e:	93 81       	ldd	r25, Z+3	; 0x03
 610:	0c 5f       	subi	r16, 0xFC	; 252
 612:	1f 4f       	sbci	r17, 0xFF	; 255
 614:	06 c0       	rjmp	.+12     	; 0x622 <__EEPROM_REGION_LENGTH__+0x222>
 616:	60 81       	ld	r22, Z
 618:	71 81       	ldd	r23, Z+1	; 0x01
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	0e 5f       	subi	r16, 0xFE	; 254
 620:	1f 4f       	sbci	r17, 0xFF	; 255
 622:	a3 01       	movw	r20, r6
 624:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ultoa_invert>
 628:	88 2e       	mov	r8, r24
 62a:	86 18       	sub	r8, r6
 62c:	fb 2d       	mov	r31, r11
 62e:	ff 77       	andi	r31, 0x7F	; 127
 630:	3f 2e       	mov	r3, r31
 632:	36 fe       	sbrs	r3, 6
 634:	0d c0       	rjmp	.+26     	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
 636:	23 2d       	mov	r18, r3
 638:	2e 7f       	andi	r18, 0xFE	; 254
 63a:	a2 2e       	mov	r10, r18
 63c:	89 14       	cp	r8, r9
 63e:	58 f4       	brcc	.+22     	; 0x656 <__EEPROM_REGION_LENGTH__+0x256>
 640:	34 fe       	sbrs	r3, 4
 642:	0b c0       	rjmp	.+22     	; 0x65a <__EEPROM_REGION_LENGTH__+0x25a>
 644:	32 fc       	sbrc	r3, 2
 646:	09 c0       	rjmp	.+18     	; 0x65a <__EEPROM_REGION_LENGTH__+0x25a>
 648:	83 2d       	mov	r24, r3
 64a:	8e 7e       	andi	r24, 0xEE	; 238
 64c:	a8 2e       	mov	r10, r24
 64e:	05 c0       	rjmp	.+10     	; 0x65a <__EEPROM_REGION_LENGTH__+0x25a>
 650:	b8 2c       	mov	r11, r8
 652:	a3 2c       	mov	r10, r3
 654:	03 c0       	rjmp	.+6      	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
 656:	b8 2c       	mov	r11, r8
 658:	01 c0       	rjmp	.+2      	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
 65a:	b9 2c       	mov	r11, r9
 65c:	a4 fe       	sbrs	r10, 4
 65e:	0f c0       	rjmp	.+30     	; 0x67e <__EEPROM_REGION_LENGTH__+0x27e>
 660:	fe 01       	movw	r30, r28
 662:	e8 0d       	add	r30, r8
 664:	f1 1d       	adc	r31, r1
 666:	80 81       	ld	r24, Z
 668:	80 33       	cpi	r24, 0x30	; 48
 66a:	21 f4       	brne	.+8      	; 0x674 <__EEPROM_REGION_LENGTH__+0x274>
 66c:	9a 2d       	mov	r25, r10
 66e:	99 7e       	andi	r25, 0xE9	; 233
 670:	a9 2e       	mov	r10, r25
 672:	09 c0       	rjmp	.+18     	; 0x686 <__EEPROM_REGION_LENGTH__+0x286>
 674:	a2 fe       	sbrs	r10, 2
 676:	06 c0       	rjmp	.+12     	; 0x684 <__EEPROM_REGION_LENGTH__+0x284>
 678:	b3 94       	inc	r11
 67a:	b3 94       	inc	r11
 67c:	04 c0       	rjmp	.+8      	; 0x686 <__EEPROM_REGION_LENGTH__+0x286>
 67e:	8a 2d       	mov	r24, r10
 680:	86 78       	andi	r24, 0x86	; 134
 682:	09 f0       	breq	.+2      	; 0x686 <__EEPROM_REGION_LENGTH__+0x286>
 684:	b3 94       	inc	r11
 686:	a3 fc       	sbrc	r10, 3
 688:	11 c0       	rjmp	.+34     	; 0x6ac <__EEPROM_REGION_LENGTH__+0x2ac>
 68a:	a0 fe       	sbrs	r10, 0
 68c:	06 c0       	rjmp	.+12     	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
 68e:	b2 14       	cp	r11, r2
 690:	88 f4       	brcc	.+34     	; 0x6b4 <__EEPROM_REGION_LENGTH__+0x2b4>
 692:	28 0c       	add	r2, r8
 694:	92 2c       	mov	r9, r2
 696:	9b 18       	sub	r9, r11
 698:	0e c0       	rjmp	.+28     	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
 69a:	b2 14       	cp	r11, r2
 69c:	60 f4       	brcc	.+24     	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
 69e:	b6 01       	movw	r22, r12
 6a0:	80 e2       	ldi	r24, 0x20	; 32
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	0e 94 ba 03 	call	0x774	; 0x774 <fputc>
 6a8:	b3 94       	inc	r11
 6aa:	f7 cf       	rjmp	.-18     	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
 6ac:	b2 14       	cp	r11, r2
 6ae:	18 f4       	brcc	.+6      	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
 6b0:	2b 18       	sub	r2, r11
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <__EEPROM_REGION_LENGTH__+0x2b8>
 6b4:	98 2c       	mov	r9, r8
 6b6:	21 2c       	mov	r2, r1
 6b8:	a4 fe       	sbrs	r10, 4
 6ba:	10 c0       	rjmp	.+32     	; 0x6dc <__EEPROM_REGION_LENGTH__+0x2dc>
 6bc:	b6 01       	movw	r22, r12
 6be:	80 e3       	ldi	r24, 0x30	; 48
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	0e 94 ba 03 	call	0x774	; 0x774 <fputc>
 6c6:	a2 fe       	sbrs	r10, 2
 6c8:	17 c0       	rjmp	.+46     	; 0x6f8 <__EEPROM_REGION_LENGTH__+0x2f8>
 6ca:	a1 fc       	sbrc	r10, 1
 6cc:	03 c0       	rjmp	.+6      	; 0x6d4 <__EEPROM_REGION_LENGTH__+0x2d4>
 6ce:	88 e7       	ldi	r24, 0x78	; 120
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <__EEPROM_REGION_LENGTH__+0x2d8>
 6d4:	88 e5       	ldi	r24, 0x58	; 88
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	b6 01       	movw	r22, r12
 6da:	0c c0       	rjmp	.+24     	; 0x6f4 <__EEPROM_REGION_LENGTH__+0x2f4>
 6dc:	8a 2d       	mov	r24, r10
 6de:	86 78       	andi	r24, 0x86	; 134
 6e0:	59 f0       	breq	.+22     	; 0x6f8 <__EEPROM_REGION_LENGTH__+0x2f8>
 6e2:	a1 fe       	sbrs	r10, 1
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <__EEPROM_REGION_LENGTH__+0x2ea>
 6e6:	8b e2       	ldi	r24, 0x2B	; 43
 6e8:	01 c0       	rjmp	.+2      	; 0x6ec <__EEPROM_REGION_LENGTH__+0x2ec>
 6ea:	80 e2       	ldi	r24, 0x20	; 32
 6ec:	a7 fc       	sbrc	r10, 7
 6ee:	8d e2       	ldi	r24, 0x2D	; 45
 6f0:	b6 01       	movw	r22, r12
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	0e 94 ba 03 	call	0x774	; 0x774 <fputc>
 6f8:	89 14       	cp	r8, r9
 6fa:	38 f4       	brcc	.+14     	; 0x70a <__EEPROM_REGION_LENGTH__+0x30a>
 6fc:	b6 01       	movw	r22, r12
 6fe:	80 e3       	ldi	r24, 0x30	; 48
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	0e 94 ba 03 	call	0x774	; 0x774 <fputc>
 706:	9a 94       	dec	r9
 708:	f7 cf       	rjmp	.-18     	; 0x6f8 <__EEPROM_REGION_LENGTH__+0x2f8>
 70a:	8a 94       	dec	r8
 70c:	f3 01       	movw	r30, r6
 70e:	e8 0d       	add	r30, r8
 710:	f1 1d       	adc	r31, r1
 712:	80 81       	ld	r24, Z
 714:	b6 01       	movw	r22, r12
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	0e 94 ba 03 	call	0x774	; 0x774 <fputc>
 71c:	81 10       	cpse	r8, r1
 71e:	f5 cf       	rjmp	.-22     	; 0x70a <__EEPROM_REGION_LENGTH__+0x30a>
 720:	22 20       	and	r2, r2
 722:	09 f4       	brne	.+2      	; 0x726 <__EEPROM_REGION_LENGTH__+0x326>
 724:	42 ce       	rjmp	.-892    	; 0x3aa <vfprintf+0x24>
 726:	b6 01       	movw	r22, r12
 728:	80 e2       	ldi	r24, 0x20	; 32
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0e 94 ba 03 	call	0x774	; 0x774 <fputc>
 730:	2a 94       	dec	r2
 732:	f6 cf       	rjmp	.-20     	; 0x720 <__EEPROM_REGION_LENGTH__+0x320>
 734:	f6 01       	movw	r30, r12
 736:	86 81       	ldd	r24, Z+6	; 0x06
 738:	97 81       	ldd	r25, Z+7	; 0x07
 73a:	02 c0       	rjmp	.+4      	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
 73c:	8f ef       	ldi	r24, 0xFF	; 255
 73e:	9f ef       	ldi	r25, 0xFF	; 255
 740:	2b 96       	adiw	r28, 0x0b	; 11
 742:	e2 e1       	ldi	r30, 0x12	; 18
 744:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__epilogue_restores__>

00000748 <strnlen_P>:
 748:	fc 01       	movw	r30, r24
 74a:	05 90       	lpm	r0, Z+
 74c:	61 50       	subi	r22, 0x01	; 1
 74e:	70 40       	sbci	r23, 0x00	; 0
 750:	01 10       	cpse	r0, r1
 752:	d8 f7       	brcc	.-10     	; 0x74a <strnlen_P+0x2>
 754:	80 95       	com	r24
 756:	90 95       	com	r25
 758:	8e 0f       	add	r24, r30
 75a:	9f 1f       	adc	r25, r31
 75c:	08 95       	ret

0000075e <strnlen>:
 75e:	fc 01       	movw	r30, r24
 760:	61 50       	subi	r22, 0x01	; 1
 762:	70 40       	sbci	r23, 0x00	; 0
 764:	01 90       	ld	r0, Z+
 766:	01 10       	cpse	r0, r1
 768:	d8 f7       	brcc	.-10     	; 0x760 <strnlen+0x2>
 76a:	80 95       	com	r24
 76c:	90 95       	com	r25
 76e:	8e 0f       	add	r24, r30
 770:	9f 1f       	adc	r25, r31
 772:	08 95       	ret

00000774 <fputc>:
 774:	0f 93       	push	r16
 776:	1f 93       	push	r17
 778:	cf 93       	push	r28
 77a:	df 93       	push	r29
 77c:	fb 01       	movw	r30, r22
 77e:	23 81       	ldd	r18, Z+3	; 0x03
 780:	21 fd       	sbrc	r18, 1
 782:	03 c0       	rjmp	.+6      	; 0x78a <fputc+0x16>
 784:	8f ef       	ldi	r24, 0xFF	; 255
 786:	9f ef       	ldi	r25, 0xFF	; 255
 788:	2c c0       	rjmp	.+88     	; 0x7e2 <fputc+0x6e>
 78a:	22 ff       	sbrs	r18, 2
 78c:	16 c0       	rjmp	.+44     	; 0x7ba <fputc+0x46>
 78e:	46 81       	ldd	r20, Z+6	; 0x06
 790:	57 81       	ldd	r21, Z+7	; 0x07
 792:	24 81       	ldd	r18, Z+4	; 0x04
 794:	35 81       	ldd	r19, Z+5	; 0x05
 796:	42 17       	cp	r20, r18
 798:	53 07       	cpc	r21, r19
 79a:	44 f4       	brge	.+16     	; 0x7ac <fputc+0x38>
 79c:	a0 81       	ld	r26, Z
 79e:	b1 81       	ldd	r27, Z+1	; 0x01
 7a0:	9d 01       	movw	r18, r26
 7a2:	2f 5f       	subi	r18, 0xFF	; 255
 7a4:	3f 4f       	sbci	r19, 0xFF	; 255
 7a6:	31 83       	std	Z+1, r19	; 0x01
 7a8:	20 83       	st	Z, r18
 7aa:	8c 93       	st	X, r24
 7ac:	26 81       	ldd	r18, Z+6	; 0x06
 7ae:	37 81       	ldd	r19, Z+7	; 0x07
 7b0:	2f 5f       	subi	r18, 0xFF	; 255
 7b2:	3f 4f       	sbci	r19, 0xFF	; 255
 7b4:	37 83       	std	Z+7, r19	; 0x07
 7b6:	26 83       	std	Z+6, r18	; 0x06
 7b8:	14 c0       	rjmp	.+40     	; 0x7e2 <fputc+0x6e>
 7ba:	8b 01       	movw	r16, r22
 7bc:	ec 01       	movw	r28, r24
 7be:	fb 01       	movw	r30, r22
 7c0:	00 84       	ldd	r0, Z+8	; 0x08
 7c2:	f1 85       	ldd	r31, Z+9	; 0x09
 7c4:	e0 2d       	mov	r30, r0
 7c6:	09 95       	icall
 7c8:	89 2b       	or	r24, r25
 7ca:	e1 f6       	brne	.-72     	; 0x784 <fputc+0x10>
 7cc:	d8 01       	movw	r26, r16
 7ce:	16 96       	adiw	r26, 0x06	; 6
 7d0:	8d 91       	ld	r24, X+
 7d2:	9c 91       	ld	r25, X
 7d4:	17 97       	sbiw	r26, 0x07	; 7
 7d6:	01 96       	adiw	r24, 0x01	; 1
 7d8:	17 96       	adiw	r26, 0x07	; 7
 7da:	9c 93       	st	X, r25
 7dc:	8e 93       	st	-X, r24
 7de:	16 97       	sbiw	r26, 0x06	; 6
 7e0:	ce 01       	movw	r24, r28
 7e2:	df 91       	pop	r29
 7e4:	cf 91       	pop	r28
 7e6:	1f 91       	pop	r17
 7e8:	0f 91       	pop	r16
 7ea:	08 95       	ret

000007ec <__ultoa_invert>:
 7ec:	fa 01       	movw	r30, r20
 7ee:	aa 27       	eor	r26, r26
 7f0:	28 30       	cpi	r18, 0x08	; 8
 7f2:	51 f1       	breq	.+84     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 7f4:	20 31       	cpi	r18, 0x10	; 16
 7f6:	81 f1       	breq	.+96     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 7f8:	e8 94       	clt
 7fa:	6f 93       	push	r22
 7fc:	6e 7f       	andi	r22, 0xFE	; 254
 7fe:	6e 5f       	subi	r22, 0xFE	; 254
 800:	7f 4f       	sbci	r23, 0xFF	; 255
 802:	8f 4f       	sbci	r24, 0xFF	; 255
 804:	9f 4f       	sbci	r25, 0xFF	; 255
 806:	af 4f       	sbci	r26, 0xFF	; 255
 808:	b1 e0       	ldi	r27, 0x01	; 1
 80a:	3e d0       	rcall	.+124    	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 80c:	b4 e0       	ldi	r27, 0x04	; 4
 80e:	3c d0       	rcall	.+120    	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 810:	67 0f       	add	r22, r23
 812:	78 1f       	adc	r23, r24
 814:	89 1f       	adc	r24, r25
 816:	9a 1f       	adc	r25, r26
 818:	a1 1d       	adc	r26, r1
 81a:	68 0f       	add	r22, r24
 81c:	79 1f       	adc	r23, r25
 81e:	8a 1f       	adc	r24, r26
 820:	91 1d       	adc	r25, r1
 822:	a1 1d       	adc	r26, r1
 824:	6a 0f       	add	r22, r26
 826:	71 1d       	adc	r23, r1
 828:	81 1d       	adc	r24, r1
 82a:	91 1d       	adc	r25, r1
 82c:	a1 1d       	adc	r26, r1
 82e:	20 d0       	rcall	.+64     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 830:	09 f4       	brne	.+2      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 832:	68 94       	set
 834:	3f 91       	pop	r19
 836:	2a e0       	ldi	r18, 0x0A	; 10
 838:	26 9f       	mul	r18, r22
 83a:	11 24       	eor	r1, r1
 83c:	30 19       	sub	r19, r0
 83e:	30 5d       	subi	r19, 0xD0	; 208
 840:	31 93       	st	Z+, r19
 842:	de f6       	brtc	.-74     	; 0x7fa <__ultoa_invert+0xe>
 844:	cf 01       	movw	r24, r30
 846:	08 95       	ret
 848:	46 2f       	mov	r20, r22
 84a:	47 70       	andi	r20, 0x07	; 7
 84c:	40 5d       	subi	r20, 0xD0	; 208
 84e:	41 93       	st	Z+, r20
 850:	b3 e0       	ldi	r27, 0x03	; 3
 852:	0f d0       	rcall	.+30     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 854:	c9 f7       	brne	.-14     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 856:	f6 cf       	rjmp	.-20     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 858:	46 2f       	mov	r20, r22
 85a:	4f 70       	andi	r20, 0x0F	; 15
 85c:	40 5d       	subi	r20, 0xD0	; 208
 85e:	4a 33       	cpi	r20, 0x3A	; 58
 860:	18 f0       	brcs	.+6      	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 862:	49 5d       	subi	r20, 0xD9	; 217
 864:	31 fd       	sbrc	r19, 1
 866:	40 52       	subi	r20, 0x20	; 32
 868:	41 93       	st	Z+, r20
 86a:	02 d0       	rcall	.+4      	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 86c:	a9 f7       	brne	.-22     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 86e:	ea cf       	rjmp	.-44     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 870:	b4 e0       	ldi	r27, 0x04	; 4
 872:	a6 95       	lsr	r26
 874:	97 95       	ror	r25
 876:	87 95       	ror	r24
 878:	77 95       	ror	r23
 87a:	67 95       	ror	r22
 87c:	ba 95       	dec	r27
 87e:	c9 f7       	brne	.-14     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 880:	00 97       	sbiw	r24, 0x00	; 0
 882:	61 05       	cpc	r22, r1
 884:	71 05       	cpc	r23, r1
 886:	08 95       	ret
 888:	9b 01       	movw	r18, r22
 88a:	ac 01       	movw	r20, r24
 88c:	0a 2e       	mov	r0, r26
 88e:	06 94       	lsr	r0
 890:	57 95       	ror	r21
 892:	47 95       	ror	r20
 894:	37 95       	ror	r19
 896:	27 95       	ror	r18
 898:	ba 95       	dec	r27
 89a:	c9 f7       	brne	.-14     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 89c:	62 0f       	add	r22, r18
 89e:	73 1f       	adc	r23, r19
 8a0:	84 1f       	adc	r24, r20
 8a2:	95 1f       	adc	r25, r21
 8a4:	a0 1d       	adc	r26, r0
 8a6:	08 95       	ret

000008a8 <__prologue_saves__>:
 8a8:	2f 92       	push	r2
 8aa:	3f 92       	push	r3
 8ac:	4f 92       	push	r4
 8ae:	5f 92       	push	r5
 8b0:	6f 92       	push	r6
 8b2:	7f 92       	push	r7
 8b4:	8f 92       	push	r8
 8b6:	9f 92       	push	r9
 8b8:	af 92       	push	r10
 8ba:	bf 92       	push	r11
 8bc:	cf 92       	push	r12
 8be:	df 92       	push	r13
 8c0:	ef 92       	push	r14
 8c2:	ff 92       	push	r15
 8c4:	0f 93       	push	r16
 8c6:	1f 93       	push	r17
 8c8:	cf 93       	push	r28
 8ca:	df 93       	push	r29
 8cc:	cd b7       	in	r28, 0x3d	; 61
 8ce:	de b7       	in	r29, 0x3e	; 62
 8d0:	ca 1b       	sub	r28, r26
 8d2:	db 0b       	sbc	r29, r27
 8d4:	0f b6       	in	r0, 0x3f	; 63
 8d6:	f8 94       	cli
 8d8:	de bf       	out	0x3e, r29	; 62
 8da:	0f be       	out	0x3f, r0	; 63
 8dc:	cd bf       	out	0x3d, r28	; 61
 8de:	09 94       	ijmp

000008e0 <__epilogue_restores__>:
 8e0:	2a 88       	ldd	r2, Y+18	; 0x12
 8e2:	39 88       	ldd	r3, Y+17	; 0x11
 8e4:	48 88       	ldd	r4, Y+16	; 0x10
 8e6:	5f 84       	ldd	r5, Y+15	; 0x0f
 8e8:	6e 84       	ldd	r6, Y+14	; 0x0e
 8ea:	7d 84       	ldd	r7, Y+13	; 0x0d
 8ec:	8c 84       	ldd	r8, Y+12	; 0x0c
 8ee:	9b 84       	ldd	r9, Y+11	; 0x0b
 8f0:	aa 84       	ldd	r10, Y+10	; 0x0a
 8f2:	b9 84       	ldd	r11, Y+9	; 0x09
 8f4:	c8 84       	ldd	r12, Y+8	; 0x08
 8f6:	df 80       	ldd	r13, Y+7	; 0x07
 8f8:	ee 80       	ldd	r14, Y+6	; 0x06
 8fa:	fd 80       	ldd	r15, Y+5	; 0x05
 8fc:	0c 81       	ldd	r16, Y+4	; 0x04
 8fe:	1b 81       	ldd	r17, Y+3	; 0x03
 900:	aa 81       	ldd	r26, Y+2	; 0x02
 902:	b9 81       	ldd	r27, Y+1	; 0x01
 904:	ce 0f       	add	r28, r30
 906:	d1 1d       	adc	r29, r1
 908:	0f b6       	in	r0, 0x3f	; 63
 90a:	f8 94       	cli
 90c:	de bf       	out	0x3e, r29	; 62
 90e:	0f be       	out	0x3f, r0	; 63
 910:	cd bf       	out	0x3d, r28	; 61
 912:	ed 01       	movw	r28, r26
 914:	08 95       	ret

00000916 <_exit>:
 916:	f8 94       	cli

00000918 <__stop_program>:
 918:	ff cf       	rjmp	.-2      	; 0x918 <__stop_program>
