
Ejemplo_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000488  0000051c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000488  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  0080012e  0080012e  0000054a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000054a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000119c  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b5a  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000079e  00000000  00000000  00002362  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00002b00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063d  00000000  00000000  00002c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a0  00000000  00000000  000032a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003845  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 3b 01 	jmp	0x276	; 0x276 <__vector_18>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 e8       	ldi	r30, 0x88	; 136
  c8:	f4 e0       	ldi	r31, 0x04	; 4
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ae 32       	cpi	r26, 0x2E	; 46
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ae e2       	ldi	r26, 0x2E	; 46
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a4 34       	cpi	r26, 0x44	; 68
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 b5 01 	call	0x36a	; 0x36a <main>
  ea:	0c 94 42 02 	jmp	0x484	; 0x484 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <I2C_AVR_Init>:


void I2C_AVR_Init(void){
	
	//EL PRESCALADOR
	TWSR0 &= ~(1<<TWPS0) &~(1<<TWPS1); // 1
  f2:	e9 eb       	ldi	r30, 0xB9	; 185
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	8c 7f       	andi	r24, 0xFC	; 252
  fa:	80 83       	st	Z, r24
	
	//EL BIT RATE
	TWBR0 = (uint8_t) Bit_Rate(); //100KHZ
  fc:	88 e4       	ldi	r24, 0x48	; 72
  fe:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 102:	08 95       	ret

00000104 <I2C_AVR_Start>:
}
uint8_t I2C_AVR_Start(void){
	uint8_t status;
	TWCR0 |= (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);//inicializamos la condicion dle bit start
 104:	ec eb       	ldi	r30, 0xBC	; 188
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	84 6a       	ori	r24, 0xA4	; 164
 10c:	80 83       	st	Z, r24
	while((TWCR0 & (1<<TWINT))==0);//esperamos q se envie el start
 10e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 112:	88 23       	and	r24, r24
 114:	e4 f7       	brge	.-8      	; 0x10e <I2C_AVR_Start+0xa>
	
	status = ( TWSR0 & MASCARA_STATUS);
 116:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 11a:	88 7f       	andi	r24, 0xF8	; 248
	if( (status == bit_Start) || (status == bit_ReStart)){
 11c:	88 30       	cpi	r24, 0x08	; 8
 11e:	21 f0       	breq	.+8      	; 0x128 <I2C_AVR_Start+0x24>
 120:	80 31       	cpi	r24, 0x10	; 16
 122:	19 f4       	brne	.+6      	; 0x12a <I2C_AVR_Start+0x26>
		
		return 1;// operacion exitosa
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	08 95       	ret
 128:	81 e0       	ldi	r24, 0x01	; 1
	}
	return status;
	
}
 12a:	08 95       	ret

0000012c <I2C_AVR_Address_Slave>:
uint8_t I2C_AVR_Address_Slave(uint8_t address, uint8_t modo){
	uint8_t status =0;
	
	TWDR0 = ((address & 0XFE) | (modo & 0X01)) ; //ENVIO ADDRESS
 12c:	8e 7f       	andi	r24, 0xFE	; 254
 12e:	61 70       	andi	r22, 0x01	; 1
 130:	68 2b       	or	r22, r24
 132:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	
	TWCR0 = (1<<TWEN)|(1<<TWINT);//INICA LA TRASMISION
 136:	84 e8       	ldi	r24, 0x84	; 132
 138:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	while((TWCR0 & (1<<TWINT))==0);//esperamos
 13c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 140:	88 23       	and	r24, r24
 142:	e4 f7       	brge	.-8      	; 0x13c <I2C_AVR_Address_Slave+0x10>
	
	status = ( TWSR0 & MASCARA_STATUS);
 144:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 148:	88 7f       	andi	r24, 0xF8	; 248
	
	if ((status == MT_SLA_ACK) || (status ==MR_SLA_ACK))
 14a:	88 31       	cpi	r24, 0x18	; 24
 14c:	21 f0       	breq	.+8      	; 0x156 <I2C_AVR_Address_Slave+0x2a>
 14e:	80 34       	cpi	r24, 0x40	; 64
 150:	19 f4       	brne	.+6      	; 0x158 <I2C_AVR_Address_Slave+0x2c>
	{
		return 1;//TRASMSIION EXITOSA
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	08 95       	ret
 156:	81 e0       	ldi	r24, 0x01	; 1
	}
	return status;
	
}
 158:	08 95       	ret

0000015a <I2C_AVR_Write_Data>:
uint8_t I2C_AVR_Write_Data(uint8_t data){
	uint8_t status =0;
	
	TWDR0 = data;//ESCRIBIMOS EL DATO A TX
 15a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR0 = (1<<TWEN)|(1<<TWINT);//INICIA LA TRASMISION	
 15e:	84 e8       	ldi	r24, 0x84	; 132
 160:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR0 & (1<<TWINT))==0);//esperamos
 164:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 168:	88 23       	and	r24, r24
 16a:	e4 f7       	brge	.-8      	; 0x164 <I2C_AVR_Write_Data+0xa>
	
	//se evalua el estado
	
	status = ( TWSR0 & MASCARA_STATUS);
 16c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 170:	88 7f       	andi	r24, 0xF8	; 248
	
	if (status == MT_DATA_ACK)
 172:	88 32       	cpi	r24, 0x28	; 40
 174:	09 f4       	brne	.+2      	; 0x178 <I2C_AVR_Write_Data+0x1e>
	{
		return 1;//TRASMSIION EXITOSA
 176:	81 e0       	ldi	r24, 0x01	; 1
	}
	return status;
}
 178:	08 95       	ret

0000017a <I2C_AVR_Read_Data>:
uint8_t I2C_AVR_Read_Data(uint8_t *ptr_dato,uint8_t ack_nack){
 17a:	dc 01       	movw	r26, r24
uint8_t status=0;

//ACK
if (ack_nack == I2C_ACK )
 17c:	61 11       	cpse	r22, r1
 17e:	13 c0       	rjmp	.+38     	; 0x1a6 <I2C_AVR_Read_Data+0x2c>
{
	TWCR0 |= (1<<TWINT) | (1<<TWEN) | (1<<TWEA);//GENERAMOS EL BIT DE RECOCIMIENTO
 180:	ec eb       	ldi	r30, 0xBC	; 188
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	90 81       	ld	r25, Z
 186:	94 6c       	ori	r25, 0xC4	; 196
 188:	90 83       	st	Z, r25
	while((TWCR0 & (1<<TWINT))==0);//esperamos
 18a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 18e:	99 23       	and	r25, r25
 190:	e4 f7       	brge	.-8      	; 0x18a <I2C_AVR_Read_Data+0x10>
	//Leer el status
	status = (TWSR0 & (MASCARA_STATUS));
 192:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 196:	98 7f       	andi	r25, 0xF8	; 248
	if (status == MR_DATA_ACK)
 198:	90 35       	cpi	r25, 0x50	; 80
 19a:	31 f4       	brne	.+12     	; 0x1a8 <I2C_AVR_Read_Data+0x2e>
	{
		*ptr_dato = TWDR0;//leo el dato
 19c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1a0:	8c 93       	st	X, r24
		
		return 1;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	08 95       	ret
		return 1;//TRASMSIION EXITOSA
	}
	return status;
}
uint8_t I2C_AVR_Read_Data(uint8_t *ptr_dato,uint8_t ack_nack){
uint8_t status=0;
 1a6:	90 e0       	ldi	r25, 0x00	; 0
	}
	
}

//NACK
if (ack_nack == I2C_NACK)
 1a8:	61 30       	cpi	r22, 0x01	; 1
 1aa:	b1 f4       	brne	.+44     	; 0x1d8 <I2C_AVR_Read_Data+0x5e>
{
	
	TWCR0 |= (1<<TWINT) | (1<<TWEN);
 1ac:	ec eb       	ldi	r30, 0xBC	; 188
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	84 68       	ori	r24, 0x84	; 132
 1b4:	80 83       	st	Z, r24
	TWCR0 &= ~(1<<TWEA);			//GENERAMOS EL BIT DE nack
 1b6:	90 81       	ld	r25, Z
 1b8:	9f 7b       	andi	r25, 0xBF	; 191
 1ba:	90 83       	st	Z, r25
	while((TWCR0 & (1<<TWINT))==0);//esperamos
 1bc:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1c0:	99 23       	and	r25, r25
 1c2:	e4 f7       	brge	.-8      	; 0x1bc <I2C_AVR_Read_Data+0x42>
	
	//Leer el status
	status = (TWSR0 & (MASCARA_STATUS));
 1c4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1c8:	98 7f       	andi	r25, 0xF8	; 248
	if (status == MR_DATA_NACK)
 1ca:	98 35       	cpi	r25, 0x58	; 88
 1cc:	39 f4       	brne	.+14     	; 0x1dc <I2C_AVR_Read_Data+0x62>
	{
		*ptr_dato = TWDR0;//leo el dato
 1ce:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1d2:	8c 93       	st	X, r24
		
		return 2;
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	08 95       	ret
 1d8:	89 2f       	mov	r24, r25
 1da:	08 95       	ret
	TWCR0 |= (1<<TWINT) | (1<<TWEN);
	TWCR0 &= ~(1<<TWEA);			//GENERAMOS EL BIT DE nack
	while((TWCR0 & (1<<TWINT))==0);//esperamos
	
	//Leer el status
	status = (TWSR0 & (MASCARA_STATUS));
 1dc:	89 2f       	mov	r24, r25
		
		return 2;
	}
}
return status;
}
 1de:	08 95       	ret

000001e0 <I2C_AVR_Stop>:
void I2C_AVR_Stop(void){
	TWCR0 |= (1<<TWEN)|(1<<TWSTO)|(1<<TWINT);
 1e0:	ec eb       	ldi	r30, 0xBC	; 188
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	84 69       	ori	r24, 0x94	; 148
 1e8:	80 83       	st	Z, r24
	while((TWCR0 & (1<<TWSTO))==1);//esperamos hasta q se complete el stop
 1ea:	80 81       	ld	r24, Z
 1ec:	08 95       	ret

000001ee <UART0_Avr_Init>:
#include <avr/interrupt.h>
#include <string.h>
#include <stdbool.h>


void UART0_Avr_Init(uint32_t BaudRate){
 1ee:	9b 01       	movw	r18, r22
 1f0:	ac 01       	movw	r20, r24
	//configuramos los Baudios
	UBRR0 = (uint16_t) ((F_CPU/8UL/BaudRate) -1UL);
 1f2:	60 e8       	ldi	r22, 0x80	; 128
 1f4:	74 e8       	ldi	r23, 0x84	; 132
 1f6:	8e e1       	ldi	r24, 0x1E	; 30
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 20 02 	call	0x440	; 0x440 <__udivmodsi4>
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	31 09       	sbc	r19, r1
 202:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 206:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	//Configuramos UART0 doble speed
	UCSR0A |= (1<<U2X0);
 20a:	e0 ec       	ldi	r30, 0xC0	; 192
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	82 60       	ori	r24, 0x02	; 2
 212:	80 83       	st	Z, r24
	
	//configuramos el tipo de dato a enviar
	UCSR0B &= ~(1<<UCSZ02);
 214:	e1 ec       	ldi	r30, 0xC1	; 193
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	8b 7f       	andi	r24, 0xFB	; 251
 21c:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ00)|(1<<UCSZ01);
 21e:	a2 ec       	ldi	r26, 0xC2	; 194
 220:	b0 e0       	ldi	r27, 0x00	; 0
 222:	8c 91       	ld	r24, X
 224:	86 60       	ori	r24, 0x06	; 6
 226:	8c 93       	st	X, r24
	
	//Configuramos al modo Asincrono
	UCSR0C &= ~(1<<UMSEL00) & ~(1<<UMSEL01);
 228:	8c 91       	ld	r24, X
 22a:	8f 73       	andi	r24, 0x3F	; 63
 22c:	8c 93       	st	X, r24
	
	//Configuramos la paridad
	UCSR0C &= ~(1<<UPM00) & ~(1<<UPM01);
 22e:	8c 91       	ld	r24, X
 230:	8f 7c       	andi	r24, 0xCF	; 207
 232:	8c 93       	st	X, r24
	
	//Configurar el bit de Stop
	UCSR0C &= ~(1<<USBS0);
 234:	8c 91       	ld	r24, X
 236:	87 7f       	andi	r24, 0xF7	; 247
 238:	8c 93       	st	X, r24
	
	//Habilitamos la TX 
	UCSR0B |= (1<<TXEN0);
 23a:	80 81       	ld	r24, Z
 23c:	88 60       	ori	r24, 0x08	; 8
 23e:	80 83       	st	Z, r24
	
	//Habilitamos RX
	UCSR0B |= (1<<RXEN0);
 240:	80 81       	ld	r24, Z
 242:	80 61       	ori	r24, 0x10	; 16
 244:	80 83       	st	Z, r24
	
	//habilitamos las interrupciones por RX
	UCSR0B |= (1<<RXCIE0);
 246:	80 81       	ld	r24, Z
 248:	80 68       	ori	r24, 0x80	; 128
 24a:	80 83       	st	Z, r24
 24c:	08 95       	ret

0000024e <UART0_Avr_Print_Char>:
	
}
void UART0_Avr_Print_Char(char C){
	
	while((UCSR0A & (1<<UDRE0))==0);
 24e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 252:	95 ff       	sbrs	r25, 5
 254:	fc cf       	rjmp	.-8      	; 0x24e <UART0_Avr_Print_Char>
	UDR0 = C;
 256:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 25a:	08 95       	ret

0000025c <UART0_Avr_Print_String>:
	
}
void UART0_Avr_Print_String(char *C){
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	ec 01       	movw	r28, r24
	
	char *ptr;
	ptr=C;
	
	while(*ptr)
 262:	03 c0       	rjmp	.+6      	; 0x26a <UART0_Avr_Print_String+0xe>
	UART0_Avr_Print_Char(*ptr++);
 264:	21 96       	adiw	r28, 0x01	; 1
 266:	0e 94 27 01 	call	0x24e	; 0x24e <UART0_Avr_Print_Char>
void UART0_Avr_Print_String(char *C){
	
	char *ptr;
	ptr=C;
	
	while(*ptr)
 26a:	88 81       	ld	r24, Y
 26c:	81 11       	cpse	r24, r1
 26e:	fa cf       	rjmp	.-12     	; 0x264 <UART0_Avr_Print_String+0x8>
	UART0_Avr_Print_Char(*ptr++);
	
}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <__vector_18>:
//extern volatile bool a;

ISR(USART0_RX_vect){
 276:	1f 92       	push	r1
 278:	0f 92       	push	r0
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	0f 92       	push	r0
 27e:	11 24       	eor	r1, r1
 280:	8f 93       	push	r24
	
char byte = UDR0;
 282:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

switch(byte){
 286:	82 36       	cpi	r24, 0x62	; 98
 288:	69 f0       	breq	.+26     	; 0x2a4 <__vector_18+0x2e>
 28a:	18 f4       	brcc	.+6      	; 0x292 <__vector_18+0x1c>
 28c:	81 36       	cpi	r24, 0x61	; 97
 28e:	31 f0       	breq	.+12     	; 0x29c <__vector_18+0x26>
 290:	14 c0       	rjmp	.+40     	; 0x2ba <__vector_18+0x44>
 292:	83 36       	cpi	r24, 0x63	; 99
 294:	59 f0       	breq	.+22     	; 0x2ac <__vector_18+0x36>
 296:	84 36       	cpi	r24, 0x64	; 100
 298:	69 f0       	breq	.+26     	; 0x2b4 <__vector_18+0x3e>
 29a:	0f c0       	rjmp	.+30     	; 0x2ba <__vector_18+0x44>
	case 'a':
	PORTD |= (1<<7);
 29c:	8b b1       	in	r24, 0x0b	; 11
 29e:	80 68       	ori	r24, 0x80	; 128
 2a0:	8b b9       	out	0x0b, r24	; 11
	break;
 2a2:	0b c0       	rjmp	.+22     	; 0x2ba <__vector_18+0x44>
	case 'b':
	PORTD &= ~(1<<7);
 2a4:	8b b1       	in	r24, 0x0b	; 11
 2a6:	8f 77       	andi	r24, 0x7F	; 127
 2a8:	8b b9       	out	0x0b, r24	; 11
	break;
 2aa:	07 c0       	rjmp	.+14     	; 0x2ba <__vector_18+0x44>
	case 'c':
	PORTD |= (1<<6);
 2ac:	8b b1       	in	r24, 0x0b	; 11
 2ae:	80 64       	ori	r24, 0x40	; 64
 2b0:	8b b9       	out	0x0b, r24	; 11
	break;
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <__vector_18+0x44>
	case 'd':
	PORTD &= ~(1<<6);
 2b4:	8b b1       	in	r24, 0x0b	; 11
 2b6:	8f 7b       	andi	r24, 0xBF	; 191
 2b8:	8b b9       	out	0x0b, r24	; 11
	case 'E':
			//a=true;
	break;
	}
	
}
 2ba:	8f 91       	pop	r24
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <Write_EEPROM_I2C>:
		
		
    }
}

void Write_EEPROM_I2C(char *ptr_Str,uint16_t ADD_EEP){
 2c6:	1f 93       	push	r17
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	ec 01       	movw	r28, r24
 2ce:	16 2f       	mov	r17, r22
 2d0:	87 2f       	mov	r24, r23

I2C_AVR_Write_Data((uint8_t) (ADD_EEP>>8)); //high byte
 2d2:	0e 94 ad 00 	call	0x15a	; 0x15a <I2C_AVR_Write_Data>
I2C_AVR_Write_Data((uint8_t) (ADD_EEP)) ;//low byte}
 2d6:	81 2f       	mov	r24, r17
 2d8:	0e 94 ad 00 	call	0x15a	; 0x15a <I2C_AVR_Write_Data>
while(*ptr_Str)
 2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <Write_EEPROM_I2C+0x1e>
	I2C_AVR_Write_Data(*ptr_Str++);
 2de:	21 96       	adiw	r28, 0x01	; 1
 2e0:	0e 94 ad 00 	call	0x15a	; 0x15a <I2C_AVR_Write_Data>

void Write_EEPROM_I2C(char *ptr_Str,uint16_t ADD_EEP){

I2C_AVR_Write_Data((uint8_t) (ADD_EEP>>8)); //high byte
I2C_AVR_Write_Data((uint8_t) (ADD_EEP)) ;//low byte}
while(*ptr_Str)
 2e4:	88 81       	ld	r24, Y
 2e6:	81 11       	cpse	r24, r1
 2e8:	fa cf       	rjmp	.-12     	; 0x2de <Write_EEPROM_I2C+0x18>
	I2C_AVR_Write_Data(*ptr_Str++);
}
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	1f 91       	pop	r17
 2f0:	08 95       	ret

000002f2 <Read_EEPROM_I2C>:

void Read_EEPROM_I2C(char *ptr_Str,uint16_t Nbytes, uint16_t ADD_EEP ,uint8_t i2c_Address){
 2f2:	cf 92       	push	r12
 2f4:	df 92       	push	r13
 2f6:	ef 92       	push	r14
 2f8:	ff 92       	push	r15
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	1f 92       	push	r1
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
 308:	7c 01       	movw	r14, r24
 30a:	8b 01       	movw	r16, r22
 30c:	c4 2e       	mov	r12, r20
 30e:	85 2f       	mov	r24, r21
 310:	d2 2e       	mov	r13, r18
	
	uint8_t dato_leido;
	I2C_AVR_Write_Data((uint8_t) (ADD_EEP>>8)); //high byte
 312:	0e 94 ad 00 	call	0x15a	; 0x15a <I2C_AVR_Write_Data>
    I2C_AVR_Write_Data((uint8_t) (ADD_EEP)) ;//low byte}
 316:	8c 2d       	mov	r24, r12
 318:	0e 94 ad 00 	call	0x15a	; 0x15a <I2C_AVR_Write_Data>
	I2C_AVR_Start();//start repetido
 31c:	0e 94 82 00 	call	0x104	; 0x104 <I2C_AVR_Start>
	I2C_AVR_Address_Slave(i2c_Address,I2C_READ);
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	8d 2d       	mov	r24, r13
 324:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_AVR_Address_Slave>
	
	while(Nbytes>1){
 328:	0b c0       	rjmp	.+22     	; 0x340 <Read_EEPROM_I2C+0x4e>
	
	I2C_AVR_Read_Data(&dato_leido,I2C_ACK);
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	ce 01       	movw	r24, r28
 32e:	01 96       	adiw	r24, 0x01	; 1
 330:	0e 94 bd 00 	call	0x17a	; 0x17a <I2C_AVR_Read_Data>
	*ptr_Str = dato_leido;
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	f7 01       	movw	r30, r14
 338:	81 93       	st	Z+, r24
 33a:	7f 01       	movw	r14, r30
	 ptr_Str++;
	 Nbytes--;
 33c:	01 50       	subi	r16, 0x01	; 1
 33e:	11 09       	sbc	r17, r1
	I2C_AVR_Write_Data((uint8_t) (ADD_EEP>>8)); //high byte
    I2C_AVR_Write_Data((uint8_t) (ADD_EEP)) ;//low byte}
	I2C_AVR_Start();//start repetido
	I2C_AVR_Address_Slave(i2c_Address,I2C_READ);
	
	while(Nbytes>1){
 340:	02 30       	cpi	r16, 0x02	; 2
 342:	11 05       	cpc	r17, r1
 344:	90 f7       	brcc	.-28     	; 0x32a <Read_EEPROM_I2C+0x38>
	*ptr_Str = dato_leido;
	 ptr_Str++;
	 Nbytes--;
	}
	//leemo el ultimo byte
	I2C_AVR_Read_Data(&dato_leido,I2C_NACK);
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	ce 01       	movw	r24, r28
 34a:	01 96       	adiw	r24, 0x01	; 1
 34c:	0e 94 bd 00 	call	0x17a	; 0x17a <I2C_AVR_Read_Data>
	*ptr_Str = dato_leido;
 350:	89 81       	ldd	r24, Y+1	; 0x01
 352:	f7 01       	movw	r30, r14
 354:	80 83       	st	Z, r24
	
}
 356:	0f 90       	pop	r0
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	1f 91       	pop	r17
 35e:	0f 91       	pop	r16
 360:	ff 90       	pop	r15
 362:	ef 90       	pop	r14
 364:	df 90       	pop	r13
 366:	cf 90       	pop	r12
 368:	08 95       	ret

0000036a <main>:
void Write_EEPROM_I2C(char *ptr_Str,uint16_t ADD_EEP);
void Read_EEPROM_I2C(char *ptr_Str,uint16_t Nbytes, uint16_t ADD_EEP,uint8_t i2c_Address);

int main(void)
{
    I2C_AVR_Init();
 36a:	0e 94 79 00 	call	0xf2	; 0xf2 <I2C_AVR_Init>
	UART0_Avr_Init(9600);
 36e:	60 e8       	ldi	r22, 0x80	; 128
 370:	75 e2       	ldi	r23, 0x25	; 37
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 f7 00 	call	0x1ee	; 0x1ee <UART0_Avr_Init>
    UART0_Avr_Print_String("eeprom\n\r");
 37a:	85 e2       	ldi	r24, 0x25	; 37
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	0e 94 2e 01 	call	0x25c	; 0x25c <UART0_Avr_Print_String>
	I2C_AVR_Start();
 382:	0e 94 82 00 	call	0x104	; 0x104 <I2C_AVR_Start>
	I2C_AVR_Address_Slave(EEPROM2,I2C_WRITE);
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	80 ea       	ldi	r24, 0xA0	; 160
 38a:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_AVR_Address_Slave>
	Write_EEPROM_I2C(Str_1,0x0028);	
 38e:	68 e2       	ldi	r22, 0x28	; 40
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	88 e1       	ldi	r24, 0x18	; 24
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	0e 94 63 01 	call	0x2c6	; 0x2c6 <Write_EEPROM_I2C>
	I2C_AVR_Stop();
 39a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <I2C_AVR_Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39e:	8f e1       	ldi	r24, 0x1F	; 31
 3a0:	9e e4       	ldi	r25, 0x4E	; 78
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <main+0x38>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <main+0x3e>
 3a8:	00 00       	nop
	_delay_ms(5);
	
	I2C_AVR_Start();
 3aa:	0e 94 82 00 	call	0x104	; 0x104 <I2C_AVR_Start>
	I2C_AVR_Address_Slave(EEPROM4,I2C_WRITE);
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	82 ea       	ldi	r24, 0xA2	; 162
 3b2:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_AVR_Address_Slave>
	Write_EEPROM_I2C(Str_2,0x0100);
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	71 e0       	ldi	r23, 0x01	; 1
 3ba:	8a e0       	ldi	r24, 0x0A	; 10
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	0e 94 63 01 	call	0x2c6	; 0x2c6 <Write_EEPROM_I2C>
	I2C_AVR_Stop();		
 3c2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <I2C_AVR_Stop>
 3c6:	8f e1       	ldi	r24, 0x1F	; 31
 3c8:	9e e4       	ldi	r25, 0x4E	; 78
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <main+0x60>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <main+0x66>
 3d0:	00 00       	nop
	_delay_ms(5);
			
	I2C_AVR_Start();
 3d2:	0e 94 82 00 	call	0x104	; 0x104 <I2C_AVR_Start>
	I2C_AVR_Address_Slave(EEPROM5,I2C_WRITE);
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	86 ea       	ldi	r24, 0xA6	; 166
 3da:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_AVR_Address_Slave>
	Write_EEPROM_I2C(Str_3,0x50);
 3de:	60 e5       	ldi	r22, 0x50	; 80
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <Write_EEPROM_I2C>
	I2C_AVR_Stop();
 3ea:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <I2C_AVR_Stop>
 3ee:	8f e1       	ldi	r24, 0x1F	; 31
 3f0:	9e e4       	ldi	r25, 0x4E	; 78
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <main+0x88>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <main+0x8e>
 3f8:	00 00       	nop
    _delay_ms(5);
    
	//LECTURA
	  
	 I2C_AVR_Start();
 3fa:	0e 94 82 00 	call	0x104	; 0x104 <I2C_AVR_Start>
	 I2C_AVR_Address_Slave(EEPROM4,I2C_WRITE);
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	82 ea       	ldi	r24, 0xA2	; 162
 402:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_AVR_Address_Slave>
	 Read_EEPROM_I2C(Read_String,strlen(Str_2),0x0100,EEPROM4);
 406:	ea e0       	ldi	r30, 0x0A	; 10
 408:	f1 e0       	ldi	r31, 0x01	; 1
 40a:	01 90       	ld	r0, Z+
 40c:	00 20       	and	r0, r0
 40e:	e9 f7       	brne	.-6      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 410:	31 97       	sbiw	r30, 0x01	; 1
 412:	bf 01       	movw	r22, r30
 414:	6a 50       	subi	r22, 0x0A	; 10
 416:	71 40       	sbci	r23, 0x01	; 1
 418:	22 ea       	ldi	r18, 0xA2	; 162
 41a:	40 e0       	ldi	r20, 0x00	; 0
 41c:	51 e0       	ldi	r21, 0x01	; 1
 41e:	80 e3       	ldi	r24, 0x30	; 48
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	0e 94 79 01 	call	0x2f2	; 0x2f2 <Read_EEPROM_I2C>
	 I2C_AVR_Stop();
 426:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <I2C_AVR_Stop>
 42a:	8f e1       	ldi	r24, 0x1F	; 31
 42c:	9e e4       	ldi	r25, 0x4E	; 78
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 432:	00 c0       	rjmp	.+0      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 434:	00 00       	nop
	 
	 _delay_ms(5);
	 UART0_Avr_Print_String(Read_String);
 436:	80 e3       	ldi	r24, 0x30	; 48
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	0e 94 2e 01 	call	0x25c	; 0x25c <UART0_Avr_Print_String>
 43e:	ff cf       	rjmp	.-2      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>

00000440 <__udivmodsi4>:
 440:	a1 e2       	ldi	r26, 0x21	; 33
 442:	1a 2e       	mov	r1, r26
 444:	aa 1b       	sub	r26, r26
 446:	bb 1b       	sub	r27, r27
 448:	fd 01       	movw	r30, r26
 44a:	0d c0       	rjmp	.+26     	; 0x466 <__udivmodsi4_ep>

0000044c <__udivmodsi4_loop>:
 44c:	aa 1f       	adc	r26, r26
 44e:	bb 1f       	adc	r27, r27
 450:	ee 1f       	adc	r30, r30
 452:	ff 1f       	adc	r31, r31
 454:	a2 17       	cp	r26, r18
 456:	b3 07       	cpc	r27, r19
 458:	e4 07       	cpc	r30, r20
 45a:	f5 07       	cpc	r31, r21
 45c:	20 f0       	brcs	.+8      	; 0x466 <__udivmodsi4_ep>
 45e:	a2 1b       	sub	r26, r18
 460:	b3 0b       	sbc	r27, r19
 462:	e4 0b       	sbc	r30, r20
 464:	f5 0b       	sbc	r31, r21

00000466 <__udivmodsi4_ep>:
 466:	66 1f       	adc	r22, r22
 468:	77 1f       	adc	r23, r23
 46a:	88 1f       	adc	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	1a 94       	dec	r1
 470:	69 f7       	brne	.-38     	; 0x44c <__udivmodsi4_loop>
 472:	60 95       	com	r22
 474:	70 95       	com	r23
 476:	80 95       	com	r24
 478:	90 95       	com	r25
 47a:	9b 01       	movw	r18, r22
 47c:	ac 01       	movw	r20, r24
 47e:	bd 01       	movw	r22, r26
 480:	cf 01       	movw	r24, r30
 482:	08 95       	ret

00000484 <_exit>:
 484:	f8 94       	cli

00000486 <__stop_program>:
 486:	ff cf       	rjmp	.-2      	; 0x486 <__stop_program>
