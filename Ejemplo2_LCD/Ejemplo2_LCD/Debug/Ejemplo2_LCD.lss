
Ejemplo2_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00000288  000002fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000288  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b9a  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000789  00000000  00000000  00000fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ae  00000000  00000000  0000172f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001be0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042d  00000000  00000000  00001c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000330  00000000  00000000  000020c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000023f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e8       	ldi	r30, 0x88	; 136
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 33       	cpi	r26, 0x38	; 56
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 1f 01 	call	0x23e	; 0x23e <main>
  8e:	0c 94 42 01 	jmp	0x284	; 0x284 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCD_AVR_Data_Bus>:
	_delay_ms(2);
	E_OFF;
}
void LCD_AVR_Data_Bus(uint8_t a){
	// 0001
	if (a & 0x01){D4_ON;}
  96:	80 ff       	sbrs	r24, 0
  98:	04 c0       	rjmp	.+8      	; 0xa2 <LCD_AVR_Data_Bus+0xc>
  9a:	95 b1       	in	r25, 0x05	; 5
  9c:	94 60       	ori	r25, 0x04	; 4
  9e:	95 b9       	out	0x05, r25	; 5
  a0:	03 c0       	rjmp	.+6      	; 0xa8 <LCD_AVR_Data_Bus+0x12>
	else{D4_OFF;}
  a2:	95 b1       	in	r25, 0x05	; 5
  a4:	9b 7f       	andi	r25, 0xFB	; 251
  a6:	95 b9       	out	0x05, r25	; 5
	// 0010
	if (a & 0x02){D5_ON;}
  a8:	81 ff       	sbrs	r24, 1
  aa:	04 c0       	rjmp	.+8      	; 0xb4 <LCD_AVR_Data_Bus+0x1e>
  ac:	95 b1       	in	r25, 0x05	; 5
  ae:	98 60       	ori	r25, 0x08	; 8
  b0:	95 b9       	out	0x05, r25	; 5
  b2:	03 c0       	rjmp	.+6      	; 0xba <LCD_AVR_Data_Bus+0x24>
	else{D5_OFF;}
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	97 7f       	andi	r25, 0xF7	; 247
  b8:	95 b9       	out	0x05, r25	; 5
	// 0100
	if (a & 0x04){D6_ON;}
  ba:	82 ff       	sbrs	r24, 2
  bc:	04 c0       	rjmp	.+8      	; 0xc6 <LCD_AVR_Data_Bus+0x30>
  be:	95 b1       	in	r25, 0x05	; 5
  c0:	90 61       	ori	r25, 0x10	; 16
  c2:	95 b9       	out	0x05, r25	; 5
  c4:	03 c0       	rjmp	.+6      	; 0xcc <LCD_AVR_Data_Bus+0x36>
	else{D6_OFF;}
  c6:	95 b1       	in	r25, 0x05	; 5
  c8:	9f 7e       	andi	r25, 0xEF	; 239
  ca:	95 b9       	out	0x05, r25	; 5
	// 1000
	if (a & 0x08){D7_ON;}
  cc:	83 ff       	sbrs	r24, 3
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <LCD_AVR_Data_Bus+0x42>
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	80 62       	ori	r24, 0x20	; 32
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	08 95       	ret
	else{D7_OFF;}
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	8f 7d       	andi	r24, 0xDF	; 223
  dc:	85 b9       	out	0x05, r24	; 5
  de:	08 95       	ret

000000e0 <LCD_AVR_Cmd>:
#include "LCD_avr.h"
#define  F_CPU 8000000UL
#include <util/delay.h>

void LCD_AVR_Cmd(uint8_t a){
	E_OFF;
  e0:	95 b1       	in	r25, 0x05	; 5
  e2:	9e 7f       	andi	r25, 0xFE	; 254
  e4:	95 b9       	out	0x05, r25	; 5
	E_ON;
  e6:	95 b1       	in	r25, 0x05	; 5
  e8:	91 60       	ori	r25, 0x01	; 1
  ea:	95 b9       	out	0x05, r25	; 5
	LCD_AVR_Data_Bus(a)	;
  ec:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_AVR_Data_Bus>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	8f e9       	ldi	r24, 0x9F	; 159
  f2:	9f e0       	ldi	r25, 0x0F	; 15
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_AVR_Cmd+0x14>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_AVR_Cmd+0x1a>
  fa:	00 00       	nop
	_delay_ms(2);
	E_OFF;
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	8e 7f       	andi	r24, 0xFE	; 254
 100:	85 b9       	out	0x05, r24	; 5
 102:	08 95       	ret

00000104 <LCD_AVR_Init>:
	if (a & 0x08){D7_ON;}
	else{D7_OFF;}
}
void LCD_AVR_Init(void){
	
	DDRB |= (1<<0) |(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5);
 104:	84 b1       	in	r24, 0x04	; 4
 106:	8f 63       	ori	r24, 0x3F	; 63
 108:	84 b9       	out	0x04, r24	; 4
	
	LCD_AVR_Cmd(0X03);
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X03);
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X03);
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X02);
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X02);
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X08);
 128:	88 e0       	ldi	r24, 0x08	; 8
 12a:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X00);
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X08);
 134:	88 e0       	ldi	r24, 0x08	; 8
 136:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X00);
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X01);
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X00);
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X0D);
 14c:	8d e0       	ldi	r24, 0x0D	; 13
 14e:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
 152:	08 95       	ret

00000154 <LCD_AVR_Set_Cursor>:
	
}
void LCD_AVR_Set_Cursor(uint8_t x,Ubicacion y){
 154:	cf 93       	push	r28
uint8_t m,n;

RS_OFF;
 156:	95 b1       	in	r25, 0x05	; 5
 158:	9d 7f       	andi	r25, 0xFD	; 253
 15a:	95 b9       	out	0x05, r25	; 5
switch (y)
 15c:	61 30       	cpi	r22, 0x01	; 1
 15e:	c9 f0       	breq	.+50     	; 0x192 <LCD_AVR_Set_Cursor+0x3e>
 160:	28 f0       	brcs	.+10     	; 0x16c <LCD_AVR_Set_Cursor+0x18>
 162:	62 30       	cpi	r22, 0x02	; 2
 164:	49 f1       	breq	.+82     	; 0x1b8 <LCD_AVR_Set_Cursor+0x64>
 166:	63 30       	cpi	r22, 0x03	; 3
 168:	d1 f1       	breq	.+116    	; 0x1de <LCD_AVR_Set_Cursor+0x8a>
 16a:	4b c0       	rjmp	.+150    	; 0x202 <LCD_AVR_Set_Cursor+0xae>
{
	case Fila1:
			m=0x80+x;
 16c:	c0 e8       	ldi	r28, 0x80	; 128
 16e:	c8 0f       	add	r28, r24
			n=(0x80+x)>>4;
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	80 58       	subi	r24, 0x80	; 128
 174:	9f 4f       	sbci	r25, 0xFF	; 255
 176:	95 95       	asr	r25
 178:	87 95       	ror	r24
 17a:	95 95       	asr	r25
 17c:	87 95       	ror	r24
 17e:	95 95       	asr	r25
 180:	87 95       	ror	r24
 182:	95 95       	asr	r25
 184:	87 95       	ror	r24
			LCD_AVR_Cmd(n);
 186:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
			LCD_AVR_Cmd(m);
 18a:	8c 2f       	mov	r24, r28
 18c:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	break;
 190:	38 c0       	rjmp	.+112    	; 0x202 <LCD_AVR_Set_Cursor+0xae>
	case Fila2:
			m=0xC0+x;
 192:	c0 ec       	ldi	r28, 0xC0	; 192
 194:	c8 0f       	add	r28, r24
			n=(0XC0+x)>>4;
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	80 54       	subi	r24, 0x40	; 64
 19a:	9f 4f       	sbci	r25, 0xFF	; 255
 19c:	95 95       	asr	r25
 19e:	87 95       	ror	r24
 1a0:	95 95       	asr	r25
 1a2:	87 95       	ror	r24
 1a4:	95 95       	asr	r25
 1a6:	87 95       	ror	r24
 1a8:	95 95       	asr	r25
 1aa:	87 95       	ror	r24
			LCD_AVR_Cmd(n);
 1ac:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
			LCD_AVR_Cmd(m);
 1b0:	8c 2f       	mov	r24, r28
 1b2:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	break;
 1b6:	25 c0       	rjmp	.+74     	; 0x202 <LCD_AVR_Set_Cursor+0xae>
	case Fila3:
			m=0x94+x;
 1b8:	c4 e9       	ldi	r28, 0x94	; 148
 1ba:	c8 0f       	add	r28, r24
			n=(0x94+x)>>4;
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	8c 56       	subi	r24, 0x6C	; 108
 1c0:	9f 4f       	sbci	r25, 0xFF	; 255
 1c2:	95 95       	asr	r25
 1c4:	87 95       	ror	r24
 1c6:	95 95       	asr	r25
 1c8:	87 95       	ror	r24
 1ca:	95 95       	asr	r25
 1cc:	87 95       	ror	r24
 1ce:	95 95       	asr	r25
 1d0:	87 95       	ror	r24
			LCD_AVR_Cmd(n);
 1d2:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
			LCD_AVR_Cmd(m);
 1d6:	8c 2f       	mov	r24, r28
 1d8:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	break;
 1dc:	12 c0       	rjmp	.+36     	; 0x202 <LCD_AVR_Set_Cursor+0xae>
	case Fila4:
			m=0xD4+x;
 1de:	c4 ed       	ldi	r28, 0xD4	; 212
 1e0:	c8 0f       	add	r28, r24
			n=(0xD4+x)>>4;
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	8c 52       	subi	r24, 0x2C	; 44
 1e6:	9f 4f       	sbci	r25, 0xFF	; 255
 1e8:	95 95       	asr	r25
 1ea:	87 95       	ror	r24
 1ec:	95 95       	asr	r25
 1ee:	87 95       	ror	r24
 1f0:	95 95       	asr	r25
 1f2:	87 95       	ror	r24
 1f4:	95 95       	asr	r25
 1f6:	87 95       	ror	r24
			LCD_AVR_Cmd(n);
 1f8:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
			LCD_AVR_Cmd(m);
 1fc:	8c 2f       	mov	r24, r28
 1fe:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	break;
}
	
}
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <LCD_AVR_Print_Char>:
void LCD_AVR_Print_Char(char c){
 206:	cf 93       	push	r28
 208:	c8 2f       	mov	r28, r24
		uint8_t m,n;
		m=c>>4;
		n=c;
		RS_ON;
 20a:	85 b1       	in	r24, 0x05	; 5
 20c:	82 60       	ori	r24, 0x02	; 2
 20e:	85 b9       	out	0x05, r24	; 5
		LCD_AVR_Cmd(m);
 210:	8c 2f       	mov	r24, r28
 212:	82 95       	swap	r24
 214:	8f 70       	andi	r24, 0x0F	; 15
 216:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		LCD_AVR_Cmd(n);
 21a:	8c 2f       	mov	r24, r28
 21c:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
}
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <LCD_AVR_Print_String>:
void LCD_AVR_Print_String(char *c){
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	ec 01       	movw	r28, r24
	
	char *ptr;
	ptr = c;
	while(*ptr)
 22a:	03 c0       	rjmp	.+6      	; 0x232 <LCD_AVR_Print_String+0xe>
			LCD_AVR_Print_Char(*ptr++);
 22c:	21 96       	adiw	r28, 0x01	; 1
 22e:	0e 94 03 01 	call	0x206	; 0x206 <LCD_AVR_Print_Char>
}
void LCD_AVR_Print_String(char *c){
	
	char *ptr;
	ptr = c;
	while(*ptr)
 232:	88 81       	ld	r24, Y
 234:	81 11       	cpse	r24, r1
 236:	fa cf       	rjmp	.-12     	; 0x22c <LCD_AVR_Print_String+0x8>
			LCD_AVR_Print_Char(*ptr++);
	
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <main>:
#include <util/delay.h>
#include "LCD_avr.h"

int main(void)
{
   LCD_AVR_Init();
 23e:	0e 94 82 00 	call	0x104	; 0x104 <LCD_AVR_Init>
   //LCD_AVR_Print_Char('L');
   //LCD_AVR_Set_Cursor(0,Fila4);
   //LCD_AVR_Print_Char('A');
   
   
      LCD_AVR_Set_Cursor(0,Fila1);
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_AVR_Set_Cursor>
      LCD_AVR_Print_String("Bienvidos al Curso");
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	0e 94 12 01 	call	0x224	; 0x224 <LCD_AVR_Print_String>
      LCD_AVR_Set_Cursor(0,Fila2);
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_AVR_Set_Cursor>
      LCD_AVR_Print_String("de AVR en C");
 25a:	83 e1       	ldi	r24, 0x13	; 19
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	0e 94 12 01 	call	0x224	; 0x224 <LCD_AVR_Print_String>
      LCD_AVR_Set_Cursor(0,Fila3);
 262:	62 e0       	ldi	r22, 0x02	; 2
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_AVR_Set_Cursor>
      LCD_AVR_Print_String("EMBS UNAC");
 26a:	8f e1       	ldi	r24, 0x1F	; 31
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	0e 94 12 01 	call	0x224	; 0x224 <LCD_AVR_Print_String>
      LCD_AVR_Set_Cursor(0,Fila4);
 272:	63 e0       	ldi	r22, 0x03	; 3
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_AVR_Set_Cursor>
      LCD_AVR_Print_String("MUCHAS GRACIAS");
 27a:	89 e2       	ldi	r24, 0x29	; 41
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 12 01 	call	0x224	; 0x224 <LCD_AVR_Print_String>
 282:	ff cf       	rjmp	.-2      	; 0x282 <main+0x44>

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
