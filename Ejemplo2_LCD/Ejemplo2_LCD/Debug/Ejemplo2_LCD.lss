
Ejemplo2_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  0000059a  0000060e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000059a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000064a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000067c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014e3  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a1  00000000  00000000  00001c17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006da  00000000  00000000  000023b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00002a94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000455  00000000  00000000  00002ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000928  00000000  00000000  00002ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00003925  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e9       	ldi	r30, 0x9A	; 154
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6f 02 	call	0x4de	; 0x4de <main>
  8e:	0c 94 cb 02 	jmp	0x596	; 0x596 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCD_AVR_Data_Bus>:
	_delay_ms(2);
	E_OFF;
}
void LCD_AVR_Data_Bus(uint8_t a){
	// 0001
	if (a & 0x01){D4_ON;}
  96:	80 ff       	sbrs	r24, 0
  98:	04 c0       	rjmp	.+8      	; 0xa2 <LCD_AVR_Data_Bus+0xc>
  9a:	95 b1       	in	r25, 0x05	; 5
  9c:	94 60       	ori	r25, 0x04	; 4
  9e:	95 b9       	out	0x05, r25	; 5
  a0:	03 c0       	rjmp	.+6      	; 0xa8 <LCD_AVR_Data_Bus+0x12>
	else{D4_OFF;}
  a2:	95 b1       	in	r25, 0x05	; 5
  a4:	9b 7f       	andi	r25, 0xFB	; 251
  a6:	95 b9       	out	0x05, r25	; 5
	// 0010
	if (a & 0x02){D5_ON;}
  a8:	81 ff       	sbrs	r24, 1
  aa:	04 c0       	rjmp	.+8      	; 0xb4 <LCD_AVR_Data_Bus+0x1e>
  ac:	95 b1       	in	r25, 0x05	; 5
  ae:	98 60       	ori	r25, 0x08	; 8
  b0:	95 b9       	out	0x05, r25	; 5
  b2:	03 c0       	rjmp	.+6      	; 0xba <LCD_AVR_Data_Bus+0x24>
	else{D5_OFF;}
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	97 7f       	andi	r25, 0xF7	; 247
  b8:	95 b9       	out	0x05, r25	; 5
	// 0100
	if (a & 0x04){D6_ON;}
  ba:	82 ff       	sbrs	r24, 2
  bc:	04 c0       	rjmp	.+8      	; 0xc6 <LCD_AVR_Data_Bus+0x30>
  be:	95 b1       	in	r25, 0x05	; 5
  c0:	90 61       	ori	r25, 0x10	; 16
  c2:	95 b9       	out	0x05, r25	; 5
  c4:	03 c0       	rjmp	.+6      	; 0xcc <LCD_AVR_Data_Bus+0x36>
	else{D6_OFF;}
  c6:	95 b1       	in	r25, 0x05	; 5
  c8:	9f 7e       	andi	r25, 0xEF	; 239
  ca:	95 b9       	out	0x05, r25	; 5
	// 1000
	if (a & 0x08){D7_ON;}
  cc:	83 ff       	sbrs	r24, 3
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <LCD_AVR_Data_Bus+0x42>
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	80 62       	ori	r24, 0x20	; 32
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	08 95       	ret
	else{D7_OFF;}
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	8f 7d       	andi	r24, 0xDF	; 223
  dc:	85 b9       	out	0x05, r24	; 5
  de:	08 95       	ret

000000e0 <LCD_AVR_Cmd>:
#include "LCD_avr.h"
#define  F_CPU 8000000UL
#include <util/delay.h>

void LCD_AVR_Cmd(uint8_t a){
	E_OFF;
  e0:	95 b1       	in	r25, 0x05	; 5
  e2:	9e 7f       	andi	r25, 0xFE	; 254
  e4:	95 b9       	out	0x05, r25	; 5
	E_ON;
  e6:	95 b1       	in	r25, 0x05	; 5
  e8:	91 60       	ori	r25, 0x01	; 1
  ea:	95 b9       	out	0x05, r25	; 5
	LCD_AVR_Data_Bus(a)	;
  ec:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_AVR_Data_Bus>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	8f e9       	ldi	r24, 0x9F	; 159
  f2:	9f e0       	ldi	r25, 0x0F	; 15
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_AVR_Cmd+0x14>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_AVR_Cmd+0x1a>
  fa:	00 00       	nop
	_delay_ms(2);
	E_OFF;
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	8e 7f       	andi	r24, 0xFE	; 254
 100:	85 b9       	out	0x05, r24	; 5
 102:	08 95       	ret

00000104 <LCD_AVR_Init>:
	if (a & 0x08){D7_ON;}
	else{D7_OFF;}
}
void LCD_AVR_Init(void){
	
	DDRB |= (1<<0) |(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5);
 104:	84 b1       	in	r24, 0x04	; 4
 106:	8f 63       	ori	r24, 0x3F	; 63
 108:	84 b9       	out	0x04, r24	; 4
	
	LCD_AVR_Cmd(0X03);
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X03);
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X03);
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X02);
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X02);
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X08);
 128:	88 e0       	ldi	r24, 0x08	; 8
 12a:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X00);
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X08);
 134:	88 e0       	ldi	r24, 0x08	; 8
 136:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X00);
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X01);
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X00);
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X0D);
 14c:	8d e0       	ldi	r24, 0x0D	; 13
 14e:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
 152:	08 95       	ret

00000154 <LCD_AVR_Set_Cursor>:
	
}
void LCD_AVR_Set_Cursor(uint8_t x,Ubicacion y){
 154:	cf 93       	push	r28
uint8_t m,n;

RS_OFF;
 156:	95 b1       	in	r25, 0x05	; 5
 158:	9d 7f       	andi	r25, 0xFD	; 253
 15a:	95 b9       	out	0x05, r25	; 5
switch (y)
 15c:	61 30       	cpi	r22, 0x01	; 1
 15e:	c9 f0       	breq	.+50     	; 0x192 <LCD_AVR_Set_Cursor+0x3e>
 160:	28 f0       	brcs	.+10     	; 0x16c <LCD_AVR_Set_Cursor+0x18>
 162:	62 30       	cpi	r22, 0x02	; 2
 164:	49 f1       	breq	.+82     	; 0x1b8 <LCD_AVR_Set_Cursor+0x64>
 166:	63 30       	cpi	r22, 0x03	; 3
 168:	d1 f1       	breq	.+116    	; 0x1de <LCD_AVR_Set_Cursor+0x8a>
 16a:	4b c0       	rjmp	.+150    	; 0x202 <LCD_AVR_Set_Cursor+0xae>
{
	case Fila1:
			m=0x80+x;
 16c:	c0 e8       	ldi	r28, 0x80	; 128
 16e:	c8 0f       	add	r28, r24
			n=(0x80+x)>>4;
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	80 58       	subi	r24, 0x80	; 128
 174:	9f 4f       	sbci	r25, 0xFF	; 255
 176:	95 95       	asr	r25
 178:	87 95       	ror	r24
 17a:	95 95       	asr	r25
 17c:	87 95       	ror	r24
 17e:	95 95       	asr	r25
 180:	87 95       	ror	r24
 182:	95 95       	asr	r25
 184:	87 95       	ror	r24
			LCD_AVR_Cmd(n);
 186:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
			LCD_AVR_Cmd(m);
 18a:	8c 2f       	mov	r24, r28
 18c:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	break;
 190:	38 c0       	rjmp	.+112    	; 0x202 <LCD_AVR_Set_Cursor+0xae>
	case Fila2:
			m=0xC0+x;
 192:	c0 ec       	ldi	r28, 0xC0	; 192
 194:	c8 0f       	add	r28, r24
			n=(0XC0+x)>>4;
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	80 54       	subi	r24, 0x40	; 64
 19a:	9f 4f       	sbci	r25, 0xFF	; 255
 19c:	95 95       	asr	r25
 19e:	87 95       	ror	r24
 1a0:	95 95       	asr	r25
 1a2:	87 95       	ror	r24
 1a4:	95 95       	asr	r25
 1a6:	87 95       	ror	r24
 1a8:	95 95       	asr	r25
 1aa:	87 95       	ror	r24
			LCD_AVR_Cmd(n);
 1ac:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
			LCD_AVR_Cmd(m);
 1b0:	8c 2f       	mov	r24, r28
 1b2:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	break;
 1b6:	25 c0       	rjmp	.+74     	; 0x202 <LCD_AVR_Set_Cursor+0xae>
	case Fila3:
			m=0x94+x;
 1b8:	c4 e9       	ldi	r28, 0x94	; 148
 1ba:	c8 0f       	add	r28, r24
			n=(0x94+x)>>4;
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	8c 56       	subi	r24, 0x6C	; 108
 1c0:	9f 4f       	sbci	r25, 0xFF	; 255
 1c2:	95 95       	asr	r25
 1c4:	87 95       	ror	r24
 1c6:	95 95       	asr	r25
 1c8:	87 95       	ror	r24
 1ca:	95 95       	asr	r25
 1cc:	87 95       	ror	r24
 1ce:	95 95       	asr	r25
 1d0:	87 95       	ror	r24
			LCD_AVR_Cmd(n);
 1d2:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
			LCD_AVR_Cmd(m);
 1d6:	8c 2f       	mov	r24, r28
 1d8:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	break;
 1dc:	12 c0       	rjmp	.+36     	; 0x202 <LCD_AVR_Set_Cursor+0xae>
	case Fila4:
			m=0xD4+x;
 1de:	c4 ed       	ldi	r28, 0xD4	; 212
 1e0:	c8 0f       	add	r28, r24
			n=(0xD4+x)>>4;
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	8c 52       	subi	r24, 0x2C	; 44
 1e6:	9f 4f       	sbci	r25, 0xFF	; 255
 1e8:	95 95       	asr	r25
 1ea:	87 95       	ror	r24
 1ec:	95 95       	asr	r25
 1ee:	87 95       	ror	r24
 1f0:	95 95       	asr	r25
 1f2:	87 95       	ror	r24
 1f4:	95 95       	asr	r25
 1f6:	87 95       	ror	r24
			LCD_AVR_Cmd(n);
 1f8:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
			LCD_AVR_Cmd(m);
 1fc:	8c 2f       	mov	r24, r28
 1fe:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
	break;
}
	
}
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <LCD_AVR_Print_Char>:
void LCD_AVR_Print_Char(char c){
 206:	cf 93       	push	r28
 208:	c8 2f       	mov	r28, r24
		uint8_t m,n;
		m=c>>4;
		n=c;
		RS_ON;
 20a:	85 b1       	in	r24, 0x05	; 5
 20c:	82 60       	ori	r24, 0x02	; 2
 20e:	85 b9       	out	0x05, r24	; 5
		LCD_AVR_Cmd(m);
 210:	8c 2f       	mov	r24, r28
 212:	82 95       	swap	r24
 214:	8f 70       	andi	r24, 0x0F	; 15
 216:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		LCD_AVR_Cmd(n);
 21a:	8c 2f       	mov	r24, r28
 21c:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
}
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <LCD_AVR_Print_String>:
void LCD_AVR_Print_String(char *c){
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	ec 01       	movw	r28, r24
	
	char *ptr;
	ptr = c;
	while(*ptr)
 22a:	03 c0       	rjmp	.+6      	; 0x232 <LCD_AVR_Print_String+0xe>
			LCD_AVR_Print_Char(*ptr++);
 22c:	21 96       	adiw	r28, 0x01	; 1
 22e:	0e 94 03 01 	call	0x206	; 0x206 <LCD_AVR_Print_Char>
}
void LCD_AVR_Print_String(char *c){
	
	char *ptr;
	ptr = c;
	while(*ptr)
 232:	88 81       	ld	r24, Y
 234:	81 11       	cpse	r24, r1
 236:	fa cf       	rjmp	.-12     	; 0x22c <LCD_AVR_Print_String+0x8>
			LCD_AVR_Print_Char(*ptr++);
	
}
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <LCD_AVR_New_Char>:


void LCD_AVR_New_Char(uint8_t a,uint8_t b,uint8_t c,uint8_t d ,uint8_t e ,uint8_t f,uint8_t g,uint8_t h,uint8_t i){
 23e:	8f 92       	push	r8
 240:	af 92       	push	r10
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	d6 2e       	mov	r13, r22
 258:	14 2f       	mov	r17, r20
 25a:	f2 2e       	mov	r15, r18
	  uint8_t m,n;
	  switch(a){
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	09 f4       	brne	.+2      	; 0x262 <LCD_AVR_New_Char+0x24>
 260:	62 c0       	rjmp	.+196    	; 0x326 <LCD_AVR_New_Char+0xe8>
 262:	83 30       	cpi	r24, 0x03	; 3
 264:	09 f4       	brne	.+2      	; 0x268 <LCD_AVR_New_Char+0x2a>
 266:	c4 c0       	rjmp	.+392    	; 0x3f0 <LCD_AVR_New_Char+0x1b2>
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	09 f0       	breq	.+2      	; 0x26e <LCD_AVR_New_Char+0x30>
 26c:	1c c1       	rjmp	.+568    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
		  case 1:
		  LCD_AVR_Cmd(0x04);
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(0x00);
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  RS_ON;
 27a:	85 b1       	in	r24, 0x05	; 5
 27c:	82 60       	ori	r24, 0x02	; 2
 27e:	85 b9       	out	0x05, r24	; 5
		  m=b>>4;
		  n=b;
		  LCD_AVR_Cmd(m);
 280:	8d 2d       	mov	r24, r13
 282:	82 95       	swap	r24
 284:	8f 70       	andi	r24, 0x0F	; 15
 286:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 28a:	8d 2d       	mov	r24, r13
 28c:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  m=c>>4;
		  n=c;
		  LCD_AVR_Cmd(m);
 290:	81 2f       	mov	r24, r17
 292:	82 95       	swap	r24
 294:	8f 70       	andi	r24, 0x0F	; 15
 296:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 29a:	81 2f       	mov	r24, r17
 29c:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  m=d>>4;
		  n=d;
		  LCD_AVR_Cmd(m);
 2a0:	8f 2d       	mov	r24, r15
 2a2:	82 95       	swap	r24
 2a4:	8f 70       	andi	r24, 0x0F	; 15
 2a6:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 2aa:	8f 2d       	mov	r24, r15
 2ac:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  m=e>>4;
		  n=e;
		  LCD_AVR_Cmd(m);
 2b0:	80 2f       	mov	r24, r16
 2b2:	82 95       	swap	r24
 2b4:	8f 70       	andi	r24, 0x0F	; 15
 2b6:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 2ba:	80 2f       	mov	r24, r16
 2bc:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  m=f>>4;
		  n=f;
		  LCD_AVR_Cmd(m);
 2c0:	8e 2d       	mov	r24, r14
 2c2:	82 95       	swap	r24
 2c4:	8f 70       	andi	r24, 0x0F	; 15
 2c6:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 2ca:	8e 2d       	mov	r24, r14
 2cc:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  m=g>>4;
		  n=g;
		  LCD_AVR_Cmd(m);
 2d0:	8c 2d       	mov	r24, r12
 2d2:	82 95       	swap	r24
 2d4:	8f 70       	andi	r24, 0x0F	; 15
 2d6:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 2da:	8c 2d       	mov	r24, r12
 2dc:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  m=h>>4;
		  n=h;
		  LCD_AVR_Cmd(m);
 2e0:	8a 2d       	mov	r24, r10
 2e2:	82 95       	swap	r24
 2e4:	8f 70       	andi	r24, 0x0F	; 15
 2e6:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 2ea:	8a 2d       	mov	r24, r10
 2ec:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  m=i>>4;
		  n=i;
		  LCD_AVR_Cmd(m);
 2f0:	88 2d       	mov	r24, r8
 2f2:	82 95       	swap	r24
 2f4:	8f 70       	andi	r24, 0x0F	; 15
 2f6:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 2fa:	88 2d       	mov	r24, r8
 2fc:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  RS_OFF;
 300:	85 b1       	in	r24, 0x05	; 5
 302:	8d 7f       	andi	r24, 0xFD	; 253
 304:	85 b9       	out	0x05, r24	; 5
		  LCD_AVR_Cmd(0x00);
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(0x01);
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
 312:	2f ef       	ldi	r18, 0xFF	; 255
 314:	80 e7       	ldi	r24, 0x70	; 112
 316:	92 e0       	ldi	r25, 0x02	; 2
 318:	21 50       	subi	r18, 0x01	; 1
 31a:	80 40       	sbci	r24, 0x00	; 0
 31c:	90 40       	sbci	r25, 0x00	; 0
 31e:	e1 f7       	brne	.-8      	; 0x318 <LCD_AVR_New_Char+0xda>
 320:	00 c0       	rjmp	.+0      	; 0x322 <LCD_AVR_New_Char+0xe4>
 322:	00 00       	nop
 324:	c0 c0       	rjmp	.+384    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
		  _delay_ms(100);
		  break;
		  case 2:
		  LCD_AVR_Cmd(0x04);
 326:	84 e0       	ldi	r24, 0x04	; 4
 328:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(0x08);
 32c:	88 e0       	ldi	r24, 0x08	; 8
 32e:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  RS_ON;
 332:	85 b1       	in	r24, 0x05	; 5
 334:	82 60       	ori	r24, 0x02	; 2
 336:	85 b9       	out	0x05, r24	; 5
		  m=b>>4;
		  n=b;
		  LCD_AVR_Cmd(m);
 338:	8d 2d       	mov	r24, r13
 33a:	82 95       	swap	r24
 33c:	8f 70       	andi	r24, 0x0F	; 15
 33e:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 342:	8d 2d       	mov	r24, r13
 344:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  m=c>>4;
 348:	d1 2e       	mov	r13, r17
 34a:	d6 94       	lsr	r13
 34c:	d6 94       	lsr	r13
 34e:	d6 94       	lsr	r13
 350:	d6 94       	lsr	r13
		  n=c;
		  LCD_AVR_Cmd(m);
 352:	8d 2d       	mov	r24, r13
 354:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 358:	81 2f       	mov	r24, r17
 35a:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  m=c>>4;
		  n=c;
		  LCD_AVR_Cmd(m);
 35e:	8d 2d       	mov	r24, r13
 360:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 364:	81 2f       	mov	r24, r17
 366:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  m=d>>4;
		  n=d;
		  LCD_AVR_Cmd(m);
 36a:	8f 2d       	mov	r24, r15
 36c:	82 95       	swap	r24
 36e:	8f 70       	andi	r24, 0x0F	; 15
 370:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 374:	8f 2d       	mov	r24, r15
 376:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  m=e>>4;
		  n=e;
		  LCD_AVR_Cmd(m);
 37a:	80 2f       	mov	r24, r16
 37c:	82 95       	swap	r24
 37e:	8f 70       	andi	r24, 0x0F	; 15
 380:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 384:	80 2f       	mov	r24, r16
 386:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  m=f>>4;
		  n=f;
		  LCD_AVR_Cmd(m);
 38a:	8e 2d       	mov	r24, r14
 38c:	82 95       	swap	r24
 38e:	8f 70       	andi	r24, 0x0F	; 15
 390:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 394:	8e 2d       	mov	r24, r14
 396:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  m=g>>4;
		  n=g;
		  LCD_AVR_Cmd(m);
 39a:	8c 2d       	mov	r24, r12
 39c:	82 95       	swap	r24
 39e:	8f 70       	andi	r24, 0x0F	; 15
 3a0:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 3a4:	8c 2d       	mov	r24, r12
 3a6:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  m=h>>4;
		  n=h;
		  LCD_AVR_Cmd(m);
 3aa:	8a 2d       	mov	r24, r10
 3ac:	82 95       	swap	r24
 3ae:	8f 70       	andi	r24, 0x0F	; 15
 3b0:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 3b4:	8a 2d       	mov	r24, r10
 3b6:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  m=i>>4;
		  n=i;
		  LCD_AVR_Cmd(m);
 3ba:	88 2d       	mov	r24, r8
 3bc:	82 95       	swap	r24
 3be:	8f 70       	andi	r24, 0x0F	; 15
 3c0:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 3c4:	88 2d       	mov	r24, r8
 3c6:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  RS_OFF;
 3ca:	85 b1       	in	r24, 0x05	; 5
 3cc:	8d 7f       	andi	r24, 0xFD	; 253
 3ce:	85 b9       	out	0x05, r24	; 5
		  LCD_AVR_Cmd(0x00);
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(0x01);
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
 3dc:	2f ef       	ldi	r18, 0xFF	; 255
 3de:	80 e7       	ldi	r24, 0x70	; 112
 3e0:	92 e0       	ldi	r25, 0x02	; 2
 3e2:	21 50       	subi	r18, 0x01	; 1
 3e4:	80 40       	sbci	r24, 0x00	; 0
 3e6:	90 40       	sbci	r25, 0x00	; 0
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <LCD_AVR_New_Char+0x1a4>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <LCD_AVR_New_Char+0x1ae>
 3ec:	00 00       	nop
 3ee:	5b c0       	rjmp	.+182    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
		  _delay_ms(100);
		  break;
		  case 3:
		  LCD_AVR_Cmd(0x04);
 3f0:	84 e0       	ldi	r24, 0x04	; 4
 3f2:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(0xFF);
 3f6:	8f ef       	ldi	r24, 0xFF	; 255
 3f8:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  RS_ON;
 3fc:	85 b1       	in	r24, 0x05	; 5
 3fe:	82 60       	ori	r24, 0x02	; 2
 400:	85 b9       	out	0x05, r24	; 5
		  m=b>>4;
		  n=b;
		  LCD_AVR_Cmd(m);
 402:	8d 2d       	mov	r24, r13
 404:	82 95       	swap	r24
 406:	8f 70       	andi	r24, 0x0F	; 15
 408:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 40c:	8d 2d       	mov	r24, r13
 40e:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  m=c>>4;
		  n=c;
		  LCD_AVR_Cmd(m);
 412:	81 2f       	mov	r24, r17
 414:	82 95       	swap	r24
 416:	8f 70       	andi	r24, 0x0F	; 15
 418:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 41c:	81 2f       	mov	r24, r17
 41e:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  m=d>>4;
		  n=d;
		  LCD_AVR_Cmd(m);
 422:	8f 2d       	mov	r24, r15
 424:	82 95       	swap	r24
 426:	8f 70       	andi	r24, 0x0F	; 15
 428:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 42c:	8f 2d       	mov	r24, r15
 42e:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  m=e>>4;
		  n=e;
		  LCD_AVR_Cmd(m);
 432:	80 2f       	mov	r24, r16
 434:	82 95       	swap	r24
 436:	8f 70       	andi	r24, 0x0F	; 15
 438:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 43c:	80 2f       	mov	r24, r16
 43e:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  m=f>>4;
		  n=f;
		  LCD_AVR_Cmd(m);
 442:	8e 2d       	mov	r24, r14
 444:	82 95       	swap	r24
 446:	8f 70       	andi	r24, 0x0F	; 15
 448:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 44c:	8e 2d       	mov	r24, r14
 44e:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  m=g>>4;
		  n=g;
		  LCD_AVR_Cmd(m);
 452:	8c 2d       	mov	r24, r12
 454:	82 95       	swap	r24
 456:	8f 70       	andi	r24, 0x0F	; 15
 458:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 45c:	8c 2d       	mov	r24, r12
 45e:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  m=h>>4;
		  n=h;
		  LCD_AVR_Cmd(m);
 462:	8a 2d       	mov	r24, r10
 464:	82 95       	swap	r24
 466:	8f 70       	andi	r24, 0x0F	; 15
 468:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 46c:	8a 2d       	mov	r24, r10
 46e:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  m=i>>4;
		  n=i;
		  LCD_AVR_Cmd(m);
 472:	88 2d       	mov	r24, r8
 474:	82 95       	swap	r24
 476:	8f 70       	andi	r24, 0x0F	; 15
 478:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(n);
 47c:	88 2d       	mov	r24, r8
 47e:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  RS_OFF;
 482:	85 b1       	in	r24, 0x05	; 5
 484:	8d 7f       	andi	r24, 0xFD	; 253
 486:	85 b9       	out	0x05, r24	; 5
		  LCD_AVR_Cmd(0x00);
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		  LCD_AVR_Cmd(0x01);
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
 494:	2f ef       	ldi	r18, 0xFF	; 255
 496:	80 e7       	ldi	r24, 0x70	; 112
 498:	92 e0       	ldi	r25, 0x02	; 2
 49a:	21 50       	subi	r18, 0x01	; 1
 49c:	80 40       	sbci	r24, 0x00	; 0
 49e:	90 40       	sbci	r25, 0x00	; 0
 4a0:	e1 f7       	brne	.-8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4a4:	00 00       	nop
		  _delay_ms(100);
		  break;
	  }
	
	
}
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	ff 90       	pop	r15
 4b0:	ef 90       	pop	r14
 4b2:	df 90       	pop	r13
 4b4:	cf 90       	pop	r12
 4b6:	af 90       	pop	r10
 4b8:	8f 90       	pop	r8
 4ba:	08 95       	ret

000004bc <LCD_AVR_Print_New_Char>:
void LCD_AVR_Print_New_Char(uint8_t a){
 4bc:	cf 93       	push	r28
 4be:	c8 2f       	mov	r28, r24
		RS_ON;
 4c0:	85 b1       	in	r24, 0x05	; 5
 4c2:	82 60       	ori	r24, 0x02	; 2
 4c4:	85 b9       	out	0x05, r24	; 5
		LCD_AVR_Cmd(0x00);
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		LCD_AVR_Cmd(a-1);
 4cc:	8f ef       	ldi	r24, 0xFF	; 255
 4ce:	8c 0f       	add	r24, r28
 4d0:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_AVR_Cmd>
		RS_OFF;
 4d4:	85 b1       	in	r24, 0x05	; 5
 4d6:	8d 7f       	andi	r24, 0xFD	; 253
 4d8:	85 b9       	out	0x05, r24	; 5
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <main>:
#include "LCD_avr.h"


int main(void)
{
   LCD_AVR_Init();
 4de:	0e 94 82 00 	call	0x104	; 0x104 <LCD_AVR_Init>
   LCD_AVR_New_Char(1,0x0A,0x1F,0x1F,0x1F,0x0E,0x04,0x00,0x00);
 4e2:	81 2c       	mov	r8, r1
 4e4:	a1 2c       	mov	r10, r1
 4e6:	68 94       	set
 4e8:	cc 24       	eor	r12, r12
 4ea:	c2 f8       	bld	r12, 2
 4ec:	0f 2e       	mov	r0, r31
 4ee:	fe e0       	ldi	r31, 0x0E	; 14
 4f0:	ef 2e       	mov	r14, r31
 4f2:	f0 2d       	mov	r31, r0
 4f4:	0f e1       	ldi	r16, 0x1F	; 31
 4f6:	2f e1       	ldi	r18, 0x1F	; 31
 4f8:	4f e1       	ldi	r20, 0x1F	; 31
 4fa:	6a e0       	ldi	r22, 0x0A	; 10
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_AVR_New_Char>
   LCD_AVR_New_Char(2,0x04,0x0E,0x0E,0x0E,0x0E,0x1F,0x00,0x00);
 502:	0f 2e       	mov	r0, r31
 504:	ff e1       	ldi	r31, 0x1F	; 31
 506:	cf 2e       	mov	r12, r31
 508:	f0 2d       	mov	r31, r0
 50a:	0e e0       	ldi	r16, 0x0E	; 14
 50c:	2e e0       	ldi	r18, 0x0E	; 14
 50e:	4e e0       	ldi	r20, 0x0E	; 14
 510:	64 e0       	ldi	r22, 0x04	; 4
 512:	82 e0       	ldi	r24, 0x02	; 2
 514:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_AVR_New_Char>
   LCD_AVR_New_Char(3, 0x0E,0x0E,0x04,0x1F,0x04,0x04,0x0A,0x0A);
 518:	0f 2e       	mov	r0, r31
 51a:	fa e0       	ldi	r31, 0x0A	; 10
 51c:	8f 2e       	mov	r8, r31
 51e:	f0 2d       	mov	r31, r0
 520:	0f 2e       	mov	r0, r31
 522:	fa e0       	ldi	r31, 0x0A	; 10
 524:	af 2e       	mov	r10, r31
 526:	f0 2d       	mov	r31, r0
 528:	68 94       	set
 52a:	cc 24       	eor	r12, r12
 52c:	c2 f8       	bld	r12, 2
 52e:	68 94       	set
 530:	ee 24       	eor	r14, r14
 532:	e2 f8       	bld	r14, 2
 534:	0f e1       	ldi	r16, 0x1F	; 31
 536:	24 e0       	ldi	r18, 0x04	; 4
 538:	4e e0       	ldi	r20, 0x0E	; 14
 53a:	6e e0       	ldi	r22, 0x0E	; 14
 53c:	83 e0       	ldi	r24, 0x03	; 3
 53e:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_AVR_New_Char>
   
      LCD_AVR_Set_Cursor(0,Fila1);
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_AVR_Set_Cursor>
      LCD_AVR_Print_String("Bienvidos al Curso ");
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	0e 94 12 01 	call	0x224	; 0x224 <LCD_AVR_Print_String>
	  LCD_AVR_Print_New_Char(2);
 552:	82 e0       	ldi	r24, 0x02	; 2
 554:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_AVR_Print_New_Char>
      LCD_AVR_Set_Cursor(0,Fila2);
 558:	61 e0       	ldi	r22, 0x01	; 1
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_AVR_Set_Cursor>
      LCD_AVR_Print_String("de AVR en C ");
 560:	84 e1       	ldi	r24, 0x14	; 20
 562:	91 e0       	ldi	r25, 0x01	; 1
 564:	0e 94 12 01 	call	0x224	; 0x224 <LCD_AVR_Print_String>
	  LCD_AVR_Print_New_Char(1);
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_AVR_Print_New_Char>
      LCD_AVR_Set_Cursor(0,Fila3);
 56e:	62 e0       	ldi	r22, 0x02	; 2
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_AVR_Set_Cursor>
      LCD_AVR_Print_String("EMBS UNAC  ");
 576:	81 e2       	ldi	r24, 0x21	; 33
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	0e 94 12 01 	call	0x224	; 0x224 <LCD_AVR_Print_String>
	  LCD_AVR_Print_New_Char(3);
 57e:	83 e0       	ldi	r24, 0x03	; 3
 580:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_AVR_Print_New_Char>
      LCD_AVR_Set_Cursor(0,Fila4);
 584:	63 e0       	ldi	r22, 0x03	; 3
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_AVR_Set_Cursor>
      LCD_AVR_Print_String("MUCHAS GRACIAS");
 58c:	8d e2       	ldi	r24, 0x2D	; 45
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	0e 94 12 01 	call	0x224	; 0x224 <LCD_AVR_Print_String>
 594:	ff cf       	rjmp	.-2      	; 0x594 <main+0xb6>

00000596 <_exit>:
 596:	f8 94       	cli

00000598 <__stop_program>:
 598:	ff cf       	rjmp	.-2      	; 0x598 <__stop_program>
