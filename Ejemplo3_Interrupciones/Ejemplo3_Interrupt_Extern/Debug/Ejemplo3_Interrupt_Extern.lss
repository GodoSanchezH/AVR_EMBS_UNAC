
Ejemplo3_Interrupt_Extern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007f8  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000711  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d0  00000000  00000000  0000119d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fa  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000da  00000000  00000000  000019fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001ad4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_1>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 84 00 	call	0x108	; 0x108 <main>
  88:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <INTX_Init>:
#include <avr/io.h>
#include <avr/interrupt.h>

void INTX_Init(void){
	//CONFIGURACION INT0
	EICRA |= (1<<ISC01) | (1<<ISC00);// INT0 QUE SEA FLANCO DE SUBIDA
  90:	e9 e6       	ldi	r30, 0x69	; 105
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	83 60       	ori	r24, 0x03	; 3
  98:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);	//HABILITAMOS INT0
  9a:	8d b3       	in	r24, 0x1d	; 29
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	8d bb       	out	0x1d, r24	; 29
	
	//CONFIGURACION INT1
	EICRA |= (1<<ISC11);
  a0:	80 81       	ld	r24, Z
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC10);// INT1 QUE SEA FLANCO DE BAJADA
  a6:	80 81       	ld	r24, Z
  a8:	8b 7f       	andi	r24, 0xFB	; 251
  aa:	80 83       	st	Z, r24
	EIMSK |= (1<<INT1);	//HABILITAMOS INT1
  ac:	8d b3       	in	r24, 0x1d	; 29
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8d bb       	out	0x1d, r24	; 29
  b2:	08 95       	ret

000000b4 <__vector_1>:
	
	
}

ISR(INT0_vect){
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
	
	PORTB ^=(1<<0);
  c2:	95 b1       	in	r25, 0x05	; 5
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	89 27       	eor	r24, r25
  c8:	85 b9       	out	0x05, r24	; 5
	EIFR |= (1<<INTF0);//limpiamos la bandera
  ca:	8c b3       	in	r24, 0x1c	; 28
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	8c bb       	out	0x1c, r24	; 28
}
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <__vector_2>:

ISR(INT1_vect){
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
	
	PORTB ^=(1<<5);
  ec:	95 b1       	in	r25, 0x05	; 5
  ee:	80 e2       	ldi	r24, 0x20	; 32
  f0:	89 27       	eor	r24, r25
  f2:	85 b9       	out	0x05, r24	; 5
	EIFR |= (1<<INTF1);//limpiamos la bandera
  f4:	8c b3       	in	r24, 0x1c	; 28
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	8c bb       	out	0x1c, r24	; 28
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <main>:
 #include "Interrupciones_AVR.h"

volatile bool Flag_PCINT;
uint8_t i;
 int main(void)
 {	cli();// desabilita las interrupcioness globales
 108:	f8 94       	cli
	INTX_Init();
 10a:	0e 94 48 00 	call	0x90	; 0x90 <INTX_Init>
	DDRB |= (1<<5) | (1<<0);
 10e:	84 b1       	in	r24, 0x04	; 4
 110:	81 62       	ori	r24, 0x21	; 33
 112:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<5) & ~(1<<0);
 114:	85 b1       	in	r24, 0x05	; 5
 116:	8e 7d       	andi	r24, 0xDE	; 222
 118:	85 b9       	out	0x05, r24	; 5
	sei();// habilita las interrupcioness globales
 11a:	78 94       	sei

	 for (;;)
	 {
		 if (Flag_PCINT)
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 120:	88 23       	and	r24, r24
 122:	e1 f3       	breq	.-8      	; 0x11c <main+0x14>
		 {
			 for (i=0;i<=9;i++)
 124:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <i>
 128:	14 c0       	rjmp	.+40     	; 0x152 <main+0x4a>
			 {
				 PORTB ^=(1<<5);
 12a:	95 b1       	in	r25, 0x05	; 5
 12c:	80 e2       	ldi	r24, 0x20	; 32
 12e:	89 27       	eor	r24, r25
 130:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	81 ee       	ldi	r24, 0xE1	; 225
 136:	94 e0       	ldi	r25, 0x04	; 4
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x30>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x3a>
 142:	00 00       	nop
				 _delay_ms(200);
				 Flag_PCINT = false;
 144:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>

	 for (;;)
	 {
		 if (Flag_PCINT)
		 {
			 for (i=0;i<=9;i++)
 148:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <i>
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <i>
 152:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <i>
 156:	8a 30       	cpi	r24, 0x0A	; 10
 158:	40 f3       	brcs	.-48     	; 0x12a <main+0x22>
 15a:	e0 cf       	rjmp	.-64     	; 0x11c <main+0x14>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
