
Ejemplo3_PCINT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000083d  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000729  00000000  00000000  00000af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040b  00000000  00000000  00001222  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001630  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fc  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000116  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001c02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_1>
   8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_2>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  88:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <PCINTX_Init>:
}

void PCINTX_Init(void){
	
	
	PCICR |= (1<<PCIE0);//habilitamos ese vector
  90:	e8 e6       	ldi	r30, 0x68	; 104
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	81 60       	ori	r24, 0x01	; 1
  98:	80 83       	st	Z, r24
	
	PCMSK0 |= (1<<PCINT7);//habilitamos el pin pb7
  9a:	eb e6       	ldi	r30, 0x6B	; 107
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	80 83       	st	Z, r24
  a4:	08 95       	ret

000000a6 <__vector_3>:
}


ISR(PCINT0_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	Flag_PCINT = true;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	//PORTB ^=(1<<5);
	PCIFR |= (1<<PCIF0);
  b8:	8b b3       	in	r24, 0x1b	; 27
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	8b bb       	out	0x1b, r24	; 27
	
	
}
  be:	8f 91       	pop	r24
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <__vector_1>:


ISR(INT0_vect){
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
	
	PORTB ^=(1<<0);
  d8:	95 b1       	in	r25, 0x05	; 5
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	89 27       	eor	r24, r25
  de:	85 b9       	out	0x05, r24	; 5
	EIFR |= (1<<INTF0);//limpiamos la bandera
  e0:	8c b3       	in	r24, 0x1c	; 28
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	8c bb       	out	0x1c, r24	; 28
}
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <__vector_2>:

ISR(INT1_vect){
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
	
	PORTB ^=(1<<5);
 102:	95 b1       	in	r25, 0x05	; 5
 104:	80 e2       	ldi	r24, 0x20	; 32
 106:	89 27       	eor	r24, r25
 108:	85 b9       	out	0x05, r24	; 5
	EIFR |= (1<<INTF1);//limpiamos la bandera
 10a:	8c b3       	in	r24, 0x1c	; 28
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	8c bb       	out	0x1c, r24	; 28
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <main>:
volatile bool Flag_PCINT= false;
uint8_t i;

 int main(void)
 {	
	cli();// desabilita las interrupcioness globales
 11e:	f8 94       	cli
	PCINTX_Init();
 120:	0e 94 48 00 	call	0x90	; 0x90 <PCINTX_Init>
	DDRB |= (1<<5) ;
 124:	84 b1       	in	r24, 0x04	; 4
 126:	80 62       	ori	r24, 0x20	; 32
 128:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<5) ;
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	8f 7d       	andi	r24, 0xDF	; 223
 12e:	85 b9       	out	0x05, r24	; 5
	sei();// habilita las interrupcioness globales
 130:	78 94       	sei

	 for (;;)
	 {
		 if (Flag_PCINT)
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 136:	88 23       	and	r24, r24
 138:	e1 f3       	breq	.-8      	; 0x132 <main+0x14>
		 {
			for(i=0;i<=9;i++)
 13a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <i>
 13e:	12 c0       	rjmp	.+36     	; 0x164 <main+0x46>
			{
				PORTB ^=(1<<5);
 140:	95 b1       	in	r25, 0x05	; 5
 142:	80 e2       	ldi	r24, 0x20	; 32
 144:	89 27       	eor	r24, r25
 146:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	81 ee       	ldi	r24, 0xE1	; 225
 14c:	94 e0       	ldi	r25, 0x04	; 4
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0x30>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x3a>
 158:	00 00       	nop

	 for (;;)
	 {
		 if (Flag_PCINT)
		 {
			for(i=0;i<=9;i++)
 15a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <i>
 15e:	8f 5f       	subi	r24, 0xFF	; 255
 160:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <i>
 164:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <i>
 168:	8a 30       	cpi	r24, 0x0A	; 10
 16a:	50 f3       	brcs	.-44     	; 0x140 <main+0x22>
			{
				PORTB ^=(1<<5);
				_delay_ms(200);
			}
		 Flag_PCINT=false;
 16c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 170:	e0 cf       	rjmp	.-64     	; 0x132 <main+0x14>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
