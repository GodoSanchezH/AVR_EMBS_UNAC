
Timer_modoTemporizador.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000204  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007cb  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b0  00000000  00000000  00000a97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000376  00000000  00000000  00001147  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  000014c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a9  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000085  00000000  00000000  00001905  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000198a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  88:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Timer1_Init>:

extern volatile bool a;
extern volatile bool b;
void Timer1_Init(void){
	//Timer 1 en Modo Normal Mode
	TCCR1A &= ~(1<<WGM11) & ~(1<<WGM10);
  90:	e0 e8       	ldi	r30, 0x80	; 128
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	8c 7f       	andi	r24, 0xFC	; 252
  98:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM12) & ~(1<<WGM13);
  9a:	e1 e8       	ldi	r30, 0x81	; 129
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	87 7e       	andi	r24, 0xE7	; 231
  a2:	80 83       	st	Z, r24
			ValorTimer= 65536 - ((1uS X 16MHz)/64)
			ValorTimer= 65536 - ((1x10E-6 X 16x10E6)/1)
			ValorTimer= 65536 -21875
			ValorTimer = 65520
	*/
	TCNT1 = Valor_100mS;
  a4:	88 e5       	ldi	r24, 0x58	; 88
  a6:	9e e9       	ldi	r25, 0x9E	; 158
  a8:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  ac:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	//Configurar Interrupcion por Desbordamiento
	
	TIMSK1  |= (1<<TOIE1);//Habilitamos 
  b0:	af e6       	ldi	r26, 0x6F	; 111
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	8c 91       	ld	r24, X
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	8c 93       	st	X, r24
	
	////Habilitamos el clock Fosc/64
	TCCR1B |= (1<<CS11) | (1<<CS10);
  ba:	80 81       	ld	r24, Z
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS12);
  c0:	80 81       	ld	r24, Z
  c2:	8b 7f       	andi	r24, 0xFB	; 251
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <Timer2_Init>:


void Timer2_Init(void){
	
	//timer 2 como temporizador
	TCCR2A &= ~(1<<WGM22) & ~(1<<WGM21) & ~(1<<WGM20);
  c8:	e0 eb       	ldi	r30, 0xB0	; 176
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	84 7f       	andi	r24, 0xF4	; 244
  d0:	80 83       	st	Z, r24
	
	//cargar valor
		//ValorTimer= 256- ((t X Fosc)/Pre)
		//ValorTimer= 256- ((5ms X 16Mhz)/1024)
		//valorTimer = 256-78 = 178
	TCNT2 = 178;
  d2:	82 eb       	ldi	r24, 0xB2	; 178
  d4:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	
	//activar la interrupcion
	TIMSK2 |= (1<<TOIE2);
  d8:	e0 e7       	ldi	r30, 0x70	; 112
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	80 83       	st	Z, r24
	//habilitar el clock
	
	TCCR2B |= (1<<CS20) | (1<<CS21)|(1<<CS22);
  e2:	e1 eb       	ldi	r30, 0xB1	; 177
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	87 60       	ori	r24, 0x07	; 7
  ea:	80 83       	st	Z, r24
  ec:	08 95       	ret

000000ee <__vector_13>:
	
}
	
	ISR(TIMER1_OVF_vect){
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
		
		a=true;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <a>
		TCNT1 = Valor_100mS;//recarga del valor
 102:	88 e5       	ldi	r24, 0x58	; 88
 104:	9e e9       	ldi	r25, 0x9E	; 158
 106:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 10a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		TIFR1 |= (1<<TOV1);//borrar la bandera
 10e:	86 b3       	in	r24, 0x16	; 22
 110:	81 60       	ori	r24, 0x01	; 1
 112:	86 bb       	out	0x16, r24	; 22
		
	}
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <__vector_9>:
	
	ISR(TIMER2_OVF_vect){
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	8f 93       	push	r24
	b=true;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	TCNT2 = 178;//recarga del valor
 134:	82 eb       	ldi	r24, 0xB2	; 178
 136:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	TIFR2 |= (1<<TOV2);//borrar la bandera
 13a:	87 b3       	in	r24, 0x17	; 23
 13c:	81 60       	ori	r24, 0x01	; 1
 13e:	87 bb       	out	0x17, r24	; 23
}
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <main>:

volatile bool a=false;
volatile bool b=false;
int main(void)
{
	Timer1_Init();
 14c:	0e 94 48 00 	call	0x90	; 0x90 <Timer1_Init>
	Timer2_Init();
 150:	0e 94 64 00 	call	0xc8	; 0xc8 <Timer2_Init>
	DDRC |= (1<<0) | (1<<1);
 154:	87 b1       	in	r24, 0x07	; 7
 156:	83 60       	ori	r24, 0x03	; 3
 158:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1<<0) & ~(1<<1);
 15a:	88 b1       	in	r24, 0x08	; 8
 15c:	8c 7f       	andi	r24, 0xFC	; 252
 15e:	88 b9       	out	0x08, r24	; 8
	sei();
 160:	78 94       	sei
    for (;;)
    {
		if (a)
 162:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <a>
 166:	88 23       	and	r24, r24
 168:	31 f0       	breq	.+12     	; 0x176 <main+0x2a>
		{
			LedC0_Toggle();
 16a:	98 b1       	in	r25, 0x08	; 8
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	89 27       	eor	r24, r25
 170:	88 b9       	out	0x08, r24	; 8
			a=false;
 172:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <a>
		}
		if (b)
 176:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17a:	88 23       	and	r24, r24
 17c:	91 f3       	breq	.-28     	; 0x162 <main+0x16>
		{
			LedC1_Toggle();
 17e:	98 b1       	in	r25, 0x08	; 8
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	89 27       	eor	r24, r25
 184:	88 b9       	out	0x08, r24	; 8
			b=false;
 186:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 18a:	eb cf       	rjmp	.-42     	; 0x162 <main+0x16>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
