
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000d7c  00000e10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000090  0080012a  0080012a  00000e3a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000154c  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000853  00000000  00000000  000024ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000092e  00000000  00000000  00002d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  00003670  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052b  00000000  00000000  000038a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c09  00000000  00000000  00003dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000049d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 3b       	cpi	r26, 0xBA	; 186
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <main>
  9e:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Avr_Init>:

void ADC_Avr_Init(void){
	//Seleccionos el AVCC ;//Justificacion a la derecha
	//ADMUX |= (1<<REFS0) ;
	//ADMUX &= ~(1<<REFS1) & ~(1<<ADLAR);
	ADMUX = (1<<REFS0) | (0<<REFS1) | (0<<ADLAR);
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	//Seleccionamos el Clock del ADC
	//FOSC/PREESC = 16MHz/128 = 125kHZ
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	87 60       	ori	r24, 0x07	; 7
  b4:	80 83       	st	Z, r24
	
	//Habiltamos los canales Analogicos
	DIDR0 = 0XFF;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  bc:	08 95       	ret

000000be <ADC_Enable>:
	
}
void ADC_Enable(void)
{
	ADCSRA |= (1<<ADEN);
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <ADC_Disable>:
}

void ADC_Disable(void)
{
	ADCSRA &= ~(1<<ADEN);
  ca:	ea e7       	ldi	r30, 0x7A	; 122
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	8f 77       	andi	r24, 0x7F	; 127
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <ADC_Start_Conversion>:
}

void ADC_Start_Conversion(void)
{
	ADCSRA |= (1<<ADSC);
  d6:	ea e7       	ldi	r30, 0x7A	; 122
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	80 83       	st	Z, r24
  e0:	08 95       	ret

000000e2 <ADC_State_Conversion>:
}

bool ADC_State_Conversion(void)
{
	return ( (ADCSRA & (1<<ADSC)) );
  e2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
}
  e6:	86 fb       	bst	r24, 6
  e8:	88 27       	eor	r24, r24
  ea:	80 f9       	bld	r24, 0
  ec:	08 95       	ret

000000ee <ADC_Select_Channel>:

void ADC_Select_Channel(uint8_t channel)
{
	ADMUX = ( (ADMUX & 0xF0) | (channel & 0x0F) );
  ee:	ec e7       	ldi	r30, 0x7C	; 124
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	90 81       	ld	r25, Z
  f4:	90 7f       	andi	r25, 0xF0	; 240
  f6:	8f 70       	andi	r24, 0x0F	; 15
  f8:	89 2b       	or	r24, r25
  fa:	80 83       	st	Z, r24
  fc:	08 95       	ret

000000fe <AnalogRead>:
}

uint16_t AnalogRead(uint8_t channel)
{
	ADC_Select_Channel(channel); //Seleecion del canal analogico
  fe:	0e 94 77 00 	call	0xee	; 0xee <ADC_Select_Channel>
	ADC_Enable(); //Habilitamos el ADC
 102:	0e 94 5f 00 	call	0xbe	; 0xbe <ADC_Enable>
	ADC_Start_Conversion(); //Iniciamos la conversion
 106:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_Start_Conversion>
	while(ADC_State_Conversion() == true); //Esperar que la conversion se complete
 10a:	0e 94 71 00 	call	0xe2	; 0xe2 <ADC_State_Conversion>
 10e:	81 11       	cpse	r24, r1
 110:	fc cf       	rjmp	.-8      	; 0x10a <AnalogRead+0xc>
	ADC_Disable(); //Deshabilitar el ADC
 112:	0e 94 65 00 	call	0xca	; 0xca <ADC_Disable>
	return (ADC); //Retorno el valor actual de la conversion
 116:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 11a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 11e:	08 95       	ret

00000120 <LCD_AVR_Data_Bus>:
	_delay_ms(2);
	E_OFF;
}
void LCD_AVR_Data_Bus(uint8_t a){
	// 0001
	if (a & 0x01){D4_ON;}
 120:	80 ff       	sbrs	r24, 0
 122:	04 c0       	rjmp	.+8      	; 0x12c <LCD_AVR_Data_Bus+0xc>
 124:	95 b1       	in	r25, 0x05	; 5
 126:	94 60       	ori	r25, 0x04	; 4
 128:	95 b9       	out	0x05, r25	; 5
 12a:	03 c0       	rjmp	.+6      	; 0x132 <LCD_AVR_Data_Bus+0x12>
	else{D4_OFF;}
 12c:	95 b1       	in	r25, 0x05	; 5
 12e:	9b 7f       	andi	r25, 0xFB	; 251
 130:	95 b9       	out	0x05, r25	; 5
	// 0010
	if (a & 0x02){D5_ON;}
 132:	81 ff       	sbrs	r24, 1
 134:	04 c0       	rjmp	.+8      	; 0x13e <LCD_AVR_Data_Bus+0x1e>
 136:	95 b1       	in	r25, 0x05	; 5
 138:	98 60       	ori	r25, 0x08	; 8
 13a:	95 b9       	out	0x05, r25	; 5
 13c:	03 c0       	rjmp	.+6      	; 0x144 <LCD_AVR_Data_Bus+0x24>
	else{D5_OFF;}
 13e:	95 b1       	in	r25, 0x05	; 5
 140:	97 7f       	andi	r25, 0xF7	; 247
 142:	95 b9       	out	0x05, r25	; 5
	// 0100
	if (a & 0x04){D6_ON;}
 144:	82 ff       	sbrs	r24, 2
 146:	04 c0       	rjmp	.+8      	; 0x150 <LCD_AVR_Data_Bus+0x30>
 148:	95 b1       	in	r25, 0x05	; 5
 14a:	90 61       	ori	r25, 0x10	; 16
 14c:	95 b9       	out	0x05, r25	; 5
 14e:	03 c0       	rjmp	.+6      	; 0x156 <LCD_AVR_Data_Bus+0x36>
	else{D6_OFF;}
 150:	95 b1       	in	r25, 0x05	; 5
 152:	9f 7e       	andi	r25, 0xEF	; 239
 154:	95 b9       	out	0x05, r25	; 5
	// 1000
	if (a & 0x08){D7_ON;}
 156:	83 ff       	sbrs	r24, 3
 158:	04 c0       	rjmp	.+8      	; 0x162 <LCD_AVR_Data_Bus+0x42>
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	80 62       	ori	r24, 0x20	; 32
 15e:	85 b9       	out	0x05, r24	; 5
 160:	08 95       	ret
	else{D7_OFF;}
 162:	85 b1       	in	r24, 0x05	; 5
 164:	8f 7d       	andi	r24, 0xDF	; 223
 166:	85 b9       	out	0x05, r24	; 5
 168:	08 95       	ret

0000016a <LCD_AVR_Cmd>:
#include "LCD_avr.h"
#define  F_CPU 8000000UL
#include <util/delay.h>

void LCD_AVR_Cmd(uint8_t a){
	E_OFF;
 16a:	95 b1       	in	r25, 0x05	; 5
 16c:	9e 7f       	andi	r25, 0xFE	; 254
 16e:	95 b9       	out	0x05, r25	; 5
	E_ON;
 170:	95 b1       	in	r25, 0x05	; 5
 172:	91 60       	ori	r25, 0x01	; 1
 174:	95 b9       	out	0x05, r25	; 5
	LCD_AVR_Data_Bus(a)	;
 176:	0e 94 90 00 	call	0x120	; 0x120 <LCD_AVR_Data_Bus>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	8f e9       	ldi	r24, 0x9F	; 159
 17c:	9f e0       	ldi	r25, 0x0F	; 15
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <LCD_AVR_Cmd+0x14>
 182:	00 c0       	rjmp	.+0      	; 0x184 <LCD_AVR_Cmd+0x1a>
 184:	00 00       	nop
	_delay_ms(2);
	E_OFF;
 186:	85 b1       	in	r24, 0x05	; 5
 188:	8e 7f       	andi	r24, 0xFE	; 254
 18a:	85 b9       	out	0x05, r24	; 5
 18c:	08 95       	ret

0000018e <LCD_AVR_Init>:
	if (a & 0x08){D7_ON;}
	else{D7_OFF;}
}
void LCD_AVR_Init(void){
	
	DDRB |= (1<<0) |(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5);
 18e:	84 b1       	in	r24, 0x04	; 4
 190:	8f 63       	ori	r24, 0x3F	; 63
 192:	84 b9       	out	0x04, r24	; 4
	
	LCD_AVR_Cmd(0X03);
 194:	83 e0       	ldi	r24, 0x03	; 3
 196:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X03);
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X03);
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X02);
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X02);
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X08);
 1b2:	88 e0       	ldi	r24, 0x08	; 8
 1b4:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X00);
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X08);
 1be:	88 e0       	ldi	r24, 0x08	; 8
 1c0:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X00);
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X01);
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X00);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_AVR_Cmd>
	LCD_AVR_Cmd(0X0C);
 1d6:	8c e0       	ldi	r24, 0x0C	; 12
 1d8:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_AVR_Cmd>
 1dc:	08 95       	ret

000001de <LCD_AVR_Set_Cursor>:
	
}
void LCD_AVR_Set_Cursor(uint8_t x,Ubicacion y){
 1de:	cf 93       	push	r28
uint8_t m,n;

RS_OFF;
 1e0:	95 b1       	in	r25, 0x05	; 5
 1e2:	9d 7f       	andi	r25, 0xFD	; 253
 1e4:	95 b9       	out	0x05, r25	; 5
switch (y)
 1e6:	61 30       	cpi	r22, 0x01	; 1
 1e8:	c9 f0       	breq	.+50     	; 0x21c <LCD_AVR_Set_Cursor+0x3e>
 1ea:	28 f0       	brcs	.+10     	; 0x1f6 <LCD_AVR_Set_Cursor+0x18>
 1ec:	62 30       	cpi	r22, 0x02	; 2
 1ee:	49 f1       	breq	.+82     	; 0x242 <LCD_AVR_Set_Cursor+0x64>
 1f0:	63 30       	cpi	r22, 0x03	; 3
 1f2:	d1 f1       	breq	.+116    	; 0x268 <LCD_AVR_Set_Cursor+0x8a>
 1f4:	4b c0       	rjmp	.+150    	; 0x28c <LCD_AVR_Set_Cursor+0xae>
{
	case Fila1:
			m=0x80+x;
 1f6:	c0 e8       	ldi	r28, 0x80	; 128
 1f8:	c8 0f       	add	r28, r24
			n=(0x80+x)>>4;
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	80 58       	subi	r24, 0x80	; 128
 1fe:	9f 4f       	sbci	r25, 0xFF	; 255
 200:	95 95       	asr	r25
 202:	87 95       	ror	r24
 204:	95 95       	asr	r25
 206:	87 95       	ror	r24
 208:	95 95       	asr	r25
 20a:	87 95       	ror	r24
 20c:	95 95       	asr	r25
 20e:	87 95       	ror	r24
			LCD_AVR_Cmd(n);
 210:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_AVR_Cmd>
			LCD_AVR_Cmd(m);
 214:	8c 2f       	mov	r24, r28
 216:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_AVR_Cmd>
	break;
 21a:	38 c0       	rjmp	.+112    	; 0x28c <LCD_AVR_Set_Cursor+0xae>
	case Fila2:
			m=0xC0+x;
 21c:	c0 ec       	ldi	r28, 0xC0	; 192
 21e:	c8 0f       	add	r28, r24
			n=(0XC0+x)>>4;
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	80 54       	subi	r24, 0x40	; 64
 224:	9f 4f       	sbci	r25, 0xFF	; 255
 226:	95 95       	asr	r25
 228:	87 95       	ror	r24
 22a:	95 95       	asr	r25
 22c:	87 95       	ror	r24
 22e:	95 95       	asr	r25
 230:	87 95       	ror	r24
 232:	95 95       	asr	r25
 234:	87 95       	ror	r24
			LCD_AVR_Cmd(n);
 236:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_AVR_Cmd>
			LCD_AVR_Cmd(m);
 23a:	8c 2f       	mov	r24, r28
 23c:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_AVR_Cmd>
	break;
 240:	25 c0       	rjmp	.+74     	; 0x28c <LCD_AVR_Set_Cursor+0xae>
	case Fila3:
			m=0x94+x;
 242:	c4 e9       	ldi	r28, 0x94	; 148
 244:	c8 0f       	add	r28, r24
			n=(0x94+x)>>4;
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	8c 56       	subi	r24, 0x6C	; 108
 24a:	9f 4f       	sbci	r25, 0xFF	; 255
 24c:	95 95       	asr	r25
 24e:	87 95       	ror	r24
 250:	95 95       	asr	r25
 252:	87 95       	ror	r24
 254:	95 95       	asr	r25
 256:	87 95       	ror	r24
 258:	95 95       	asr	r25
 25a:	87 95       	ror	r24
			LCD_AVR_Cmd(n);
 25c:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_AVR_Cmd>
			LCD_AVR_Cmd(m);
 260:	8c 2f       	mov	r24, r28
 262:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_AVR_Cmd>
	break;
 266:	12 c0       	rjmp	.+36     	; 0x28c <LCD_AVR_Set_Cursor+0xae>
	case Fila4:
			m=0xD4+x;
 268:	c4 ed       	ldi	r28, 0xD4	; 212
 26a:	c8 0f       	add	r28, r24
			n=(0xD4+x)>>4;
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	8c 52       	subi	r24, 0x2C	; 44
 270:	9f 4f       	sbci	r25, 0xFF	; 255
 272:	95 95       	asr	r25
 274:	87 95       	ror	r24
 276:	95 95       	asr	r25
 278:	87 95       	ror	r24
 27a:	95 95       	asr	r25
 27c:	87 95       	ror	r24
 27e:	95 95       	asr	r25
 280:	87 95       	ror	r24
			LCD_AVR_Cmd(n);
 282:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_AVR_Cmd>
			LCD_AVR_Cmd(m);
 286:	8c 2f       	mov	r24, r28
 288:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_AVR_Cmd>
	break;
}
	
}
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <LCD_AVR_Print_Char>:
void LCD_AVR_Print_Char(char c){
 290:	cf 93       	push	r28
 292:	c8 2f       	mov	r28, r24
		uint8_t m,n;
		m=c>>4;
		n=c;
		RS_ON;
 294:	85 b1       	in	r24, 0x05	; 5
 296:	82 60       	ori	r24, 0x02	; 2
 298:	85 b9       	out	0x05, r24	; 5
		LCD_AVR_Cmd(m);
 29a:	8c 2f       	mov	r24, r28
 29c:	82 95       	swap	r24
 29e:	8f 70       	andi	r24, 0x0F	; 15
 2a0:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_AVR_Cmd>
		LCD_AVR_Cmd(n);
 2a4:	8c 2f       	mov	r24, r28
 2a6:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_AVR_Cmd>
}
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <LCD_AVR_Print_String>:
void LCD_AVR_Print_String(char *c){
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	ec 01       	movw	r28, r24
	
	char *ptr;
	ptr = c;
	while(*ptr)
 2b4:	03 c0       	rjmp	.+6      	; 0x2bc <LCD_AVR_Print_String+0xe>
			LCD_AVR_Print_Char(*ptr++);
 2b6:	21 96       	adiw	r28, 0x01	; 1
 2b8:	0e 94 48 01 	call	0x290	; 0x290 <LCD_AVR_Print_Char>
}
void LCD_AVR_Print_String(char *c){
	
	char *ptr;
	ptr = c;
	while(*ptr)
 2bc:	88 81       	ld	r24, Y
 2be:	81 11       	cpse	r24, r1
 2c0:	fa cf       	rjmp	.-12     	; 0x2b6 <LCD_AVR_Print_String+0x8>
			LCD_AVR_Print_Char(*ptr++);
	
}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <main>:
float Pot0,Pot1,Pot2,Pot3,Pot4,Pot5;
char Str_Pot0[20],Str_Pot1[20],Str_Pot2[20],Str_Pot3[20],Str_Pot4[20],Str_Pot5[20];

int main(void)

{		ADC_Avr_Init();
 2c8:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Avr_Init>
		LCD_AVR_Init();
 2cc:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_AVR_Init>
	
	//Ubicamos los Indicadores
	 LCD_AVR_Set_Cursor(0,Fila1);
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_AVR_Set_Cursor>
	 LCD_AVR_Print_String("Pot0:");
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_AVR_Print_String>
	 LCD_AVR_Set_Cursor(0,Fila2);
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_AVR_Set_Cursor>
	 LCD_AVR_Print_String("Pot1:");
 2e8:	86 e0       	ldi	r24, 0x06	; 6
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_AVR_Print_String>
	 LCD_AVR_Set_Cursor(0,Fila3);
 2f0:	62 e0       	ldi	r22, 0x02	; 2
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_AVR_Set_Cursor>
	 LCD_AVR_Print_String("Pot2:");
 2f8:	8c e0       	ldi	r24, 0x0C	; 12
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_AVR_Print_String>
	 LCD_AVR_Set_Cursor(0,Fila4);
 300:	63 e0       	ldi	r22, 0x03	; 3
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_AVR_Set_Cursor>
	 LCD_AVR_Print_String("Pot3:");
 308:	82 e1       	ldi	r24, 0x12	; 18
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_AVR_Print_String>
	 LCD_AVR_Set_Cursor(10,Fila1);
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	8a e0       	ldi	r24, 0x0A	; 10
 314:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_AVR_Set_Cursor>
	 LCD_AVR_Print_String("Pot4:");
 318:	88 e1       	ldi	r24, 0x18	; 24
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_AVR_Print_String>
	 LCD_AVR_Set_Cursor(10,Fila2);
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	8a e0       	ldi	r24, 0x0A	; 10
 324:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_AVR_Set_Cursor>
	 LCD_AVR_Print_String("Pot5:");
 328:	8e e1       	ldi	r24, 0x1E	; 30
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_AVR_Print_String>
 
 
	 for (;;)
	 {
		 //Inicamos la conversion
		 Pot0 = (((float)AnalogRead(0))*(VREF_AVR/Resolucion_AVR));
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 7f 00 	call	0xfe	; 0xfe <AnalogRead>
 336:	bc 01       	movw	r22, r24
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__floatunsisf>
 340:	2a e0       	ldi	r18, 0x0A	; 10
 342:	38 e2       	ldi	r19, 0x28	; 40
 344:	40 ea       	ldi	r20, 0xA0	; 160
 346:	5b e3       	ldi	r21, 0x3B	; 59
 348:	0e 94 14 03 	call	0x628	; 0x628 <__mulsf3>
 34c:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <Pot0>
 350:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <Pot0+0x1>
 354:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <Pot0+0x2>
 358:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <Pot0+0x3>
		 Pot1 = (((float)AnalogRead(1))*(VREF_AVR/Resolucion_AVR));
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 7f 00 	call	0xfe	; 0xfe <AnalogRead>
 362:	bc 01       	movw	r22, r24
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__floatunsisf>
 36c:	2a e0       	ldi	r18, 0x0A	; 10
 36e:	38 e2       	ldi	r19, 0x28	; 40
 370:	40 ea       	ldi	r20, 0xA0	; 160
 372:	5b e3       	ldi	r21, 0x3B	; 59
 374:	0e 94 14 03 	call	0x628	; 0x628 <__mulsf3>
 378:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <Pot1>
 37c:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <Pot1+0x1>
 380:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <Pot1+0x2>
 384:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <Pot1+0x3>
		 Pot2 = (((float)AnalogRead(2))*(VREF_AVR/Resolucion_AVR));
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	0e 94 7f 00 	call	0xfe	; 0xfe <AnalogRead>
 38e:	bc 01       	movw	r22, r24
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__floatunsisf>
 398:	2a e0       	ldi	r18, 0x0A	; 10
 39a:	38 e2       	ldi	r19, 0x28	; 40
 39c:	40 ea       	ldi	r20, 0xA0	; 160
 39e:	5b e3       	ldi	r21, 0x3B	; 59
 3a0:	0e 94 14 03 	call	0x628	; 0x628 <__mulsf3>
 3a4:	60 93 52 01 	sts	0x0152, r22	; 0x800152 <Pot2>
 3a8:	70 93 53 01 	sts	0x0153, r23	; 0x800153 <Pot2+0x1>
 3ac:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <Pot2+0x2>
 3b0:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <Pot2+0x3>
		 Pot3 = (((float)AnalogRead(3))*(VREF_AVR/Resolucion_AVR));
 3b4:	83 e0       	ldi	r24, 0x03	; 3
 3b6:	0e 94 7f 00 	call	0xfe	; 0xfe <AnalogRead>
 3ba:	bc 01       	movw	r22, r24
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__floatunsisf>
 3c4:	2a e0       	ldi	r18, 0x0A	; 10
 3c6:	38 e2       	ldi	r19, 0x28	; 40
 3c8:	40 ea       	ldi	r20, 0xA0	; 160
 3ca:	5b e3       	ldi	r21, 0x3B	; 59
 3cc:	0e 94 14 03 	call	0x628	; 0x628 <__mulsf3>
 3d0:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <Pot3>
 3d4:	70 93 57 01 	sts	0x0157, r23	; 0x800157 <Pot3+0x1>
 3d8:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <Pot3+0x2>
 3dc:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <Pot3+0x3>
		 Pot4 = (((float)AnalogRead(4))*(VREF_AVR/Resolucion_AVR));
 3e0:	84 e0       	ldi	r24, 0x04	; 4
 3e2:	0e 94 7f 00 	call	0xfe	; 0xfe <AnalogRead>
 3e6:	bc 01       	movw	r22, r24
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__floatunsisf>
 3f0:	2a e0       	ldi	r18, 0x0A	; 10
 3f2:	38 e2       	ldi	r19, 0x28	; 40
 3f4:	40 ea       	ldi	r20, 0xA0	; 160
 3f6:	5b e3       	ldi	r21, 0x3B	; 59
 3f8:	0e 94 14 03 	call	0x628	; 0x628 <__mulsf3>
 3fc:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <Pot4>
 400:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <Pot4+0x1>
 404:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <Pot4+0x2>
 408:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <Pot4+0x3>
		 Pot5 = (((float)AnalogRead(5))*(VREF_AVR/Resolucion_AVR));
 40c:	85 e0       	ldi	r24, 0x05	; 5
 40e:	0e 94 7f 00 	call	0xfe	; 0xfe <AnalogRead>
 412:	bc 01       	movw	r22, r24
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__floatunsisf>
 41c:	2a e0       	ldi	r18, 0x0A	; 10
 41e:	38 e2       	ldi	r19, 0x28	; 40
 420:	40 ea       	ldi	r20, 0xA0	; 160
 422:	5b e3       	ldi	r21, 0x3B	; 59
 424:	0e 94 14 03 	call	0x628	; 0x628 <__mulsf3>
 428:	60 93 82 01 	sts	0x0182, r22	; 0x800182 <Pot5>
 42c:	70 93 83 01 	sts	0x0183, r23	; 0x800183 <Pot5+0x1>
 430:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <Pot5+0x2>
 434:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <Pot5+0x3>
		 
		 //Convertimos uint a string
		 
		 sprintf((char*)Str_Pot0,"%0.2f",Pot0);
 438:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <Pot0+0x3>
 43c:	8f 93       	push	r24
 43e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <Pot0+0x2>
 442:	8f 93       	push	r24
 444:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <Pot0+0x1>
 448:	8f 93       	push	r24
 44a:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <Pot0>
 44e:	8f 93       	push	r24
 450:	c4 e2       	ldi	r28, 0x24	; 36
 452:	d1 e0       	ldi	r29, 0x01	; 1
 454:	df 93       	push	r29
 456:	cf 93       	push	r28
 458:	8a e5       	ldi	r24, 0x5A	; 90
 45a:	91 e0       	ldi	r25, 0x01	; 1
 45c:	9f 93       	push	r25
 45e:	8f 93       	push	r24
 460:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <sprintf>
		 sprintf((char*)Str_Pot1,"%0.2f",Pot1);
 464:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Pot1+0x3>
 468:	8f 93       	push	r24
 46a:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <Pot1+0x2>
 46e:	8f 93       	push	r24
 470:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Pot1+0x1>
 474:	8f 93       	push	r24
 476:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <Pot1>
 47a:	8f 93       	push	r24
 47c:	df 93       	push	r29
 47e:	cf 93       	push	r28
 480:	82 ea       	ldi	r24, 0xA2	; 162
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	9f 93       	push	r25
 486:	8f 93       	push	r24
 488:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <sprintf>
		 sprintf((char*)Str_Pot2,"%0.2f",Pot2);
 48c:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <Pot2+0x3>
 490:	8f 93       	push	r24
 492:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <Pot2+0x2>
 496:	8f 93       	push	r24
 498:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Pot2+0x1>
 49c:	8f 93       	push	r24
 49e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <Pot2>
 4a2:	8f 93       	push	r24
 4a4:	df 93       	push	r29
 4a6:	cf 93       	push	r28
 4a8:	8e e3       	ldi	r24, 0x3E	; 62
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	9f 93       	push	r25
 4ae:	8f 93       	push	r24
 4b0:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <sprintf>
		 sprintf((char*)Str_Pot3,"%0.2f",Pot3);
 4b4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <Pot3+0x3>
 4b8:	8f 93       	push	r24
 4ba:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <Pot3+0x2>
 4be:	8f 93       	push	r24
 4c0:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Pot3+0x1>
 4c4:	8f 93       	push	r24
 4c6:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <Pot3>
 4ca:	8f 93       	push	r24
 4cc:	df 93       	push	r29
 4ce:	cf 93       	push	r28
 4d0:	86 e8       	ldi	r24, 0x86	; 134
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	9f 93       	push	r25
 4d6:	8f 93       	push	r24
 4d8:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <sprintf>
		 sprintf((char*)Str_Pot4,"%0.2f",Pot4);
 4dc:	8d b7       	in	r24, 0x3d	; 61
 4de:	9e b7       	in	r25, 0x3e	; 62
 4e0:	80 96       	adiw	r24, 0x20	; 32
 4e2:	0f b6       	in	r0, 0x3f	; 63
 4e4:	f8 94       	cli
 4e6:	9e bf       	out	0x3e, r25	; 62
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	8d bf       	out	0x3d, r24	; 61
 4ec:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <Pot4+0x3>
 4f0:	8f 93       	push	r24
 4f2:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <Pot4+0x2>
 4f6:	8f 93       	push	r24
 4f8:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <Pot4+0x1>
 4fc:	8f 93       	push	r24
 4fe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <Pot4>
 502:	8f 93       	push	r24
 504:	df 93       	push	r29
 506:	cf 93       	push	r28
 508:	8a e2       	ldi	r24, 0x2A	; 42
 50a:	91 e0       	ldi	r25, 0x01	; 1
 50c:	9f 93       	push	r25
 50e:	8f 93       	push	r24
 510:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <sprintf>
		 sprintf((char*)Str_Pot5,"%0.2f",Pot5);
 514:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <Pot5+0x3>
 518:	8f 93       	push	r24
 51a:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <Pot5+0x2>
 51e:	8f 93       	push	r24
 520:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <Pot5+0x1>
 524:	8f 93       	push	r24
 526:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <Pot5>
 52a:	8f 93       	push	r24
 52c:	df 93       	push	r29
 52e:	cf 93       	push	r28
 530:	8e e6       	ldi	r24, 0x6E	; 110
 532:	91 e0       	ldi	r25, 0x01	; 1
 534:	9f 93       	push	r25
 536:	8f 93       	push	r24
 538:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <sprintf>
		 
		 //Escribimos en la LCD
		 
		  LCD_AVR_Set_Cursor(5,Fila1);
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	85 e0       	ldi	r24, 0x05	; 5
 540:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_AVR_Set_Cursor>
		  LCD_AVR_Print_String(Str_Pot0);
 544:	8a e5       	ldi	r24, 0x5A	; 90
 546:	91 e0       	ldi	r25, 0x01	; 1
 548:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_AVR_Print_String>
		  LCD_AVR_Set_Cursor(5,Fila2);
 54c:	61 e0       	ldi	r22, 0x01	; 1
 54e:	85 e0       	ldi	r24, 0x05	; 5
 550:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_AVR_Set_Cursor>
		  LCD_AVR_Print_String(Str_Pot1);
 554:	82 ea       	ldi	r24, 0xA2	; 162
 556:	91 e0       	ldi	r25, 0x01	; 1
 558:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_AVR_Print_String>
		  LCD_AVR_Set_Cursor(5,Fila3);
 55c:	62 e0       	ldi	r22, 0x02	; 2
 55e:	85 e0       	ldi	r24, 0x05	; 5
 560:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_AVR_Set_Cursor>
		  LCD_AVR_Print_String(Str_Pot2);
 564:	8e e3       	ldi	r24, 0x3E	; 62
 566:	91 e0       	ldi	r25, 0x01	; 1
 568:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_AVR_Print_String>
		  LCD_AVR_Set_Cursor(5,Fila4);
 56c:	63 e0       	ldi	r22, 0x03	; 3
 56e:	85 e0       	ldi	r24, 0x05	; 5
 570:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_AVR_Set_Cursor>
		  LCD_AVR_Print_String(Str_Pot3);
 574:	86 e8       	ldi	r24, 0x86	; 134
 576:	91 e0       	ldi	r25, 0x01	; 1
 578:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_AVR_Print_String>
		  LCD_AVR_Set_Cursor(16,Fila1);
 57c:	60 e0       	ldi	r22, 0x00	; 0
 57e:	80 e1       	ldi	r24, 0x10	; 16
 580:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_AVR_Set_Cursor>
		  LCD_AVR_Print_String(Str_Pot4);
 584:	8a e2       	ldi	r24, 0x2A	; 42
 586:	91 e0       	ldi	r25, 0x01	; 1
 588:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_AVR_Print_String>
		  LCD_AVR_Set_Cursor(16,Fila2);
 58c:	61 e0       	ldi	r22, 0x01	; 1
 58e:	80 e1       	ldi	r24, 0x10	; 16
 590:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_AVR_Set_Cursor>
		  LCD_AVR_Print_String(Str_Pot5);
 594:	8e e6       	ldi	r24, 0x6E	; 110
 596:	91 e0       	ldi	r25, 0x01	; 1
 598:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_AVR_Print_String>
 59c:	8d b7       	in	r24, 0x3d	; 61
 59e:	9e b7       	in	r25, 0x3e	; 62
 5a0:	40 96       	adiw	r24, 0x10	; 16
 5a2:	0f b6       	in	r0, 0x3f	; 63
 5a4:	f8 94       	cli
 5a6:	9e bf       	out	0x3e, r25	; 62
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	8d bf       	out	0x3d, r24	; 61
 5ac:	c1 ce       	rjmp	.-638    	; 0x330 <main+0x68>

000005ae <__floatunsisf>:
 5ae:	e8 94       	clt
 5b0:	09 c0       	rjmp	.+18     	; 0x5c4 <__floatsisf+0x12>

000005b2 <__floatsisf>:
 5b2:	97 fb       	bst	r25, 7
 5b4:	3e f4       	brtc	.+14     	; 0x5c4 <__floatsisf+0x12>
 5b6:	90 95       	com	r25
 5b8:	80 95       	com	r24
 5ba:	70 95       	com	r23
 5bc:	61 95       	neg	r22
 5be:	7f 4f       	sbci	r23, 0xFF	; 255
 5c0:	8f 4f       	sbci	r24, 0xFF	; 255
 5c2:	9f 4f       	sbci	r25, 0xFF	; 255
 5c4:	99 23       	and	r25, r25
 5c6:	a9 f0       	breq	.+42     	; 0x5f2 <__floatsisf+0x40>
 5c8:	f9 2f       	mov	r31, r25
 5ca:	96 e9       	ldi	r25, 0x96	; 150
 5cc:	bb 27       	eor	r27, r27
 5ce:	93 95       	inc	r25
 5d0:	f6 95       	lsr	r31
 5d2:	87 95       	ror	r24
 5d4:	77 95       	ror	r23
 5d6:	67 95       	ror	r22
 5d8:	b7 95       	ror	r27
 5da:	f1 11       	cpse	r31, r1
 5dc:	f8 cf       	rjmp	.-16     	; 0x5ce <__floatsisf+0x1c>
 5de:	fa f4       	brpl	.+62     	; 0x61e <__floatsisf+0x6c>
 5e0:	bb 0f       	add	r27, r27
 5e2:	11 f4       	brne	.+4      	; 0x5e8 <__floatsisf+0x36>
 5e4:	60 ff       	sbrs	r22, 0
 5e6:	1b c0       	rjmp	.+54     	; 0x61e <__floatsisf+0x6c>
 5e8:	6f 5f       	subi	r22, 0xFF	; 255
 5ea:	7f 4f       	sbci	r23, 0xFF	; 255
 5ec:	8f 4f       	sbci	r24, 0xFF	; 255
 5ee:	9f 4f       	sbci	r25, 0xFF	; 255
 5f0:	16 c0       	rjmp	.+44     	; 0x61e <__floatsisf+0x6c>
 5f2:	88 23       	and	r24, r24
 5f4:	11 f0       	breq	.+4      	; 0x5fa <__floatsisf+0x48>
 5f6:	96 e9       	ldi	r25, 0x96	; 150
 5f8:	11 c0       	rjmp	.+34     	; 0x61c <__floatsisf+0x6a>
 5fa:	77 23       	and	r23, r23
 5fc:	21 f0       	breq	.+8      	; 0x606 <__floatsisf+0x54>
 5fe:	9e e8       	ldi	r25, 0x8E	; 142
 600:	87 2f       	mov	r24, r23
 602:	76 2f       	mov	r23, r22
 604:	05 c0       	rjmp	.+10     	; 0x610 <__floatsisf+0x5e>
 606:	66 23       	and	r22, r22
 608:	71 f0       	breq	.+28     	; 0x626 <__floatsisf+0x74>
 60a:	96 e8       	ldi	r25, 0x86	; 134
 60c:	86 2f       	mov	r24, r22
 60e:	70 e0       	ldi	r23, 0x00	; 0
 610:	60 e0       	ldi	r22, 0x00	; 0
 612:	2a f0       	brmi	.+10     	; 0x61e <__floatsisf+0x6c>
 614:	9a 95       	dec	r25
 616:	66 0f       	add	r22, r22
 618:	77 1f       	adc	r23, r23
 61a:	88 1f       	adc	r24, r24
 61c:	da f7       	brpl	.-10     	; 0x614 <__floatsisf+0x62>
 61e:	88 0f       	add	r24, r24
 620:	96 95       	lsr	r25
 622:	87 95       	ror	r24
 624:	97 f9       	bld	r25, 7
 626:	08 95       	ret

00000628 <__mulsf3>:
 628:	0e 94 27 03 	call	0x64e	; 0x64e <__mulsf3x>
 62c:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_round>
 630:	0e 94 8a 03 	call	0x714	; 0x714 <__fp_pscA>
 634:	38 f0       	brcs	.+14     	; 0x644 <__mulsf3+0x1c>
 636:	0e 94 91 03 	call	0x722	; 0x722 <__fp_pscB>
 63a:	20 f0       	brcs	.+8      	; 0x644 <__mulsf3+0x1c>
 63c:	95 23       	and	r25, r21
 63e:	11 f0       	breq	.+4      	; 0x644 <__mulsf3+0x1c>
 640:	0c 94 81 03 	jmp	0x702	; 0x702 <__fp_inf>
 644:	0c 94 87 03 	jmp	0x70e	; 0x70e <__fp_nan>
 648:	11 24       	eor	r1, r1
 64a:	0c 94 cc 03 	jmp	0x798	; 0x798 <__fp_szero>

0000064e <__mulsf3x>:
 64e:	0e 94 a9 03 	call	0x752	; 0x752 <__fp_split3>
 652:	70 f3       	brcs	.-36     	; 0x630 <__mulsf3+0x8>

00000654 <__mulsf3_pse>:
 654:	95 9f       	mul	r25, r21
 656:	c1 f3       	breq	.-16     	; 0x648 <__mulsf3+0x20>
 658:	95 0f       	add	r25, r21
 65a:	50 e0       	ldi	r21, 0x00	; 0
 65c:	55 1f       	adc	r21, r21
 65e:	62 9f       	mul	r22, r18
 660:	f0 01       	movw	r30, r0
 662:	72 9f       	mul	r23, r18
 664:	bb 27       	eor	r27, r27
 666:	f0 0d       	add	r31, r0
 668:	b1 1d       	adc	r27, r1
 66a:	63 9f       	mul	r22, r19
 66c:	aa 27       	eor	r26, r26
 66e:	f0 0d       	add	r31, r0
 670:	b1 1d       	adc	r27, r1
 672:	aa 1f       	adc	r26, r26
 674:	64 9f       	mul	r22, r20
 676:	66 27       	eor	r22, r22
 678:	b0 0d       	add	r27, r0
 67a:	a1 1d       	adc	r26, r1
 67c:	66 1f       	adc	r22, r22
 67e:	82 9f       	mul	r24, r18
 680:	22 27       	eor	r18, r18
 682:	b0 0d       	add	r27, r0
 684:	a1 1d       	adc	r26, r1
 686:	62 1f       	adc	r22, r18
 688:	73 9f       	mul	r23, r19
 68a:	b0 0d       	add	r27, r0
 68c:	a1 1d       	adc	r26, r1
 68e:	62 1f       	adc	r22, r18
 690:	83 9f       	mul	r24, r19
 692:	a0 0d       	add	r26, r0
 694:	61 1d       	adc	r22, r1
 696:	22 1f       	adc	r18, r18
 698:	74 9f       	mul	r23, r20
 69a:	33 27       	eor	r19, r19
 69c:	a0 0d       	add	r26, r0
 69e:	61 1d       	adc	r22, r1
 6a0:	23 1f       	adc	r18, r19
 6a2:	84 9f       	mul	r24, r20
 6a4:	60 0d       	add	r22, r0
 6a6:	21 1d       	adc	r18, r1
 6a8:	82 2f       	mov	r24, r18
 6aa:	76 2f       	mov	r23, r22
 6ac:	6a 2f       	mov	r22, r26
 6ae:	11 24       	eor	r1, r1
 6b0:	9f 57       	subi	r25, 0x7F	; 127
 6b2:	50 40       	sbci	r21, 0x00	; 0
 6b4:	9a f0       	brmi	.+38     	; 0x6dc <__mulsf3_pse+0x88>
 6b6:	f1 f0       	breq	.+60     	; 0x6f4 <__mulsf3_pse+0xa0>
 6b8:	88 23       	and	r24, r24
 6ba:	4a f0       	brmi	.+18     	; 0x6ce <__mulsf3_pse+0x7a>
 6bc:	ee 0f       	add	r30, r30
 6be:	ff 1f       	adc	r31, r31
 6c0:	bb 1f       	adc	r27, r27
 6c2:	66 1f       	adc	r22, r22
 6c4:	77 1f       	adc	r23, r23
 6c6:	88 1f       	adc	r24, r24
 6c8:	91 50       	subi	r25, 0x01	; 1
 6ca:	50 40       	sbci	r21, 0x00	; 0
 6cc:	a9 f7       	brne	.-22     	; 0x6b8 <__mulsf3_pse+0x64>
 6ce:	9e 3f       	cpi	r25, 0xFE	; 254
 6d0:	51 05       	cpc	r21, r1
 6d2:	80 f0       	brcs	.+32     	; 0x6f4 <__mulsf3_pse+0xa0>
 6d4:	0c 94 81 03 	jmp	0x702	; 0x702 <__fp_inf>
 6d8:	0c 94 cc 03 	jmp	0x798	; 0x798 <__fp_szero>
 6dc:	5f 3f       	cpi	r21, 0xFF	; 255
 6de:	e4 f3       	brlt	.-8      	; 0x6d8 <__mulsf3_pse+0x84>
 6e0:	98 3e       	cpi	r25, 0xE8	; 232
 6e2:	d4 f3       	brlt	.-12     	; 0x6d8 <__mulsf3_pse+0x84>
 6e4:	86 95       	lsr	r24
 6e6:	77 95       	ror	r23
 6e8:	67 95       	ror	r22
 6ea:	b7 95       	ror	r27
 6ec:	f7 95       	ror	r31
 6ee:	e7 95       	ror	r30
 6f0:	9f 5f       	subi	r25, 0xFF	; 255
 6f2:	c1 f7       	brne	.-16     	; 0x6e4 <__mulsf3_pse+0x90>
 6f4:	fe 2b       	or	r31, r30
 6f6:	88 0f       	add	r24, r24
 6f8:	91 1d       	adc	r25, r1
 6fa:	96 95       	lsr	r25
 6fc:	87 95       	ror	r24
 6fe:	97 f9       	bld	r25, 7
 700:	08 95       	ret

00000702 <__fp_inf>:
 702:	97 f9       	bld	r25, 7
 704:	9f 67       	ori	r25, 0x7F	; 127
 706:	80 e8       	ldi	r24, 0x80	; 128
 708:	70 e0       	ldi	r23, 0x00	; 0
 70a:	60 e0       	ldi	r22, 0x00	; 0
 70c:	08 95       	ret

0000070e <__fp_nan>:
 70e:	9f ef       	ldi	r25, 0xFF	; 255
 710:	80 ec       	ldi	r24, 0xC0	; 192
 712:	08 95       	ret

00000714 <__fp_pscA>:
 714:	00 24       	eor	r0, r0
 716:	0a 94       	dec	r0
 718:	16 16       	cp	r1, r22
 71a:	17 06       	cpc	r1, r23
 71c:	18 06       	cpc	r1, r24
 71e:	09 06       	cpc	r0, r25
 720:	08 95       	ret

00000722 <__fp_pscB>:
 722:	00 24       	eor	r0, r0
 724:	0a 94       	dec	r0
 726:	12 16       	cp	r1, r18
 728:	13 06       	cpc	r1, r19
 72a:	14 06       	cpc	r1, r20
 72c:	05 06       	cpc	r0, r21
 72e:	08 95       	ret

00000730 <__fp_round>:
 730:	09 2e       	mov	r0, r25
 732:	03 94       	inc	r0
 734:	00 0c       	add	r0, r0
 736:	11 f4       	brne	.+4      	; 0x73c <__fp_round+0xc>
 738:	88 23       	and	r24, r24
 73a:	52 f0       	brmi	.+20     	; 0x750 <__fp_round+0x20>
 73c:	bb 0f       	add	r27, r27
 73e:	40 f4       	brcc	.+16     	; 0x750 <__fp_round+0x20>
 740:	bf 2b       	or	r27, r31
 742:	11 f4       	brne	.+4      	; 0x748 <__fp_round+0x18>
 744:	60 ff       	sbrs	r22, 0
 746:	04 c0       	rjmp	.+8      	; 0x750 <__fp_round+0x20>
 748:	6f 5f       	subi	r22, 0xFF	; 255
 74a:	7f 4f       	sbci	r23, 0xFF	; 255
 74c:	8f 4f       	sbci	r24, 0xFF	; 255
 74e:	9f 4f       	sbci	r25, 0xFF	; 255
 750:	08 95       	ret

00000752 <__fp_split3>:
 752:	57 fd       	sbrc	r21, 7
 754:	90 58       	subi	r25, 0x80	; 128
 756:	44 0f       	add	r20, r20
 758:	55 1f       	adc	r21, r21
 75a:	59 f0       	breq	.+22     	; 0x772 <__fp_splitA+0x10>
 75c:	5f 3f       	cpi	r21, 0xFF	; 255
 75e:	71 f0       	breq	.+28     	; 0x77c <__fp_splitA+0x1a>
 760:	47 95       	ror	r20

00000762 <__fp_splitA>:
 762:	88 0f       	add	r24, r24
 764:	97 fb       	bst	r25, 7
 766:	99 1f       	adc	r25, r25
 768:	61 f0       	breq	.+24     	; 0x782 <__fp_splitA+0x20>
 76a:	9f 3f       	cpi	r25, 0xFF	; 255
 76c:	79 f0       	breq	.+30     	; 0x78c <__fp_splitA+0x2a>
 76e:	87 95       	ror	r24
 770:	08 95       	ret
 772:	12 16       	cp	r1, r18
 774:	13 06       	cpc	r1, r19
 776:	14 06       	cpc	r1, r20
 778:	55 1f       	adc	r21, r21
 77a:	f2 cf       	rjmp	.-28     	; 0x760 <__fp_split3+0xe>
 77c:	46 95       	lsr	r20
 77e:	f1 df       	rcall	.-30     	; 0x762 <__fp_splitA>
 780:	08 c0       	rjmp	.+16     	; 0x792 <__fp_splitA+0x30>
 782:	16 16       	cp	r1, r22
 784:	17 06       	cpc	r1, r23
 786:	18 06       	cpc	r1, r24
 788:	99 1f       	adc	r25, r25
 78a:	f1 cf       	rjmp	.-30     	; 0x76e <__fp_splitA+0xc>
 78c:	86 95       	lsr	r24
 78e:	71 05       	cpc	r23, r1
 790:	61 05       	cpc	r22, r1
 792:	08 94       	sec
 794:	08 95       	ret

00000796 <__fp_zero>:
 796:	e8 94       	clt

00000798 <__fp_szero>:
 798:	bb 27       	eor	r27, r27
 79a:	66 27       	eor	r22, r22
 79c:	77 27       	eor	r23, r23
 79e:	cb 01       	movw	r24, r22
 7a0:	97 f9       	bld	r25, 7
 7a2:	08 95       	ret

000007a4 <sprintf>:
 7a4:	ae e0       	ldi	r26, 0x0E	; 14
 7a6:	b0 e0       	ldi	r27, 0x00	; 0
 7a8:	e8 ed       	ldi	r30, 0xD8	; 216
 7aa:	f3 e0       	ldi	r31, 0x03	; 3
 7ac:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__prologue_saves__+0x1c>
 7b0:	0d 89       	ldd	r16, Y+21	; 0x15
 7b2:	1e 89       	ldd	r17, Y+22	; 0x16
 7b4:	86 e0       	ldi	r24, 0x06	; 6
 7b6:	8c 83       	std	Y+4, r24	; 0x04
 7b8:	1a 83       	std	Y+2, r17	; 0x02
 7ba:	09 83       	std	Y+1, r16	; 0x01
 7bc:	8f ef       	ldi	r24, 0xFF	; 255
 7be:	9f e7       	ldi	r25, 0x7F	; 127
 7c0:	9e 83       	std	Y+6, r25	; 0x06
 7c2:	8d 83       	std	Y+5, r24	; 0x05
 7c4:	ae 01       	movw	r20, r28
 7c6:	47 5e       	subi	r20, 0xE7	; 231
 7c8:	5f 4f       	sbci	r21, 0xFF	; 255
 7ca:	6f 89       	ldd	r22, Y+23	; 0x17
 7cc:	78 8d       	ldd	r23, Y+24	; 0x18
 7ce:	ce 01       	movw	r24, r28
 7d0:	01 96       	adiw	r24, 0x01	; 1
 7d2:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <vfprintf>
 7d6:	ef 81       	ldd	r30, Y+7	; 0x07
 7d8:	f8 85       	ldd	r31, Y+8	; 0x08
 7da:	e0 0f       	add	r30, r16
 7dc:	f1 1f       	adc	r31, r17
 7de:	10 82       	st	Z, r1
 7e0:	2e 96       	adiw	r28, 0x0e	; 14
 7e2:	e4 e0       	ldi	r30, 0x04	; 4
 7e4:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__epilogue_restores__+0x1c>

000007e8 <vfprintf>:
 7e8:	ab e0       	ldi	r26, 0x0B	; 11
 7ea:	b0 e0       	ldi	r27, 0x00	; 0
 7ec:	ea ef       	ldi	r30, 0xFA	; 250
 7ee:	f3 e0       	ldi	r31, 0x03	; 3
 7f0:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <__prologue_saves__>
 7f4:	6c 01       	movw	r12, r24
 7f6:	7b 01       	movw	r14, r22
 7f8:	8a 01       	movw	r16, r20
 7fa:	fc 01       	movw	r30, r24
 7fc:	17 82       	std	Z+7, r1	; 0x07
 7fe:	16 82       	std	Z+6, r1	; 0x06
 800:	83 81       	ldd	r24, Z+3	; 0x03
 802:	81 ff       	sbrs	r24, 1
 804:	cc c1       	rjmp	.+920    	; 0xb9e <__stack+0x29f>
 806:	ce 01       	movw	r24, r28
 808:	01 96       	adiw	r24, 0x01	; 1
 80a:	3c 01       	movw	r6, r24
 80c:	f6 01       	movw	r30, r12
 80e:	93 81       	ldd	r25, Z+3	; 0x03
 810:	f7 01       	movw	r30, r14
 812:	93 fd       	sbrc	r25, 3
 814:	85 91       	lpm	r24, Z+
 816:	93 ff       	sbrs	r25, 3
 818:	81 91       	ld	r24, Z+
 81a:	7f 01       	movw	r14, r30
 81c:	88 23       	and	r24, r24
 81e:	09 f4       	brne	.+2      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 820:	ba c1       	rjmp	.+884    	; 0xb96 <__stack+0x297>
 822:	85 32       	cpi	r24, 0x25	; 37
 824:	39 f4       	brne	.+14     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 826:	93 fd       	sbrc	r25, 3
 828:	85 91       	lpm	r24, Z+
 82a:	93 ff       	sbrs	r25, 3
 82c:	81 91       	ld	r24, Z+
 82e:	7f 01       	movw	r14, r30
 830:	85 32       	cpi	r24, 0x25	; 37
 832:	29 f4       	brne	.+10     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 834:	b6 01       	movw	r22, r12
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <fputc>
 83c:	e7 cf       	rjmp	.-50     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 83e:	91 2c       	mov	r9, r1
 840:	21 2c       	mov	r2, r1
 842:	31 2c       	mov	r3, r1
 844:	ff e1       	ldi	r31, 0x1F	; 31
 846:	f3 15       	cp	r31, r3
 848:	d8 f0       	brcs	.+54     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 84a:	8b 32       	cpi	r24, 0x2B	; 43
 84c:	79 f0       	breq	.+30     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 84e:	38 f4       	brcc	.+14     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 850:	80 32       	cpi	r24, 0x20	; 32
 852:	79 f0       	breq	.+30     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 854:	83 32       	cpi	r24, 0x23	; 35
 856:	a1 f4       	brne	.+40     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 858:	23 2d       	mov	r18, r3
 85a:	20 61       	ori	r18, 0x10	; 16
 85c:	1d c0       	rjmp	.+58     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 85e:	8d 32       	cpi	r24, 0x2D	; 45
 860:	61 f0       	breq	.+24     	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
 862:	80 33       	cpi	r24, 0x30	; 48
 864:	69 f4       	brne	.+26     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 866:	23 2d       	mov	r18, r3
 868:	21 60       	ori	r18, 0x01	; 1
 86a:	16 c0       	rjmp	.+44     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 86c:	83 2d       	mov	r24, r3
 86e:	82 60       	ori	r24, 0x02	; 2
 870:	38 2e       	mov	r3, r24
 872:	e3 2d       	mov	r30, r3
 874:	e4 60       	ori	r30, 0x04	; 4
 876:	3e 2e       	mov	r3, r30
 878:	2a c0       	rjmp	.+84     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 87a:	f3 2d       	mov	r31, r3
 87c:	f8 60       	ori	r31, 0x08	; 8
 87e:	1d c0       	rjmp	.+58     	; 0x8ba <__DATA_REGION_LENGTH__+0xba>
 880:	37 fc       	sbrc	r3, 7
 882:	2d c0       	rjmp	.+90     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 884:	20 ed       	ldi	r18, 0xD0	; 208
 886:	28 0f       	add	r18, r24
 888:	2a 30       	cpi	r18, 0x0A	; 10
 88a:	40 f0       	brcs	.+16     	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 88c:	8e 32       	cpi	r24, 0x2E	; 46
 88e:	b9 f4       	brne	.+46     	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 890:	36 fc       	sbrc	r3, 6
 892:	81 c1       	rjmp	.+770    	; 0xb96 <__stack+0x297>
 894:	23 2d       	mov	r18, r3
 896:	20 64       	ori	r18, 0x40	; 64
 898:	32 2e       	mov	r3, r18
 89a:	19 c0       	rjmp	.+50     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 89c:	36 fe       	sbrs	r3, 6
 89e:	06 c0       	rjmp	.+12     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
 8a0:	8a e0       	ldi	r24, 0x0A	; 10
 8a2:	98 9e       	mul	r9, r24
 8a4:	20 0d       	add	r18, r0
 8a6:	11 24       	eor	r1, r1
 8a8:	92 2e       	mov	r9, r18
 8aa:	11 c0       	rjmp	.+34     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8ac:	ea e0       	ldi	r30, 0x0A	; 10
 8ae:	2e 9e       	mul	r2, r30
 8b0:	20 0d       	add	r18, r0
 8b2:	11 24       	eor	r1, r1
 8b4:	22 2e       	mov	r2, r18
 8b6:	f3 2d       	mov	r31, r3
 8b8:	f0 62       	ori	r31, 0x20	; 32
 8ba:	3f 2e       	mov	r3, r31
 8bc:	08 c0       	rjmp	.+16     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8be:	8c 36       	cpi	r24, 0x6C	; 108
 8c0:	21 f4       	brne	.+8      	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 8c2:	83 2d       	mov	r24, r3
 8c4:	80 68       	ori	r24, 0x80	; 128
 8c6:	38 2e       	mov	r3, r24
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8ca:	88 36       	cpi	r24, 0x68	; 104
 8cc:	41 f4       	brne	.+16     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8ce:	f7 01       	movw	r30, r14
 8d0:	93 fd       	sbrc	r25, 3
 8d2:	85 91       	lpm	r24, Z+
 8d4:	93 ff       	sbrs	r25, 3
 8d6:	81 91       	ld	r24, Z+
 8d8:	7f 01       	movw	r14, r30
 8da:	81 11       	cpse	r24, r1
 8dc:	b3 cf       	rjmp	.-154    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 8de:	98 2f       	mov	r25, r24
 8e0:	9f 7d       	andi	r25, 0xDF	; 223
 8e2:	95 54       	subi	r25, 0x45	; 69
 8e4:	93 30       	cpi	r25, 0x03	; 3
 8e6:	28 f4       	brcc	.+10     	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
 8e8:	0c 5f       	subi	r16, 0xFC	; 252
 8ea:	1f 4f       	sbci	r17, 0xFF	; 255
 8ec:	9f e3       	ldi	r25, 0x3F	; 63
 8ee:	99 83       	std	Y+1, r25	; 0x01
 8f0:	0d c0       	rjmp	.+26     	; 0x90c <__stack+0xd>
 8f2:	83 36       	cpi	r24, 0x63	; 99
 8f4:	31 f0       	breq	.+12     	; 0x902 <__stack+0x3>
 8f6:	83 37       	cpi	r24, 0x73	; 115
 8f8:	71 f0       	breq	.+28     	; 0x916 <__stack+0x17>
 8fa:	83 35       	cpi	r24, 0x53	; 83
 8fc:	09 f0       	breq	.+2      	; 0x900 <__stack+0x1>
 8fe:	59 c0       	rjmp	.+178    	; 0x9b2 <__stack+0xb3>
 900:	21 c0       	rjmp	.+66     	; 0x944 <__stack+0x45>
 902:	f8 01       	movw	r30, r16
 904:	80 81       	ld	r24, Z
 906:	89 83       	std	Y+1, r24	; 0x01
 908:	0e 5f       	subi	r16, 0xFE	; 254
 90a:	1f 4f       	sbci	r17, 0xFF	; 255
 90c:	88 24       	eor	r8, r8
 90e:	83 94       	inc	r8
 910:	91 2c       	mov	r9, r1
 912:	53 01       	movw	r10, r6
 914:	13 c0       	rjmp	.+38     	; 0x93c <__stack+0x3d>
 916:	28 01       	movw	r4, r16
 918:	f2 e0       	ldi	r31, 0x02	; 2
 91a:	4f 0e       	add	r4, r31
 91c:	51 1c       	adc	r5, r1
 91e:	f8 01       	movw	r30, r16
 920:	a0 80       	ld	r10, Z
 922:	b1 80       	ldd	r11, Z+1	; 0x01
 924:	36 fe       	sbrs	r3, 6
 926:	03 c0       	rjmp	.+6      	; 0x92e <__stack+0x2f>
 928:	69 2d       	mov	r22, r9
 92a:	70 e0       	ldi	r23, 0x00	; 0
 92c:	02 c0       	rjmp	.+4      	; 0x932 <__stack+0x33>
 92e:	6f ef       	ldi	r22, 0xFF	; 255
 930:	7f ef       	ldi	r23, 0xFF	; 255
 932:	c5 01       	movw	r24, r10
 934:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <strnlen>
 938:	4c 01       	movw	r8, r24
 93a:	82 01       	movw	r16, r4
 93c:	f3 2d       	mov	r31, r3
 93e:	ff 77       	andi	r31, 0x7F	; 127
 940:	3f 2e       	mov	r3, r31
 942:	16 c0       	rjmp	.+44     	; 0x970 <__stack+0x71>
 944:	28 01       	movw	r4, r16
 946:	22 e0       	ldi	r18, 0x02	; 2
 948:	42 0e       	add	r4, r18
 94a:	51 1c       	adc	r5, r1
 94c:	f8 01       	movw	r30, r16
 94e:	a0 80       	ld	r10, Z
 950:	b1 80       	ldd	r11, Z+1	; 0x01
 952:	36 fe       	sbrs	r3, 6
 954:	03 c0       	rjmp	.+6      	; 0x95c <__stack+0x5d>
 956:	69 2d       	mov	r22, r9
 958:	70 e0       	ldi	r23, 0x00	; 0
 95a:	02 c0       	rjmp	.+4      	; 0x960 <__stack+0x61>
 95c:	6f ef       	ldi	r22, 0xFF	; 255
 95e:	7f ef       	ldi	r23, 0xFF	; 255
 960:	c5 01       	movw	r24, r10
 962:	0e 94 d5 05 	call	0xbaa	; 0xbaa <strnlen_P>
 966:	4c 01       	movw	r8, r24
 968:	f3 2d       	mov	r31, r3
 96a:	f0 68       	ori	r31, 0x80	; 128
 96c:	3f 2e       	mov	r3, r31
 96e:	82 01       	movw	r16, r4
 970:	33 fc       	sbrc	r3, 3
 972:	1b c0       	rjmp	.+54     	; 0x9aa <__stack+0xab>
 974:	82 2d       	mov	r24, r2
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	88 16       	cp	r8, r24
 97a:	99 06       	cpc	r9, r25
 97c:	b0 f4       	brcc	.+44     	; 0x9aa <__stack+0xab>
 97e:	b6 01       	movw	r22, r12
 980:	80 e2       	ldi	r24, 0x20	; 32
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <fputc>
 988:	2a 94       	dec	r2
 98a:	f4 cf       	rjmp	.-24     	; 0x974 <__stack+0x75>
 98c:	f5 01       	movw	r30, r10
 98e:	37 fc       	sbrc	r3, 7
 990:	85 91       	lpm	r24, Z+
 992:	37 fe       	sbrs	r3, 7
 994:	81 91       	ld	r24, Z+
 996:	5f 01       	movw	r10, r30
 998:	b6 01       	movw	r22, r12
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <fputc>
 9a0:	21 10       	cpse	r2, r1
 9a2:	2a 94       	dec	r2
 9a4:	21 e0       	ldi	r18, 0x01	; 1
 9a6:	82 1a       	sub	r8, r18
 9a8:	91 08       	sbc	r9, r1
 9aa:	81 14       	cp	r8, r1
 9ac:	91 04       	cpc	r9, r1
 9ae:	71 f7       	brne	.-36     	; 0x98c <__stack+0x8d>
 9b0:	e8 c0       	rjmp	.+464    	; 0xb82 <__stack+0x283>
 9b2:	84 36       	cpi	r24, 0x64	; 100
 9b4:	11 f0       	breq	.+4      	; 0x9ba <__stack+0xbb>
 9b6:	89 36       	cpi	r24, 0x69	; 105
 9b8:	41 f5       	brne	.+80     	; 0xa0a <__stack+0x10b>
 9ba:	f8 01       	movw	r30, r16
 9bc:	37 fe       	sbrs	r3, 7
 9be:	07 c0       	rjmp	.+14     	; 0x9ce <__stack+0xcf>
 9c0:	60 81       	ld	r22, Z
 9c2:	71 81       	ldd	r23, Z+1	; 0x01
 9c4:	82 81       	ldd	r24, Z+2	; 0x02
 9c6:	93 81       	ldd	r25, Z+3	; 0x03
 9c8:	0c 5f       	subi	r16, 0xFC	; 252
 9ca:	1f 4f       	sbci	r17, 0xFF	; 255
 9cc:	08 c0       	rjmp	.+16     	; 0x9de <__stack+0xdf>
 9ce:	60 81       	ld	r22, Z
 9d0:	71 81       	ldd	r23, Z+1	; 0x01
 9d2:	07 2e       	mov	r0, r23
 9d4:	00 0c       	add	r0, r0
 9d6:	88 0b       	sbc	r24, r24
 9d8:	99 0b       	sbc	r25, r25
 9da:	0e 5f       	subi	r16, 0xFE	; 254
 9dc:	1f 4f       	sbci	r17, 0xFF	; 255
 9de:	f3 2d       	mov	r31, r3
 9e0:	ff 76       	andi	r31, 0x6F	; 111
 9e2:	3f 2e       	mov	r3, r31
 9e4:	97 ff       	sbrs	r25, 7
 9e6:	09 c0       	rjmp	.+18     	; 0x9fa <__stack+0xfb>
 9e8:	90 95       	com	r25
 9ea:	80 95       	com	r24
 9ec:	70 95       	com	r23
 9ee:	61 95       	neg	r22
 9f0:	7f 4f       	sbci	r23, 0xFF	; 255
 9f2:	8f 4f       	sbci	r24, 0xFF	; 255
 9f4:	9f 4f       	sbci	r25, 0xFF	; 255
 9f6:	f0 68       	ori	r31, 0x80	; 128
 9f8:	3f 2e       	mov	r3, r31
 9fa:	2a e0       	ldi	r18, 0x0A	; 10
 9fc:	30 e0       	ldi	r19, 0x00	; 0
 9fe:	a3 01       	movw	r20, r6
 a00:	0e 94 27 06 	call	0xc4e	; 0xc4e <__ultoa_invert>
 a04:	88 2e       	mov	r8, r24
 a06:	86 18       	sub	r8, r6
 a08:	45 c0       	rjmp	.+138    	; 0xa94 <__stack+0x195>
 a0a:	85 37       	cpi	r24, 0x75	; 117
 a0c:	31 f4       	brne	.+12     	; 0xa1a <__stack+0x11b>
 a0e:	23 2d       	mov	r18, r3
 a10:	2f 7e       	andi	r18, 0xEF	; 239
 a12:	b2 2e       	mov	r11, r18
 a14:	2a e0       	ldi	r18, 0x0A	; 10
 a16:	30 e0       	ldi	r19, 0x00	; 0
 a18:	25 c0       	rjmp	.+74     	; 0xa64 <__stack+0x165>
 a1a:	93 2d       	mov	r25, r3
 a1c:	99 7f       	andi	r25, 0xF9	; 249
 a1e:	b9 2e       	mov	r11, r25
 a20:	8f 36       	cpi	r24, 0x6F	; 111
 a22:	c1 f0       	breq	.+48     	; 0xa54 <__stack+0x155>
 a24:	18 f4       	brcc	.+6      	; 0xa2c <__stack+0x12d>
 a26:	88 35       	cpi	r24, 0x58	; 88
 a28:	79 f0       	breq	.+30     	; 0xa48 <__stack+0x149>
 a2a:	b5 c0       	rjmp	.+362    	; 0xb96 <__stack+0x297>
 a2c:	80 37       	cpi	r24, 0x70	; 112
 a2e:	19 f0       	breq	.+6      	; 0xa36 <__stack+0x137>
 a30:	88 37       	cpi	r24, 0x78	; 120
 a32:	21 f0       	breq	.+8      	; 0xa3c <__stack+0x13d>
 a34:	b0 c0       	rjmp	.+352    	; 0xb96 <__stack+0x297>
 a36:	e9 2f       	mov	r30, r25
 a38:	e0 61       	ori	r30, 0x10	; 16
 a3a:	be 2e       	mov	r11, r30
 a3c:	b4 fe       	sbrs	r11, 4
 a3e:	0d c0       	rjmp	.+26     	; 0xa5a <__stack+0x15b>
 a40:	fb 2d       	mov	r31, r11
 a42:	f4 60       	ori	r31, 0x04	; 4
 a44:	bf 2e       	mov	r11, r31
 a46:	09 c0       	rjmp	.+18     	; 0xa5a <__stack+0x15b>
 a48:	34 fe       	sbrs	r3, 4
 a4a:	0a c0       	rjmp	.+20     	; 0xa60 <__stack+0x161>
 a4c:	29 2f       	mov	r18, r25
 a4e:	26 60       	ori	r18, 0x06	; 6
 a50:	b2 2e       	mov	r11, r18
 a52:	06 c0       	rjmp	.+12     	; 0xa60 <__stack+0x161>
 a54:	28 e0       	ldi	r18, 0x08	; 8
 a56:	30 e0       	ldi	r19, 0x00	; 0
 a58:	05 c0       	rjmp	.+10     	; 0xa64 <__stack+0x165>
 a5a:	20 e1       	ldi	r18, 0x10	; 16
 a5c:	30 e0       	ldi	r19, 0x00	; 0
 a5e:	02 c0       	rjmp	.+4      	; 0xa64 <__stack+0x165>
 a60:	20 e1       	ldi	r18, 0x10	; 16
 a62:	32 e0       	ldi	r19, 0x02	; 2
 a64:	f8 01       	movw	r30, r16
 a66:	b7 fe       	sbrs	r11, 7
 a68:	07 c0       	rjmp	.+14     	; 0xa78 <__stack+0x179>
 a6a:	60 81       	ld	r22, Z
 a6c:	71 81       	ldd	r23, Z+1	; 0x01
 a6e:	82 81       	ldd	r24, Z+2	; 0x02
 a70:	93 81       	ldd	r25, Z+3	; 0x03
 a72:	0c 5f       	subi	r16, 0xFC	; 252
 a74:	1f 4f       	sbci	r17, 0xFF	; 255
 a76:	06 c0       	rjmp	.+12     	; 0xa84 <__stack+0x185>
 a78:	60 81       	ld	r22, Z
 a7a:	71 81       	ldd	r23, Z+1	; 0x01
 a7c:	80 e0       	ldi	r24, 0x00	; 0
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	0e 5f       	subi	r16, 0xFE	; 254
 a82:	1f 4f       	sbci	r17, 0xFF	; 255
 a84:	a3 01       	movw	r20, r6
 a86:	0e 94 27 06 	call	0xc4e	; 0xc4e <__ultoa_invert>
 a8a:	88 2e       	mov	r8, r24
 a8c:	86 18       	sub	r8, r6
 a8e:	fb 2d       	mov	r31, r11
 a90:	ff 77       	andi	r31, 0x7F	; 127
 a92:	3f 2e       	mov	r3, r31
 a94:	36 fe       	sbrs	r3, 6
 a96:	0d c0       	rjmp	.+26     	; 0xab2 <__stack+0x1b3>
 a98:	23 2d       	mov	r18, r3
 a9a:	2e 7f       	andi	r18, 0xFE	; 254
 a9c:	a2 2e       	mov	r10, r18
 a9e:	89 14       	cp	r8, r9
 aa0:	58 f4       	brcc	.+22     	; 0xab8 <__stack+0x1b9>
 aa2:	34 fe       	sbrs	r3, 4
 aa4:	0b c0       	rjmp	.+22     	; 0xabc <__stack+0x1bd>
 aa6:	32 fc       	sbrc	r3, 2
 aa8:	09 c0       	rjmp	.+18     	; 0xabc <__stack+0x1bd>
 aaa:	83 2d       	mov	r24, r3
 aac:	8e 7e       	andi	r24, 0xEE	; 238
 aae:	a8 2e       	mov	r10, r24
 ab0:	05 c0       	rjmp	.+10     	; 0xabc <__stack+0x1bd>
 ab2:	b8 2c       	mov	r11, r8
 ab4:	a3 2c       	mov	r10, r3
 ab6:	03 c0       	rjmp	.+6      	; 0xabe <__stack+0x1bf>
 ab8:	b8 2c       	mov	r11, r8
 aba:	01 c0       	rjmp	.+2      	; 0xabe <__stack+0x1bf>
 abc:	b9 2c       	mov	r11, r9
 abe:	a4 fe       	sbrs	r10, 4
 ac0:	0f c0       	rjmp	.+30     	; 0xae0 <__stack+0x1e1>
 ac2:	fe 01       	movw	r30, r28
 ac4:	e8 0d       	add	r30, r8
 ac6:	f1 1d       	adc	r31, r1
 ac8:	80 81       	ld	r24, Z
 aca:	80 33       	cpi	r24, 0x30	; 48
 acc:	21 f4       	brne	.+8      	; 0xad6 <__stack+0x1d7>
 ace:	9a 2d       	mov	r25, r10
 ad0:	99 7e       	andi	r25, 0xE9	; 233
 ad2:	a9 2e       	mov	r10, r25
 ad4:	09 c0       	rjmp	.+18     	; 0xae8 <__stack+0x1e9>
 ad6:	a2 fe       	sbrs	r10, 2
 ad8:	06 c0       	rjmp	.+12     	; 0xae6 <__stack+0x1e7>
 ada:	b3 94       	inc	r11
 adc:	b3 94       	inc	r11
 ade:	04 c0       	rjmp	.+8      	; 0xae8 <__stack+0x1e9>
 ae0:	8a 2d       	mov	r24, r10
 ae2:	86 78       	andi	r24, 0x86	; 134
 ae4:	09 f0       	breq	.+2      	; 0xae8 <__stack+0x1e9>
 ae6:	b3 94       	inc	r11
 ae8:	a3 fc       	sbrc	r10, 3
 aea:	11 c0       	rjmp	.+34     	; 0xb0e <__stack+0x20f>
 aec:	a0 fe       	sbrs	r10, 0
 aee:	06 c0       	rjmp	.+12     	; 0xafc <__stack+0x1fd>
 af0:	b2 14       	cp	r11, r2
 af2:	88 f4       	brcc	.+34     	; 0xb16 <__stack+0x217>
 af4:	28 0c       	add	r2, r8
 af6:	92 2c       	mov	r9, r2
 af8:	9b 18       	sub	r9, r11
 afa:	0e c0       	rjmp	.+28     	; 0xb18 <__stack+0x219>
 afc:	b2 14       	cp	r11, r2
 afe:	60 f4       	brcc	.+24     	; 0xb18 <__stack+0x219>
 b00:	b6 01       	movw	r22, r12
 b02:	80 e2       	ldi	r24, 0x20	; 32
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <fputc>
 b0a:	b3 94       	inc	r11
 b0c:	f7 cf       	rjmp	.-18     	; 0xafc <__stack+0x1fd>
 b0e:	b2 14       	cp	r11, r2
 b10:	18 f4       	brcc	.+6      	; 0xb18 <__stack+0x219>
 b12:	2b 18       	sub	r2, r11
 b14:	02 c0       	rjmp	.+4      	; 0xb1a <__stack+0x21b>
 b16:	98 2c       	mov	r9, r8
 b18:	21 2c       	mov	r2, r1
 b1a:	a4 fe       	sbrs	r10, 4
 b1c:	10 c0       	rjmp	.+32     	; 0xb3e <__stack+0x23f>
 b1e:	b6 01       	movw	r22, r12
 b20:	80 e3       	ldi	r24, 0x30	; 48
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <fputc>
 b28:	a2 fe       	sbrs	r10, 2
 b2a:	17 c0       	rjmp	.+46     	; 0xb5a <__stack+0x25b>
 b2c:	a1 fc       	sbrc	r10, 1
 b2e:	03 c0       	rjmp	.+6      	; 0xb36 <__stack+0x237>
 b30:	88 e7       	ldi	r24, 0x78	; 120
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	02 c0       	rjmp	.+4      	; 0xb3a <__stack+0x23b>
 b36:	88 e5       	ldi	r24, 0x58	; 88
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	b6 01       	movw	r22, r12
 b3c:	0c c0       	rjmp	.+24     	; 0xb56 <__stack+0x257>
 b3e:	8a 2d       	mov	r24, r10
 b40:	86 78       	andi	r24, 0x86	; 134
 b42:	59 f0       	breq	.+22     	; 0xb5a <__stack+0x25b>
 b44:	a1 fe       	sbrs	r10, 1
 b46:	02 c0       	rjmp	.+4      	; 0xb4c <__stack+0x24d>
 b48:	8b e2       	ldi	r24, 0x2B	; 43
 b4a:	01 c0       	rjmp	.+2      	; 0xb4e <__stack+0x24f>
 b4c:	80 e2       	ldi	r24, 0x20	; 32
 b4e:	a7 fc       	sbrc	r10, 7
 b50:	8d e2       	ldi	r24, 0x2D	; 45
 b52:	b6 01       	movw	r22, r12
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <fputc>
 b5a:	89 14       	cp	r8, r9
 b5c:	38 f4       	brcc	.+14     	; 0xb6c <__stack+0x26d>
 b5e:	b6 01       	movw	r22, r12
 b60:	80 e3       	ldi	r24, 0x30	; 48
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <fputc>
 b68:	9a 94       	dec	r9
 b6a:	f7 cf       	rjmp	.-18     	; 0xb5a <__stack+0x25b>
 b6c:	8a 94       	dec	r8
 b6e:	f3 01       	movw	r30, r6
 b70:	e8 0d       	add	r30, r8
 b72:	f1 1d       	adc	r31, r1
 b74:	80 81       	ld	r24, Z
 b76:	b6 01       	movw	r22, r12
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <fputc>
 b7e:	81 10       	cpse	r8, r1
 b80:	f5 cf       	rjmp	.-22     	; 0xb6c <__stack+0x26d>
 b82:	22 20       	and	r2, r2
 b84:	09 f4       	brne	.+2      	; 0xb88 <__stack+0x289>
 b86:	42 ce       	rjmp	.-892    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 b88:	b6 01       	movw	r22, r12
 b8a:	80 e2       	ldi	r24, 0x20	; 32
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <fputc>
 b92:	2a 94       	dec	r2
 b94:	f6 cf       	rjmp	.-20     	; 0xb82 <__stack+0x283>
 b96:	f6 01       	movw	r30, r12
 b98:	86 81       	ldd	r24, Z+6	; 0x06
 b9a:	97 81       	ldd	r25, Z+7	; 0x07
 b9c:	02 c0       	rjmp	.+4      	; 0xba2 <__stack+0x2a3>
 b9e:	8f ef       	ldi	r24, 0xFF	; 255
 ba0:	9f ef       	ldi	r25, 0xFF	; 255
 ba2:	2b 96       	adiw	r28, 0x0b	; 11
 ba4:	e2 e1       	ldi	r30, 0x12	; 18
 ba6:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__epilogue_restores__>

00000baa <strnlen_P>:
 baa:	fc 01       	movw	r30, r24
 bac:	05 90       	lpm	r0, Z+
 bae:	61 50       	subi	r22, 0x01	; 1
 bb0:	70 40       	sbci	r23, 0x00	; 0
 bb2:	01 10       	cpse	r0, r1
 bb4:	d8 f7       	brcc	.-10     	; 0xbac <strnlen_P+0x2>
 bb6:	80 95       	com	r24
 bb8:	90 95       	com	r25
 bba:	8e 0f       	add	r24, r30
 bbc:	9f 1f       	adc	r25, r31
 bbe:	08 95       	ret

00000bc0 <strnlen>:
 bc0:	fc 01       	movw	r30, r24
 bc2:	61 50       	subi	r22, 0x01	; 1
 bc4:	70 40       	sbci	r23, 0x00	; 0
 bc6:	01 90       	ld	r0, Z+
 bc8:	01 10       	cpse	r0, r1
 bca:	d8 f7       	brcc	.-10     	; 0xbc2 <strnlen+0x2>
 bcc:	80 95       	com	r24
 bce:	90 95       	com	r25
 bd0:	8e 0f       	add	r24, r30
 bd2:	9f 1f       	adc	r25, r31
 bd4:	08 95       	ret

00000bd6 <fputc>:
 bd6:	0f 93       	push	r16
 bd8:	1f 93       	push	r17
 bda:	cf 93       	push	r28
 bdc:	df 93       	push	r29
 bde:	fb 01       	movw	r30, r22
 be0:	23 81       	ldd	r18, Z+3	; 0x03
 be2:	21 fd       	sbrc	r18, 1
 be4:	03 c0       	rjmp	.+6      	; 0xbec <fputc+0x16>
 be6:	8f ef       	ldi	r24, 0xFF	; 255
 be8:	9f ef       	ldi	r25, 0xFF	; 255
 bea:	2c c0       	rjmp	.+88     	; 0xc44 <fputc+0x6e>
 bec:	22 ff       	sbrs	r18, 2
 bee:	16 c0       	rjmp	.+44     	; 0xc1c <fputc+0x46>
 bf0:	46 81       	ldd	r20, Z+6	; 0x06
 bf2:	57 81       	ldd	r21, Z+7	; 0x07
 bf4:	24 81       	ldd	r18, Z+4	; 0x04
 bf6:	35 81       	ldd	r19, Z+5	; 0x05
 bf8:	42 17       	cp	r20, r18
 bfa:	53 07       	cpc	r21, r19
 bfc:	44 f4       	brge	.+16     	; 0xc0e <fputc+0x38>
 bfe:	a0 81       	ld	r26, Z
 c00:	b1 81       	ldd	r27, Z+1	; 0x01
 c02:	9d 01       	movw	r18, r26
 c04:	2f 5f       	subi	r18, 0xFF	; 255
 c06:	3f 4f       	sbci	r19, 0xFF	; 255
 c08:	31 83       	std	Z+1, r19	; 0x01
 c0a:	20 83       	st	Z, r18
 c0c:	8c 93       	st	X, r24
 c0e:	26 81       	ldd	r18, Z+6	; 0x06
 c10:	37 81       	ldd	r19, Z+7	; 0x07
 c12:	2f 5f       	subi	r18, 0xFF	; 255
 c14:	3f 4f       	sbci	r19, 0xFF	; 255
 c16:	37 83       	std	Z+7, r19	; 0x07
 c18:	26 83       	std	Z+6, r18	; 0x06
 c1a:	14 c0       	rjmp	.+40     	; 0xc44 <fputc+0x6e>
 c1c:	8b 01       	movw	r16, r22
 c1e:	ec 01       	movw	r28, r24
 c20:	fb 01       	movw	r30, r22
 c22:	00 84       	ldd	r0, Z+8	; 0x08
 c24:	f1 85       	ldd	r31, Z+9	; 0x09
 c26:	e0 2d       	mov	r30, r0
 c28:	09 95       	icall
 c2a:	89 2b       	or	r24, r25
 c2c:	e1 f6       	brne	.-72     	; 0xbe6 <fputc+0x10>
 c2e:	d8 01       	movw	r26, r16
 c30:	16 96       	adiw	r26, 0x06	; 6
 c32:	8d 91       	ld	r24, X+
 c34:	9c 91       	ld	r25, X
 c36:	17 97       	sbiw	r26, 0x07	; 7
 c38:	01 96       	adiw	r24, 0x01	; 1
 c3a:	17 96       	adiw	r26, 0x07	; 7
 c3c:	9c 93       	st	X, r25
 c3e:	8e 93       	st	-X, r24
 c40:	16 97       	sbiw	r26, 0x06	; 6
 c42:	ce 01       	movw	r24, r28
 c44:	df 91       	pop	r29
 c46:	cf 91       	pop	r28
 c48:	1f 91       	pop	r17
 c4a:	0f 91       	pop	r16
 c4c:	08 95       	ret

00000c4e <__ultoa_invert>:
 c4e:	fa 01       	movw	r30, r20
 c50:	aa 27       	eor	r26, r26
 c52:	28 30       	cpi	r18, 0x08	; 8
 c54:	51 f1       	breq	.+84     	; 0xcaa <__ultoa_invert+0x5c>
 c56:	20 31       	cpi	r18, 0x10	; 16
 c58:	81 f1       	breq	.+96     	; 0xcba <__ultoa_invert+0x6c>
 c5a:	e8 94       	clt
 c5c:	6f 93       	push	r22
 c5e:	6e 7f       	andi	r22, 0xFE	; 254
 c60:	6e 5f       	subi	r22, 0xFE	; 254
 c62:	7f 4f       	sbci	r23, 0xFF	; 255
 c64:	8f 4f       	sbci	r24, 0xFF	; 255
 c66:	9f 4f       	sbci	r25, 0xFF	; 255
 c68:	af 4f       	sbci	r26, 0xFF	; 255
 c6a:	b1 e0       	ldi	r27, 0x01	; 1
 c6c:	3e d0       	rcall	.+124    	; 0xcea <__ultoa_invert+0x9c>
 c6e:	b4 e0       	ldi	r27, 0x04	; 4
 c70:	3c d0       	rcall	.+120    	; 0xcea <__ultoa_invert+0x9c>
 c72:	67 0f       	add	r22, r23
 c74:	78 1f       	adc	r23, r24
 c76:	89 1f       	adc	r24, r25
 c78:	9a 1f       	adc	r25, r26
 c7a:	a1 1d       	adc	r26, r1
 c7c:	68 0f       	add	r22, r24
 c7e:	79 1f       	adc	r23, r25
 c80:	8a 1f       	adc	r24, r26
 c82:	91 1d       	adc	r25, r1
 c84:	a1 1d       	adc	r26, r1
 c86:	6a 0f       	add	r22, r26
 c88:	71 1d       	adc	r23, r1
 c8a:	81 1d       	adc	r24, r1
 c8c:	91 1d       	adc	r25, r1
 c8e:	a1 1d       	adc	r26, r1
 c90:	20 d0       	rcall	.+64     	; 0xcd2 <__ultoa_invert+0x84>
 c92:	09 f4       	brne	.+2      	; 0xc96 <__ultoa_invert+0x48>
 c94:	68 94       	set
 c96:	3f 91       	pop	r19
 c98:	2a e0       	ldi	r18, 0x0A	; 10
 c9a:	26 9f       	mul	r18, r22
 c9c:	11 24       	eor	r1, r1
 c9e:	30 19       	sub	r19, r0
 ca0:	30 5d       	subi	r19, 0xD0	; 208
 ca2:	31 93       	st	Z+, r19
 ca4:	de f6       	brtc	.-74     	; 0xc5c <__ultoa_invert+0xe>
 ca6:	cf 01       	movw	r24, r30
 ca8:	08 95       	ret
 caa:	46 2f       	mov	r20, r22
 cac:	47 70       	andi	r20, 0x07	; 7
 cae:	40 5d       	subi	r20, 0xD0	; 208
 cb0:	41 93       	st	Z+, r20
 cb2:	b3 e0       	ldi	r27, 0x03	; 3
 cb4:	0f d0       	rcall	.+30     	; 0xcd4 <__ultoa_invert+0x86>
 cb6:	c9 f7       	brne	.-14     	; 0xcaa <__ultoa_invert+0x5c>
 cb8:	f6 cf       	rjmp	.-20     	; 0xca6 <__ultoa_invert+0x58>
 cba:	46 2f       	mov	r20, r22
 cbc:	4f 70       	andi	r20, 0x0F	; 15
 cbe:	40 5d       	subi	r20, 0xD0	; 208
 cc0:	4a 33       	cpi	r20, 0x3A	; 58
 cc2:	18 f0       	brcs	.+6      	; 0xcca <__ultoa_invert+0x7c>
 cc4:	49 5d       	subi	r20, 0xD9	; 217
 cc6:	31 fd       	sbrc	r19, 1
 cc8:	40 52       	subi	r20, 0x20	; 32
 cca:	41 93       	st	Z+, r20
 ccc:	02 d0       	rcall	.+4      	; 0xcd2 <__ultoa_invert+0x84>
 cce:	a9 f7       	brne	.-22     	; 0xcba <__ultoa_invert+0x6c>
 cd0:	ea cf       	rjmp	.-44     	; 0xca6 <__ultoa_invert+0x58>
 cd2:	b4 e0       	ldi	r27, 0x04	; 4
 cd4:	a6 95       	lsr	r26
 cd6:	97 95       	ror	r25
 cd8:	87 95       	ror	r24
 cda:	77 95       	ror	r23
 cdc:	67 95       	ror	r22
 cde:	ba 95       	dec	r27
 ce0:	c9 f7       	brne	.-14     	; 0xcd4 <__ultoa_invert+0x86>
 ce2:	00 97       	sbiw	r24, 0x00	; 0
 ce4:	61 05       	cpc	r22, r1
 ce6:	71 05       	cpc	r23, r1
 ce8:	08 95       	ret
 cea:	9b 01       	movw	r18, r22
 cec:	ac 01       	movw	r20, r24
 cee:	0a 2e       	mov	r0, r26
 cf0:	06 94       	lsr	r0
 cf2:	57 95       	ror	r21
 cf4:	47 95       	ror	r20
 cf6:	37 95       	ror	r19
 cf8:	27 95       	ror	r18
 cfa:	ba 95       	dec	r27
 cfc:	c9 f7       	brne	.-14     	; 0xcf0 <__ultoa_invert+0xa2>
 cfe:	62 0f       	add	r22, r18
 d00:	73 1f       	adc	r23, r19
 d02:	84 1f       	adc	r24, r20
 d04:	95 1f       	adc	r25, r21
 d06:	a0 1d       	adc	r26, r0
 d08:	08 95       	ret

00000d0a <__prologue_saves__>:
 d0a:	2f 92       	push	r2
 d0c:	3f 92       	push	r3
 d0e:	4f 92       	push	r4
 d10:	5f 92       	push	r5
 d12:	6f 92       	push	r6
 d14:	7f 92       	push	r7
 d16:	8f 92       	push	r8
 d18:	9f 92       	push	r9
 d1a:	af 92       	push	r10
 d1c:	bf 92       	push	r11
 d1e:	cf 92       	push	r12
 d20:	df 92       	push	r13
 d22:	ef 92       	push	r14
 d24:	ff 92       	push	r15
 d26:	0f 93       	push	r16
 d28:	1f 93       	push	r17
 d2a:	cf 93       	push	r28
 d2c:	df 93       	push	r29
 d2e:	cd b7       	in	r28, 0x3d	; 61
 d30:	de b7       	in	r29, 0x3e	; 62
 d32:	ca 1b       	sub	r28, r26
 d34:	db 0b       	sbc	r29, r27
 d36:	0f b6       	in	r0, 0x3f	; 63
 d38:	f8 94       	cli
 d3a:	de bf       	out	0x3e, r29	; 62
 d3c:	0f be       	out	0x3f, r0	; 63
 d3e:	cd bf       	out	0x3d, r28	; 61
 d40:	09 94       	ijmp

00000d42 <__epilogue_restores__>:
 d42:	2a 88       	ldd	r2, Y+18	; 0x12
 d44:	39 88       	ldd	r3, Y+17	; 0x11
 d46:	48 88       	ldd	r4, Y+16	; 0x10
 d48:	5f 84       	ldd	r5, Y+15	; 0x0f
 d4a:	6e 84       	ldd	r6, Y+14	; 0x0e
 d4c:	7d 84       	ldd	r7, Y+13	; 0x0d
 d4e:	8c 84       	ldd	r8, Y+12	; 0x0c
 d50:	9b 84       	ldd	r9, Y+11	; 0x0b
 d52:	aa 84       	ldd	r10, Y+10	; 0x0a
 d54:	b9 84       	ldd	r11, Y+9	; 0x09
 d56:	c8 84       	ldd	r12, Y+8	; 0x08
 d58:	df 80       	ldd	r13, Y+7	; 0x07
 d5a:	ee 80       	ldd	r14, Y+6	; 0x06
 d5c:	fd 80       	ldd	r15, Y+5	; 0x05
 d5e:	0c 81       	ldd	r16, Y+4	; 0x04
 d60:	1b 81       	ldd	r17, Y+3	; 0x03
 d62:	aa 81       	ldd	r26, Y+2	; 0x02
 d64:	b9 81       	ldd	r27, Y+1	; 0x01
 d66:	ce 0f       	add	r28, r30
 d68:	d1 1d       	adc	r29, r1
 d6a:	0f b6       	in	r0, 0x3f	; 63
 d6c:	f8 94       	cli
 d6e:	de bf       	out	0x3e, r29	; 62
 d70:	0f be       	out	0x3f, r0	; 63
 d72:	cd bf       	out	0x3d, r28	; 61
 d74:	ed 01       	movw	r28, r26
 d76:	08 95       	ret

00000d78 <_exit>:
 d78:	f8 94       	cli

00000d7a <__stop_program>:
 d7a:	ff cf       	rjmp	.-2      	; 0xd7a <__stop_program>
