
solucion2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000886  0000091a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000886  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080011a  0080011a  00000934  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000990  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  000009d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019c9  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000edb  00000000  00000000  00002549  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ae6  00000000  00000000  00003424  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  00003f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b0  00000000  00000000  00004194  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000032c  00000000  00000000  00004b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00004e70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 e8       	ldi	r30, 0x86	; 134
  c8:	f8 e0       	ldi	r31, 0x08	; 8
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	aa 31       	cpi	r26, 0x1A	; 26
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	aa e1       	ldi	r26, 0x1A	; 26
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a2 32       	cpi	r26, 0x22	; 34
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  ea:	0c 94 41 04 	jmp	0x882	; 0x882 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <ADC_Avr_Init>:

void ADC_Avr_Init(void){
	//Seleccionos el AVCC ;//Justificacion a la derecha
	//ADMUX |= (1<<REFS0) ;
	//ADMUX &= ~(1<<REFS1) & ~(1<<ADLAR);
	ADMUX = (1<<REFS0) | (0<<REFS1) | (0<<ADLAR);
  f2:	80 e4       	ldi	r24, 0x40	; 64
  f4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	//Seleccionamos el Clock del ADC
	//FOSC/PREESC = 16MHz/128 = 125kHZ
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
  f8:	ea e7       	ldi	r30, 0x7A	; 122
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	87 60       	ori	r24, 0x07	; 7
 100:	80 83       	st	Z, r24
	
	//Habiltamos los canales Analogicos
	DIDR0 = 0XFF;
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
 108:	08 95       	ret

0000010a <ADC_Enable>:
	
}
void ADC_Enable(void)
{
	ADCSRA |= (1<<ADEN);
 10a:	ea e7       	ldi	r30, 0x7A	; 122
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 68       	ori	r24, 0x80	; 128
 112:	80 83       	st	Z, r24
 114:	08 95       	ret

00000116 <ADC_Disable>:
}

void ADC_Disable(void)
{
	ADCSRA &= ~(1<<ADEN);
 116:	ea e7       	ldi	r30, 0x7A	; 122
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	8f 77       	andi	r24, 0x7F	; 127
 11e:	80 83       	st	Z, r24
 120:	08 95       	ret

00000122 <ADC_Start_Conversion>:
}

void ADC_Start_Conversion(void)
{
	ADCSRA |= (1<<ADSC);
 122:	ea e7       	ldi	r30, 0x7A	; 122
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	80 83       	st	Z, r24
 12c:	08 95       	ret

0000012e <ADC_State_Conversion>:
}

bool ADC_State_Conversion(void)
{
	return ( (ADCSRA & (1<<ADSC)) );
 12e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
}
 132:	86 fb       	bst	r24, 6
 134:	88 27       	eor	r24, r24
 136:	80 f9       	bld	r24, 0
 138:	08 95       	ret

0000013a <ADC_Select_Channel>:

void ADC_Select_Channel(uint8_t channel)
{
	ADMUX = ( (ADMUX & 0xF0) | (channel & 0x0F) );
 13a:	ec e7       	ldi	r30, 0x7C	; 124
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	90 81       	ld	r25, Z
 140:	90 7f       	andi	r25, 0xF0	; 240
 142:	8f 70       	andi	r24, 0x0F	; 15
 144:	89 2b       	or	r24, r25
 146:	80 83       	st	Z, r24
 148:	08 95       	ret

0000014a <AnalogRead>:
}

uint16_t AnalogRead(uint8_t channel)
{
	ADC_Select_Channel(channel); //Seleecion del canal analogico
 14a:	0e 94 9d 00 	call	0x13a	; 0x13a <ADC_Select_Channel>
	ADC_Enable(); //Habilitamos el ADC
 14e:	0e 94 85 00 	call	0x10a	; 0x10a <ADC_Enable>
	ADC_Start_Conversion(); //Iniciamos la conversion
 152:	0e 94 91 00 	call	0x122	; 0x122 <ADC_Start_Conversion>
	while(ADC_State_Conversion() == true); //Esperar que la conversion se complete
 156:	0e 94 97 00 	call	0x12e	; 0x12e <ADC_State_Conversion>
 15a:	81 11       	cpse	r24, r1
 15c:	fc cf       	rjmp	.-8      	; 0x156 <AnalogRead+0xc>
	ADC_Disable(); //Deshabilitar el ADC
 15e:	0e 94 8b 00 	call	0x116	; 0x116 <ADC_Disable>
	return (ADC); //Retorno el valor actual de la conversion
 162:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 166:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 16a:	08 95       	ret

0000016c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 16c:	0e 94 06 01 	call	0x20c	; 0x20c <system_init>
 170:	08 95       	ret

00000172 <main>:


int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 172:	0e 94 b6 00 	call	0x16c	; 0x16c <atmel_start_init>
	ADC_Avr_Init();
 176:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_Avr_Init>
	/* Replace with your application code */
	while (1) {
		Resultado = AnalogRead(AN0);
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	0e 94 a5 00 	call	0x14a	; 0x14a <AnalogRead>
 180:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
 184:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
		printf("ADC: %u \r\n",Resultado);
 188:	9f 93       	push	r25
 18a:	8f 93       	push	r24
 18c:	8e e0       	ldi	r24, 0x0E	; 14
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	9f 93       	push	r25
 192:	8f 93       	push	r24
 194:	0e 94 63 01 	call	0x2c6	; 0x2c6 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	89 e6       	ldi	r24, 0x69	; 105
 19c:	98 e1       	ldi	r25, 0x18	; 24
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <main+0x2c>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x36>
 1a8:	00 00       	nop
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	e3 cf       	rjmp	.-58     	; 0x17a <main+0x8>

000001b4 <ADC_0_init>:
 */
int8_t ADC_0_init()
{

	/* Enable clock to write ADC registers */
	PRR0 &= ~(1 << PRADC);
 1b4:	e4 e6       	ldi	r30, 0x64	; 100
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	8e 7f       	andi	r24, 0xFE	; 254
 1bc:	80 83       	st	Z, r24

	ADMUX = (0x00 << REFS0)   /* AREF, Internal Vref turned off */
 1be:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	        | (0 << ADLAR)    /* Left Adjust Result: disabled */
	        | (0x00 << MUX0); /* ADC Single Ended Input pin 0 */

	ADCSRA = (1 << ADEN)        /* ADC: enabled */
 1c2:	82 e8       	ldi	r24, 0x82	; 130
 1c4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	         | (0 << ADATE)     /* Auto Trigger: disabled */
	         | (0 << ADIE)      /* ADC Interrupt: disabled */
	         | (0x02 << ADPS0); /* 4 */
	ADCSRB = (0x00 << ADTS0)    /* Free Running mode */
 1c8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	         | (0 << ACME)      /* Analog Comparator Multiplexer: disabled */
	    ;

	DIDR0 = 1 << ADC0D    /* Disable digital input buffer for ADC0 */
 1cc:	87 e0       	ldi	r24, 0x07	; 7
 1ce:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	        | 1 << ADC1D  /* Disable digital input buffer for ADC1 */
	        | 1 << ADC2D; /* Disable digital input buffer for ADC2 */

	return 0;
}
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	08 95       	ret

000001d6 <ADC_0_initialization>:
		DDRC &= ~(1 << pin);

		PORTC |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTC &= ~(1 << pin);
 1d6:	88 b1       	in	r24, 0x08	; 8
 1d8:	8e 7f       	andi	r24, 0xFE	; 254
 1da:	88 b9       	out	0x08, r24	; 8
 1dc:	88 b1       	in	r24, 0x08	; 8
 1de:	8d 7f       	andi	r24, 0xFD	; 253
 1e0:	88 b9       	out	0x08, r24	; 8
 1e2:	88 b1       	in	r24, 0x08	; 8
 1e4:	8b 7f       	andi	r24, 0xFB	; 251
 1e6:	88 b9       	out	0x08, r24	; 8
	ana0_set_pull_mode(PORT_PULL_OFF);

	// Disable pull-up.
	an2_set_pull_mode(PORT_PULL_OFF);

	ADC_0_init();
 1e8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <ADC_0_init>
 1ec:	08 95       	ret

000001ee <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 1ee:	8a b1       	in	r24, 0x0a	; 10
 1f0:	8e 7f       	andi	r24, 0xFE	; 254
 1f2:	8a b9       	out	0x0a, r24	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 1f4:	8b b1       	in	r24, 0x0b	; 11
 1f6:	8e 7f       	andi	r24, 0xFE	; 254
 1f8:	8b b9       	out	0x0b, r24	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 1fa:	8a b1       	in	r24, 0x0a	; 10
 1fc:	82 60       	ori	r24, 0x02	; 2
 1fe:	8a b9       	out	0x0a, r24	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 200:	8b b1       	in	r24, 0x0b	; 11
 202:	8d 7f       	andi	r24, 0xFD	; 253
 204:	8b b9       	out	0x0b, r24	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 206:	0e 94 40 01 	call	0x280	; 0x280 <USART_0_init>
 20a:	08 95       	ret

0000020c <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
 20c:	8d e3       	ldi	r24, 0x3D	; 61
 20e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f8065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 218:	94 b1       	in	r25, 0x04	; 4
 21a:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 21c:	95 b1       	in	r25, 0x05	; 5
 21e:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 220:	97 b1       	in	r25, 0x07	; 7
 222:	90 78       	andi	r25, 0x80	; 128
 224:	97 b9       	out	0x07, r25	; 7

		PORTC |= mask;
 226:	98 b1       	in	r25, 0x08	; 8
 228:	9f 67       	ori	r25, 0x7F	; 127
 22a:	98 b9       	out	0x08, r25	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 22c:	9a b1       	in	r25, 0x0a	; 10
 22e:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 230:	9b b1       	in	r25, 0x0b	; 11
 232:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 234:	8d b1       	in	r24, 0x0d	; 13
 236:	80 7f       	andi	r24, 0xF0	; 240
 238:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 23a:	8e b1       	in	r24, 0x0e	; 14
 23c:	8f 60       	ori	r24, 0x0F	; 15
 23e:	8e b9       	out	0x0e, r24	; 14
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 240:	84 b1       	in	r24, 0x04	; 4
 242:	80 62       	ori	r24, 0x20	; 32
 244:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 246:	85 b1       	in	r24, 0x05	; 5
 248:	8f 7d       	andi	r24, 0xDF	; 223
 24a:	85 b9       	out	0x05, r24	; 5
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
 24c:	84 b1       	in	r24, 0x04	; 4
 24e:	8f 77       	andi	r24, 0x7F	; 127
 250:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~(1 << pin);

		PORTB |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTB &= ~(1 << pin);
 252:	85 b1       	in	r24, 0x05	; 5
 254:	8f 77       	andi	r24, 0x7F	; 127
 256:	85 b9       	out	0x05, r24	; 5
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	60 e8       	ldi	r22, 0x80	; 128
 25c:	81 e6       	ldi	r24, 0x61	; 97
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 39 01 	call	0x272	; 0x272 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 264:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 266:	15 be       	out	0x35, r1	; 53
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	sysctrl_init();

	ADC_0_initialization();
 268:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <ADC_0_initialization>

	USART_0_initialization();
 26c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <USART_0_initialization>
 270:	08 95       	ret

00000272 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 272:	2f b7       	in	r18, 0x3f	; 63
	cli
 274:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 276:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 278:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 27a:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 27c:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 27e:	08 95       	ret

00000280 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(UCSR0A & (1 << RXC0)))
		;
	return UDR0;
}
 280:	e4 e6       	ldi	r30, 0x64	; 100
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	8d 7f       	andi	r24, 0xFD	; 253
 288:	80 83       	st	Z, r24
 28a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 28e:	87 e6       	ldi	r24, 0x67	; 103
 290:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 294:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 298:	88 e9       	ldi	r24, 0x98	; 152
 29a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__iob+0x3>
 2a6:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__iob+0x2>
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	08 95       	ret

000002ae <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0)))
 2ae:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2b2:	95 ff       	sbrs	r25, 5
 2b4:	fc cf       	rjmp	.-8      	; 0x2ae <USART_0_write>
		;
	UDR0 = data;
 2b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2ba:	08 95       	ret

000002bc <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 2bc:	0e 94 57 01 	call	0x2ae	; 0x2ae <USART_0_write>
	return 0;
}
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	08 95       	ret

000002c6 <printf>:
 2c6:	a0 e0       	ldi	r26, 0x00	; 0
 2c8:	b0 e0       	ldi	r27, 0x00	; 0
 2ca:	e9 e6       	ldi	r30, 0x69	; 105
 2cc:	f1 e0       	ldi	r31, 0x01	; 1
 2ce:	0c 94 1a 04 	jmp	0x834	; 0x834 <__prologue_saves__+0x20>
 2d2:	ae 01       	movw	r20, r28
 2d4:	4b 5f       	subi	r20, 0xFB	; 251
 2d6:	5f 4f       	sbci	r21, 0xFF	; 255
 2d8:	fa 01       	movw	r30, r20
 2da:	61 91       	ld	r22, Z+
 2dc:	71 91       	ld	r23, Z+
 2de:	af 01       	movw	r20, r30
 2e0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__iob+0x2>
 2e4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__iob+0x3>
 2e8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <vfprintf>
 2ec:	e2 e0       	ldi	r30, 0x02	; 2
 2ee:	0c 94 36 04 	jmp	0x86c	; 0x86c <__epilogue_restores__+0x20>

000002f2 <vfprintf>:
 2f2:	ab e0       	ldi	r26, 0x0B	; 11
 2f4:	b0 e0       	ldi	r27, 0x00	; 0
 2f6:	ef e7       	ldi	r30, 0x7F	; 127
 2f8:	f1 e0       	ldi	r31, 0x01	; 1
 2fa:	0c 94 0a 04 	jmp	0x814	; 0x814 <__prologue_saves__>
 2fe:	6c 01       	movw	r12, r24
 300:	7b 01       	movw	r14, r22
 302:	8a 01       	movw	r16, r20
 304:	fc 01       	movw	r30, r24
 306:	17 82       	std	Z+7, r1	; 0x07
 308:	16 82       	std	Z+6, r1	; 0x06
 30a:	83 81       	ldd	r24, Z+3	; 0x03
 30c:	81 ff       	sbrs	r24, 1
 30e:	cc c1       	rjmp	.+920    	; 0x6a8 <__EEPROM_REGION_LENGTH__+0x2a8>
 310:	ce 01       	movw	r24, r28
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	3c 01       	movw	r6, r24
 316:	f6 01       	movw	r30, r12
 318:	93 81       	ldd	r25, Z+3	; 0x03
 31a:	f7 01       	movw	r30, r14
 31c:	93 fd       	sbrc	r25, 3
 31e:	85 91       	lpm	r24, Z+
 320:	93 ff       	sbrs	r25, 3
 322:	81 91       	ld	r24, Z+
 324:	7f 01       	movw	r14, r30
 326:	88 23       	and	r24, r24
 328:	09 f4       	brne	.+2      	; 0x32c <vfprintf+0x3a>
 32a:	ba c1       	rjmp	.+884    	; 0x6a0 <__EEPROM_REGION_LENGTH__+0x2a0>
 32c:	85 32       	cpi	r24, 0x25	; 37
 32e:	39 f4       	brne	.+14     	; 0x33e <vfprintf+0x4c>
 330:	93 fd       	sbrc	r25, 3
 332:	85 91       	lpm	r24, Z+
 334:	93 ff       	sbrs	r25, 3
 336:	81 91       	ld	r24, Z+
 338:	7f 01       	movw	r14, r30
 33a:	85 32       	cpi	r24, 0x25	; 37
 33c:	29 f4       	brne	.+10     	; 0x348 <vfprintf+0x56>
 33e:	b6 01       	movw	r22, r12
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 70 03 	call	0x6e0	; 0x6e0 <fputc>
 346:	e7 cf       	rjmp	.-50     	; 0x316 <vfprintf+0x24>
 348:	91 2c       	mov	r9, r1
 34a:	21 2c       	mov	r2, r1
 34c:	31 2c       	mov	r3, r1
 34e:	ff e1       	ldi	r31, 0x1F	; 31
 350:	f3 15       	cp	r31, r3
 352:	d8 f0       	brcs	.+54     	; 0x38a <vfprintf+0x98>
 354:	8b 32       	cpi	r24, 0x2B	; 43
 356:	79 f0       	breq	.+30     	; 0x376 <vfprintf+0x84>
 358:	38 f4       	brcc	.+14     	; 0x368 <vfprintf+0x76>
 35a:	80 32       	cpi	r24, 0x20	; 32
 35c:	79 f0       	breq	.+30     	; 0x37c <vfprintf+0x8a>
 35e:	83 32       	cpi	r24, 0x23	; 35
 360:	a1 f4       	brne	.+40     	; 0x38a <vfprintf+0x98>
 362:	23 2d       	mov	r18, r3
 364:	20 61       	ori	r18, 0x10	; 16
 366:	1d c0       	rjmp	.+58     	; 0x3a2 <vfprintf+0xb0>
 368:	8d 32       	cpi	r24, 0x2D	; 45
 36a:	61 f0       	breq	.+24     	; 0x384 <vfprintf+0x92>
 36c:	80 33       	cpi	r24, 0x30	; 48
 36e:	69 f4       	brne	.+26     	; 0x38a <vfprintf+0x98>
 370:	23 2d       	mov	r18, r3
 372:	21 60       	ori	r18, 0x01	; 1
 374:	16 c0       	rjmp	.+44     	; 0x3a2 <vfprintf+0xb0>
 376:	83 2d       	mov	r24, r3
 378:	82 60       	ori	r24, 0x02	; 2
 37a:	38 2e       	mov	r3, r24
 37c:	e3 2d       	mov	r30, r3
 37e:	e4 60       	ori	r30, 0x04	; 4
 380:	3e 2e       	mov	r3, r30
 382:	2a c0       	rjmp	.+84     	; 0x3d8 <vfprintf+0xe6>
 384:	f3 2d       	mov	r31, r3
 386:	f8 60       	ori	r31, 0x08	; 8
 388:	1d c0       	rjmp	.+58     	; 0x3c4 <vfprintf+0xd2>
 38a:	37 fc       	sbrc	r3, 7
 38c:	2d c0       	rjmp	.+90     	; 0x3e8 <vfprintf+0xf6>
 38e:	20 ed       	ldi	r18, 0xD0	; 208
 390:	28 0f       	add	r18, r24
 392:	2a 30       	cpi	r18, 0x0A	; 10
 394:	40 f0       	brcs	.+16     	; 0x3a6 <vfprintf+0xb4>
 396:	8e 32       	cpi	r24, 0x2E	; 46
 398:	b9 f4       	brne	.+46     	; 0x3c8 <vfprintf+0xd6>
 39a:	36 fc       	sbrc	r3, 6
 39c:	81 c1       	rjmp	.+770    	; 0x6a0 <__EEPROM_REGION_LENGTH__+0x2a0>
 39e:	23 2d       	mov	r18, r3
 3a0:	20 64       	ori	r18, 0x40	; 64
 3a2:	32 2e       	mov	r3, r18
 3a4:	19 c0       	rjmp	.+50     	; 0x3d8 <vfprintf+0xe6>
 3a6:	36 fe       	sbrs	r3, 6
 3a8:	06 c0       	rjmp	.+12     	; 0x3b6 <vfprintf+0xc4>
 3aa:	8a e0       	ldi	r24, 0x0A	; 10
 3ac:	98 9e       	mul	r9, r24
 3ae:	20 0d       	add	r18, r0
 3b0:	11 24       	eor	r1, r1
 3b2:	92 2e       	mov	r9, r18
 3b4:	11 c0       	rjmp	.+34     	; 0x3d8 <vfprintf+0xe6>
 3b6:	ea e0       	ldi	r30, 0x0A	; 10
 3b8:	2e 9e       	mul	r2, r30
 3ba:	20 0d       	add	r18, r0
 3bc:	11 24       	eor	r1, r1
 3be:	22 2e       	mov	r2, r18
 3c0:	f3 2d       	mov	r31, r3
 3c2:	f0 62       	ori	r31, 0x20	; 32
 3c4:	3f 2e       	mov	r3, r31
 3c6:	08 c0       	rjmp	.+16     	; 0x3d8 <vfprintf+0xe6>
 3c8:	8c 36       	cpi	r24, 0x6C	; 108
 3ca:	21 f4       	brne	.+8      	; 0x3d4 <vfprintf+0xe2>
 3cc:	83 2d       	mov	r24, r3
 3ce:	80 68       	ori	r24, 0x80	; 128
 3d0:	38 2e       	mov	r3, r24
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <vfprintf+0xe6>
 3d4:	88 36       	cpi	r24, 0x68	; 104
 3d6:	41 f4       	brne	.+16     	; 0x3e8 <vfprintf+0xf6>
 3d8:	f7 01       	movw	r30, r14
 3da:	93 fd       	sbrc	r25, 3
 3dc:	85 91       	lpm	r24, Z+
 3de:	93 ff       	sbrs	r25, 3
 3e0:	81 91       	ld	r24, Z+
 3e2:	7f 01       	movw	r14, r30
 3e4:	81 11       	cpse	r24, r1
 3e6:	b3 cf       	rjmp	.-154    	; 0x34e <vfprintf+0x5c>
 3e8:	98 2f       	mov	r25, r24
 3ea:	9f 7d       	andi	r25, 0xDF	; 223
 3ec:	95 54       	subi	r25, 0x45	; 69
 3ee:	93 30       	cpi	r25, 0x03	; 3
 3f0:	28 f4       	brcc	.+10     	; 0x3fc <vfprintf+0x10a>
 3f2:	0c 5f       	subi	r16, 0xFC	; 252
 3f4:	1f 4f       	sbci	r17, 0xFF	; 255
 3f6:	9f e3       	ldi	r25, 0x3F	; 63
 3f8:	99 83       	std	Y+1, r25	; 0x01
 3fa:	0d c0       	rjmp	.+26     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3fc:	83 36       	cpi	r24, 0x63	; 99
 3fe:	31 f0       	breq	.+12     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 400:	83 37       	cpi	r24, 0x73	; 115
 402:	71 f0       	breq	.+28     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 404:	83 35       	cpi	r24, 0x53	; 83
 406:	09 f0       	breq	.+2      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 408:	59 c0       	rjmp	.+178    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 40a:	21 c0       	rjmp	.+66     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 40c:	f8 01       	movw	r30, r16
 40e:	80 81       	ld	r24, Z
 410:	89 83       	std	Y+1, r24	; 0x01
 412:	0e 5f       	subi	r16, 0xFE	; 254
 414:	1f 4f       	sbci	r17, 0xFF	; 255
 416:	88 24       	eor	r8, r8
 418:	83 94       	inc	r8
 41a:	91 2c       	mov	r9, r1
 41c:	53 01       	movw	r10, r6
 41e:	13 c0       	rjmp	.+38     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 420:	28 01       	movw	r4, r16
 422:	f2 e0       	ldi	r31, 0x02	; 2
 424:	4f 0e       	add	r4, r31
 426:	51 1c       	adc	r5, r1
 428:	f8 01       	movw	r30, r16
 42a:	a0 80       	ld	r10, Z
 42c:	b1 80       	ldd	r11, Z+1	; 0x01
 42e:	36 fe       	sbrs	r3, 6
 430:	03 c0       	rjmp	.+6      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 432:	69 2d       	mov	r22, r9
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	02 c0       	rjmp	.+4      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 438:	6f ef       	ldi	r22, 0xFF	; 255
 43a:	7f ef       	ldi	r23, 0xFF	; 255
 43c:	c5 01       	movw	r24, r10
 43e:	0e 94 65 03 	call	0x6ca	; 0x6ca <strnlen>
 442:	4c 01       	movw	r8, r24
 444:	82 01       	movw	r16, r4
 446:	f3 2d       	mov	r31, r3
 448:	ff 77       	andi	r31, 0x7F	; 127
 44a:	3f 2e       	mov	r3, r31
 44c:	16 c0       	rjmp	.+44     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 44e:	28 01       	movw	r4, r16
 450:	22 e0       	ldi	r18, 0x02	; 2
 452:	42 0e       	add	r4, r18
 454:	51 1c       	adc	r5, r1
 456:	f8 01       	movw	r30, r16
 458:	a0 80       	ld	r10, Z
 45a:	b1 80       	ldd	r11, Z+1	; 0x01
 45c:	36 fe       	sbrs	r3, 6
 45e:	03 c0       	rjmp	.+6      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 460:	69 2d       	mov	r22, r9
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	02 c0       	rjmp	.+4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 466:	6f ef       	ldi	r22, 0xFF	; 255
 468:	7f ef       	ldi	r23, 0xFF	; 255
 46a:	c5 01       	movw	r24, r10
 46c:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <strnlen_P>
 470:	4c 01       	movw	r8, r24
 472:	f3 2d       	mov	r31, r3
 474:	f0 68       	ori	r31, 0x80	; 128
 476:	3f 2e       	mov	r3, r31
 478:	82 01       	movw	r16, r4
 47a:	33 fc       	sbrc	r3, 3
 47c:	1b c0       	rjmp	.+54     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 47e:	82 2d       	mov	r24, r2
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	88 16       	cp	r8, r24
 484:	99 06       	cpc	r9, r25
 486:	b0 f4       	brcc	.+44     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 488:	b6 01       	movw	r22, r12
 48a:	80 e2       	ldi	r24, 0x20	; 32
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <fputc>
 492:	2a 94       	dec	r2
 494:	f4 cf       	rjmp	.-24     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 496:	f5 01       	movw	r30, r10
 498:	37 fc       	sbrc	r3, 7
 49a:	85 91       	lpm	r24, Z+
 49c:	37 fe       	sbrs	r3, 7
 49e:	81 91       	ld	r24, Z+
 4a0:	5f 01       	movw	r10, r30
 4a2:	b6 01       	movw	r22, r12
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 70 03 	call	0x6e0	; 0x6e0 <fputc>
 4aa:	21 10       	cpse	r2, r1
 4ac:	2a 94       	dec	r2
 4ae:	21 e0       	ldi	r18, 0x01	; 1
 4b0:	82 1a       	sub	r8, r18
 4b2:	91 08       	sbc	r9, r1
 4b4:	81 14       	cp	r8, r1
 4b6:	91 04       	cpc	r9, r1
 4b8:	71 f7       	brne	.-36     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 4ba:	e8 c0       	rjmp	.+464    	; 0x68c <__EEPROM_REGION_LENGTH__+0x28c>
 4bc:	84 36       	cpi	r24, 0x64	; 100
 4be:	11 f0       	breq	.+4      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4c0:	89 36       	cpi	r24, 0x69	; 105
 4c2:	41 f5       	brne	.+80     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
 4c4:	f8 01       	movw	r30, r16
 4c6:	37 fe       	sbrs	r3, 7
 4c8:	07 c0       	rjmp	.+14     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 4ca:	60 81       	ld	r22, Z
 4cc:	71 81       	ldd	r23, Z+1	; 0x01
 4ce:	82 81       	ldd	r24, Z+2	; 0x02
 4d0:	93 81       	ldd	r25, Z+3	; 0x03
 4d2:	0c 5f       	subi	r16, 0xFC	; 252
 4d4:	1f 4f       	sbci	r17, 0xFF	; 255
 4d6:	08 c0       	rjmp	.+16     	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4d8:	60 81       	ld	r22, Z
 4da:	71 81       	ldd	r23, Z+1	; 0x01
 4dc:	07 2e       	mov	r0, r23
 4de:	00 0c       	add	r0, r0
 4e0:	88 0b       	sbc	r24, r24
 4e2:	99 0b       	sbc	r25, r25
 4e4:	0e 5f       	subi	r16, 0xFE	; 254
 4e6:	1f 4f       	sbci	r17, 0xFF	; 255
 4e8:	f3 2d       	mov	r31, r3
 4ea:	ff 76       	andi	r31, 0x6F	; 111
 4ec:	3f 2e       	mov	r3, r31
 4ee:	97 ff       	sbrs	r25, 7
 4f0:	09 c0       	rjmp	.+18     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
 4f2:	90 95       	com	r25
 4f4:	80 95       	com	r24
 4f6:	70 95       	com	r23
 4f8:	61 95       	neg	r22
 4fa:	7f 4f       	sbci	r23, 0xFF	; 255
 4fc:	8f 4f       	sbci	r24, 0xFF	; 255
 4fe:	9f 4f       	sbci	r25, 0xFF	; 255
 500:	f0 68       	ori	r31, 0x80	; 128
 502:	3f 2e       	mov	r3, r31
 504:	2a e0       	ldi	r18, 0x0A	; 10
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	a3 01       	movw	r20, r6
 50a:	0e 94 ac 03 	call	0x758	; 0x758 <__ultoa_invert>
 50e:	88 2e       	mov	r8, r24
 510:	86 18       	sub	r8, r6
 512:	45 c0       	rjmp	.+138    	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
 514:	85 37       	cpi	r24, 0x75	; 117
 516:	31 f4       	brne	.+12     	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
 518:	23 2d       	mov	r18, r3
 51a:	2f 7e       	andi	r18, 0xEF	; 239
 51c:	b2 2e       	mov	r11, r18
 51e:	2a e0       	ldi	r18, 0x0A	; 10
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	25 c0       	rjmp	.+74     	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
 524:	93 2d       	mov	r25, r3
 526:	99 7f       	andi	r25, 0xF9	; 249
 528:	b9 2e       	mov	r11, r25
 52a:	8f 36       	cpi	r24, 0x6F	; 111
 52c:	c1 f0       	breq	.+48     	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
 52e:	18 f4       	brcc	.+6      	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
 530:	88 35       	cpi	r24, 0x58	; 88
 532:	79 f0       	breq	.+30     	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
 534:	b5 c0       	rjmp	.+362    	; 0x6a0 <__EEPROM_REGION_LENGTH__+0x2a0>
 536:	80 37       	cpi	r24, 0x70	; 112
 538:	19 f0       	breq	.+6      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
 53a:	88 37       	cpi	r24, 0x78	; 120
 53c:	21 f0       	breq	.+8      	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 53e:	b0 c0       	rjmp	.+352    	; 0x6a0 <__EEPROM_REGION_LENGTH__+0x2a0>
 540:	e9 2f       	mov	r30, r25
 542:	e0 61       	ori	r30, 0x10	; 16
 544:	be 2e       	mov	r11, r30
 546:	b4 fe       	sbrs	r11, 4
 548:	0d c0       	rjmp	.+26     	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
 54a:	fb 2d       	mov	r31, r11
 54c:	f4 60       	ori	r31, 0x04	; 4
 54e:	bf 2e       	mov	r11, r31
 550:	09 c0       	rjmp	.+18     	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
 552:	34 fe       	sbrs	r3, 4
 554:	0a c0       	rjmp	.+20     	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
 556:	29 2f       	mov	r18, r25
 558:	26 60       	ori	r18, 0x06	; 6
 55a:	b2 2e       	mov	r11, r18
 55c:	06 c0       	rjmp	.+12     	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
 55e:	28 e0       	ldi	r18, 0x08	; 8
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	05 c0       	rjmp	.+10     	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
 564:	20 e1       	ldi	r18, 0x10	; 16
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	02 c0       	rjmp	.+4      	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
 56a:	20 e1       	ldi	r18, 0x10	; 16
 56c:	32 e0       	ldi	r19, 0x02	; 2
 56e:	f8 01       	movw	r30, r16
 570:	b7 fe       	sbrs	r11, 7
 572:	07 c0       	rjmp	.+14     	; 0x582 <__EEPROM_REGION_LENGTH__+0x182>
 574:	60 81       	ld	r22, Z
 576:	71 81       	ldd	r23, Z+1	; 0x01
 578:	82 81       	ldd	r24, Z+2	; 0x02
 57a:	93 81       	ldd	r25, Z+3	; 0x03
 57c:	0c 5f       	subi	r16, 0xFC	; 252
 57e:	1f 4f       	sbci	r17, 0xFF	; 255
 580:	06 c0       	rjmp	.+12     	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
 582:	60 81       	ld	r22, Z
 584:	71 81       	ldd	r23, Z+1	; 0x01
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 5f       	subi	r16, 0xFE	; 254
 58c:	1f 4f       	sbci	r17, 0xFF	; 255
 58e:	a3 01       	movw	r20, r6
 590:	0e 94 ac 03 	call	0x758	; 0x758 <__ultoa_invert>
 594:	88 2e       	mov	r8, r24
 596:	86 18       	sub	r8, r6
 598:	fb 2d       	mov	r31, r11
 59a:	ff 77       	andi	r31, 0x7F	; 127
 59c:	3f 2e       	mov	r3, r31
 59e:	36 fe       	sbrs	r3, 6
 5a0:	0d c0       	rjmp	.+26     	; 0x5bc <__EEPROM_REGION_LENGTH__+0x1bc>
 5a2:	23 2d       	mov	r18, r3
 5a4:	2e 7f       	andi	r18, 0xFE	; 254
 5a6:	a2 2e       	mov	r10, r18
 5a8:	89 14       	cp	r8, r9
 5aa:	58 f4       	brcc	.+22     	; 0x5c2 <__EEPROM_REGION_LENGTH__+0x1c2>
 5ac:	34 fe       	sbrs	r3, 4
 5ae:	0b c0       	rjmp	.+22     	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
 5b0:	32 fc       	sbrc	r3, 2
 5b2:	09 c0       	rjmp	.+18     	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
 5b4:	83 2d       	mov	r24, r3
 5b6:	8e 7e       	andi	r24, 0xEE	; 238
 5b8:	a8 2e       	mov	r10, r24
 5ba:	05 c0       	rjmp	.+10     	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
 5bc:	b8 2c       	mov	r11, r8
 5be:	a3 2c       	mov	r10, r3
 5c0:	03 c0       	rjmp	.+6      	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
 5c2:	b8 2c       	mov	r11, r8
 5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
 5c6:	b9 2c       	mov	r11, r9
 5c8:	a4 fe       	sbrs	r10, 4
 5ca:	0f c0       	rjmp	.+30     	; 0x5ea <__EEPROM_REGION_LENGTH__+0x1ea>
 5cc:	fe 01       	movw	r30, r28
 5ce:	e8 0d       	add	r30, r8
 5d0:	f1 1d       	adc	r31, r1
 5d2:	80 81       	ld	r24, Z
 5d4:	80 33       	cpi	r24, 0x30	; 48
 5d6:	21 f4       	brne	.+8      	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
 5d8:	9a 2d       	mov	r25, r10
 5da:	99 7e       	andi	r25, 0xE9	; 233
 5dc:	a9 2e       	mov	r10, r25
 5de:	09 c0       	rjmp	.+18     	; 0x5f2 <__EEPROM_REGION_LENGTH__+0x1f2>
 5e0:	a2 fe       	sbrs	r10, 2
 5e2:	06 c0       	rjmp	.+12     	; 0x5f0 <__EEPROM_REGION_LENGTH__+0x1f0>
 5e4:	b3 94       	inc	r11
 5e6:	b3 94       	inc	r11
 5e8:	04 c0       	rjmp	.+8      	; 0x5f2 <__EEPROM_REGION_LENGTH__+0x1f2>
 5ea:	8a 2d       	mov	r24, r10
 5ec:	86 78       	andi	r24, 0x86	; 134
 5ee:	09 f0       	breq	.+2      	; 0x5f2 <__EEPROM_REGION_LENGTH__+0x1f2>
 5f0:	b3 94       	inc	r11
 5f2:	a3 fc       	sbrc	r10, 3
 5f4:	11 c0       	rjmp	.+34     	; 0x618 <__EEPROM_REGION_LENGTH__+0x218>
 5f6:	a0 fe       	sbrs	r10, 0
 5f8:	06 c0       	rjmp	.+12     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
 5fa:	b2 14       	cp	r11, r2
 5fc:	88 f4       	brcc	.+34     	; 0x620 <__EEPROM_REGION_LENGTH__+0x220>
 5fe:	28 0c       	add	r2, r8
 600:	92 2c       	mov	r9, r2
 602:	9b 18       	sub	r9, r11
 604:	0e c0       	rjmp	.+28     	; 0x622 <__EEPROM_REGION_LENGTH__+0x222>
 606:	b2 14       	cp	r11, r2
 608:	60 f4       	brcc	.+24     	; 0x622 <__EEPROM_REGION_LENGTH__+0x222>
 60a:	b6 01       	movw	r22, r12
 60c:	80 e2       	ldi	r24, 0x20	; 32
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	0e 94 70 03 	call	0x6e0	; 0x6e0 <fputc>
 614:	b3 94       	inc	r11
 616:	f7 cf       	rjmp	.-18     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
 618:	b2 14       	cp	r11, r2
 61a:	18 f4       	brcc	.+6      	; 0x622 <__EEPROM_REGION_LENGTH__+0x222>
 61c:	2b 18       	sub	r2, r11
 61e:	02 c0       	rjmp	.+4      	; 0x624 <__EEPROM_REGION_LENGTH__+0x224>
 620:	98 2c       	mov	r9, r8
 622:	21 2c       	mov	r2, r1
 624:	a4 fe       	sbrs	r10, 4
 626:	10 c0       	rjmp	.+32     	; 0x648 <__EEPROM_REGION_LENGTH__+0x248>
 628:	b6 01       	movw	r22, r12
 62a:	80 e3       	ldi	r24, 0x30	; 48
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <fputc>
 632:	a2 fe       	sbrs	r10, 2
 634:	17 c0       	rjmp	.+46     	; 0x664 <__EEPROM_REGION_LENGTH__+0x264>
 636:	a1 fc       	sbrc	r10, 1
 638:	03 c0       	rjmp	.+6      	; 0x640 <__EEPROM_REGION_LENGTH__+0x240>
 63a:	88 e7       	ldi	r24, 0x78	; 120
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	02 c0       	rjmp	.+4      	; 0x644 <__EEPROM_REGION_LENGTH__+0x244>
 640:	88 e5       	ldi	r24, 0x58	; 88
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	b6 01       	movw	r22, r12
 646:	0c c0       	rjmp	.+24     	; 0x660 <__EEPROM_REGION_LENGTH__+0x260>
 648:	8a 2d       	mov	r24, r10
 64a:	86 78       	andi	r24, 0x86	; 134
 64c:	59 f0       	breq	.+22     	; 0x664 <__EEPROM_REGION_LENGTH__+0x264>
 64e:	a1 fe       	sbrs	r10, 1
 650:	02 c0       	rjmp	.+4      	; 0x656 <__EEPROM_REGION_LENGTH__+0x256>
 652:	8b e2       	ldi	r24, 0x2B	; 43
 654:	01 c0       	rjmp	.+2      	; 0x658 <__EEPROM_REGION_LENGTH__+0x258>
 656:	80 e2       	ldi	r24, 0x20	; 32
 658:	a7 fc       	sbrc	r10, 7
 65a:	8d e2       	ldi	r24, 0x2D	; 45
 65c:	b6 01       	movw	r22, r12
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	0e 94 70 03 	call	0x6e0	; 0x6e0 <fputc>
 664:	89 14       	cp	r8, r9
 666:	38 f4       	brcc	.+14     	; 0x676 <__EEPROM_REGION_LENGTH__+0x276>
 668:	b6 01       	movw	r22, r12
 66a:	80 e3       	ldi	r24, 0x30	; 48
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <fputc>
 672:	9a 94       	dec	r9
 674:	f7 cf       	rjmp	.-18     	; 0x664 <__EEPROM_REGION_LENGTH__+0x264>
 676:	8a 94       	dec	r8
 678:	f3 01       	movw	r30, r6
 67a:	e8 0d       	add	r30, r8
 67c:	f1 1d       	adc	r31, r1
 67e:	80 81       	ld	r24, Z
 680:	b6 01       	movw	r22, r12
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	0e 94 70 03 	call	0x6e0	; 0x6e0 <fputc>
 688:	81 10       	cpse	r8, r1
 68a:	f5 cf       	rjmp	.-22     	; 0x676 <__EEPROM_REGION_LENGTH__+0x276>
 68c:	22 20       	and	r2, r2
 68e:	09 f4       	brne	.+2      	; 0x692 <__EEPROM_REGION_LENGTH__+0x292>
 690:	42 ce       	rjmp	.-892    	; 0x316 <vfprintf+0x24>
 692:	b6 01       	movw	r22, r12
 694:	80 e2       	ldi	r24, 0x20	; 32
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0e 94 70 03 	call	0x6e0	; 0x6e0 <fputc>
 69c:	2a 94       	dec	r2
 69e:	f6 cf       	rjmp	.-20     	; 0x68c <__EEPROM_REGION_LENGTH__+0x28c>
 6a0:	f6 01       	movw	r30, r12
 6a2:	86 81       	ldd	r24, Z+6	; 0x06
 6a4:	97 81       	ldd	r25, Z+7	; 0x07
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <__EEPROM_REGION_LENGTH__+0x2ac>
 6a8:	8f ef       	ldi	r24, 0xFF	; 255
 6aa:	9f ef       	ldi	r25, 0xFF	; 255
 6ac:	2b 96       	adiw	r28, 0x0b	; 11
 6ae:	e2 e1       	ldi	r30, 0x12	; 18
 6b0:	0c 94 26 04 	jmp	0x84c	; 0x84c <__epilogue_restores__>

000006b4 <strnlen_P>:
 6b4:	fc 01       	movw	r30, r24
 6b6:	05 90       	lpm	r0, Z+
 6b8:	61 50       	subi	r22, 0x01	; 1
 6ba:	70 40       	sbci	r23, 0x00	; 0
 6bc:	01 10       	cpse	r0, r1
 6be:	d8 f7       	brcc	.-10     	; 0x6b6 <strnlen_P+0x2>
 6c0:	80 95       	com	r24
 6c2:	90 95       	com	r25
 6c4:	8e 0f       	add	r24, r30
 6c6:	9f 1f       	adc	r25, r31
 6c8:	08 95       	ret

000006ca <strnlen>:
 6ca:	fc 01       	movw	r30, r24
 6cc:	61 50       	subi	r22, 0x01	; 1
 6ce:	70 40       	sbci	r23, 0x00	; 0
 6d0:	01 90       	ld	r0, Z+
 6d2:	01 10       	cpse	r0, r1
 6d4:	d8 f7       	brcc	.-10     	; 0x6cc <strnlen+0x2>
 6d6:	80 95       	com	r24
 6d8:	90 95       	com	r25
 6da:	8e 0f       	add	r24, r30
 6dc:	9f 1f       	adc	r25, r31
 6de:	08 95       	ret

000006e0 <fputc>:
 6e0:	0f 93       	push	r16
 6e2:	1f 93       	push	r17
 6e4:	cf 93       	push	r28
 6e6:	df 93       	push	r29
 6e8:	fb 01       	movw	r30, r22
 6ea:	23 81       	ldd	r18, Z+3	; 0x03
 6ec:	21 fd       	sbrc	r18, 1
 6ee:	03 c0       	rjmp	.+6      	; 0x6f6 <fputc+0x16>
 6f0:	8f ef       	ldi	r24, 0xFF	; 255
 6f2:	9f ef       	ldi	r25, 0xFF	; 255
 6f4:	2c c0       	rjmp	.+88     	; 0x74e <fputc+0x6e>
 6f6:	22 ff       	sbrs	r18, 2
 6f8:	16 c0       	rjmp	.+44     	; 0x726 <fputc+0x46>
 6fa:	46 81       	ldd	r20, Z+6	; 0x06
 6fc:	57 81       	ldd	r21, Z+7	; 0x07
 6fe:	24 81       	ldd	r18, Z+4	; 0x04
 700:	35 81       	ldd	r19, Z+5	; 0x05
 702:	42 17       	cp	r20, r18
 704:	53 07       	cpc	r21, r19
 706:	44 f4       	brge	.+16     	; 0x718 <fputc+0x38>
 708:	a0 81       	ld	r26, Z
 70a:	b1 81       	ldd	r27, Z+1	; 0x01
 70c:	9d 01       	movw	r18, r26
 70e:	2f 5f       	subi	r18, 0xFF	; 255
 710:	3f 4f       	sbci	r19, 0xFF	; 255
 712:	31 83       	std	Z+1, r19	; 0x01
 714:	20 83       	st	Z, r18
 716:	8c 93       	st	X, r24
 718:	26 81       	ldd	r18, Z+6	; 0x06
 71a:	37 81       	ldd	r19, Z+7	; 0x07
 71c:	2f 5f       	subi	r18, 0xFF	; 255
 71e:	3f 4f       	sbci	r19, 0xFF	; 255
 720:	37 83       	std	Z+7, r19	; 0x07
 722:	26 83       	std	Z+6, r18	; 0x06
 724:	14 c0       	rjmp	.+40     	; 0x74e <fputc+0x6e>
 726:	8b 01       	movw	r16, r22
 728:	ec 01       	movw	r28, r24
 72a:	fb 01       	movw	r30, r22
 72c:	00 84       	ldd	r0, Z+8	; 0x08
 72e:	f1 85       	ldd	r31, Z+9	; 0x09
 730:	e0 2d       	mov	r30, r0
 732:	09 95       	icall
 734:	89 2b       	or	r24, r25
 736:	e1 f6       	brne	.-72     	; 0x6f0 <fputc+0x10>
 738:	d8 01       	movw	r26, r16
 73a:	16 96       	adiw	r26, 0x06	; 6
 73c:	8d 91       	ld	r24, X+
 73e:	9c 91       	ld	r25, X
 740:	17 97       	sbiw	r26, 0x07	; 7
 742:	01 96       	adiw	r24, 0x01	; 1
 744:	17 96       	adiw	r26, 0x07	; 7
 746:	9c 93       	st	X, r25
 748:	8e 93       	st	-X, r24
 74a:	16 97       	sbiw	r26, 0x06	; 6
 74c:	ce 01       	movw	r24, r28
 74e:	df 91       	pop	r29
 750:	cf 91       	pop	r28
 752:	1f 91       	pop	r17
 754:	0f 91       	pop	r16
 756:	08 95       	ret

00000758 <__ultoa_invert>:
 758:	fa 01       	movw	r30, r20
 75a:	aa 27       	eor	r26, r26
 75c:	28 30       	cpi	r18, 0x08	; 8
 75e:	51 f1       	breq	.+84     	; 0x7b4 <__ultoa_invert+0x5c>
 760:	20 31       	cpi	r18, 0x10	; 16
 762:	81 f1       	breq	.+96     	; 0x7c4 <__ultoa_invert+0x6c>
 764:	e8 94       	clt
 766:	6f 93       	push	r22
 768:	6e 7f       	andi	r22, 0xFE	; 254
 76a:	6e 5f       	subi	r22, 0xFE	; 254
 76c:	7f 4f       	sbci	r23, 0xFF	; 255
 76e:	8f 4f       	sbci	r24, 0xFF	; 255
 770:	9f 4f       	sbci	r25, 0xFF	; 255
 772:	af 4f       	sbci	r26, 0xFF	; 255
 774:	b1 e0       	ldi	r27, 0x01	; 1
 776:	3e d0       	rcall	.+124    	; 0x7f4 <__ultoa_invert+0x9c>
 778:	b4 e0       	ldi	r27, 0x04	; 4
 77a:	3c d0       	rcall	.+120    	; 0x7f4 <__ultoa_invert+0x9c>
 77c:	67 0f       	add	r22, r23
 77e:	78 1f       	adc	r23, r24
 780:	89 1f       	adc	r24, r25
 782:	9a 1f       	adc	r25, r26
 784:	a1 1d       	adc	r26, r1
 786:	68 0f       	add	r22, r24
 788:	79 1f       	adc	r23, r25
 78a:	8a 1f       	adc	r24, r26
 78c:	91 1d       	adc	r25, r1
 78e:	a1 1d       	adc	r26, r1
 790:	6a 0f       	add	r22, r26
 792:	71 1d       	adc	r23, r1
 794:	81 1d       	adc	r24, r1
 796:	91 1d       	adc	r25, r1
 798:	a1 1d       	adc	r26, r1
 79a:	20 d0       	rcall	.+64     	; 0x7dc <__ultoa_invert+0x84>
 79c:	09 f4       	brne	.+2      	; 0x7a0 <__ultoa_invert+0x48>
 79e:	68 94       	set
 7a0:	3f 91       	pop	r19
 7a2:	2a e0       	ldi	r18, 0x0A	; 10
 7a4:	26 9f       	mul	r18, r22
 7a6:	11 24       	eor	r1, r1
 7a8:	30 19       	sub	r19, r0
 7aa:	30 5d       	subi	r19, 0xD0	; 208
 7ac:	31 93       	st	Z+, r19
 7ae:	de f6       	brtc	.-74     	; 0x766 <__ultoa_invert+0xe>
 7b0:	cf 01       	movw	r24, r30
 7b2:	08 95       	ret
 7b4:	46 2f       	mov	r20, r22
 7b6:	47 70       	andi	r20, 0x07	; 7
 7b8:	40 5d       	subi	r20, 0xD0	; 208
 7ba:	41 93       	st	Z+, r20
 7bc:	b3 e0       	ldi	r27, 0x03	; 3
 7be:	0f d0       	rcall	.+30     	; 0x7de <__ultoa_invert+0x86>
 7c0:	c9 f7       	brne	.-14     	; 0x7b4 <__ultoa_invert+0x5c>
 7c2:	f6 cf       	rjmp	.-20     	; 0x7b0 <__ultoa_invert+0x58>
 7c4:	46 2f       	mov	r20, r22
 7c6:	4f 70       	andi	r20, 0x0F	; 15
 7c8:	40 5d       	subi	r20, 0xD0	; 208
 7ca:	4a 33       	cpi	r20, 0x3A	; 58
 7cc:	18 f0       	brcs	.+6      	; 0x7d4 <__ultoa_invert+0x7c>
 7ce:	49 5d       	subi	r20, 0xD9	; 217
 7d0:	31 fd       	sbrc	r19, 1
 7d2:	40 52       	subi	r20, 0x20	; 32
 7d4:	41 93       	st	Z+, r20
 7d6:	02 d0       	rcall	.+4      	; 0x7dc <__ultoa_invert+0x84>
 7d8:	a9 f7       	brne	.-22     	; 0x7c4 <__ultoa_invert+0x6c>
 7da:	ea cf       	rjmp	.-44     	; 0x7b0 <__ultoa_invert+0x58>
 7dc:	b4 e0       	ldi	r27, 0x04	; 4
 7de:	a6 95       	lsr	r26
 7e0:	97 95       	ror	r25
 7e2:	87 95       	ror	r24
 7e4:	77 95       	ror	r23
 7e6:	67 95       	ror	r22
 7e8:	ba 95       	dec	r27
 7ea:	c9 f7       	brne	.-14     	; 0x7de <__ultoa_invert+0x86>
 7ec:	00 97       	sbiw	r24, 0x00	; 0
 7ee:	61 05       	cpc	r22, r1
 7f0:	71 05       	cpc	r23, r1
 7f2:	08 95       	ret
 7f4:	9b 01       	movw	r18, r22
 7f6:	ac 01       	movw	r20, r24
 7f8:	0a 2e       	mov	r0, r26
 7fa:	06 94       	lsr	r0
 7fc:	57 95       	ror	r21
 7fe:	47 95       	ror	r20
 800:	37 95       	ror	r19
 802:	27 95       	ror	r18
 804:	ba 95       	dec	r27
 806:	c9 f7       	brne	.-14     	; 0x7fa <__ultoa_invert+0xa2>
 808:	62 0f       	add	r22, r18
 80a:	73 1f       	adc	r23, r19
 80c:	84 1f       	adc	r24, r20
 80e:	95 1f       	adc	r25, r21
 810:	a0 1d       	adc	r26, r0
 812:	08 95       	ret

00000814 <__prologue_saves__>:
 814:	2f 92       	push	r2
 816:	3f 92       	push	r3
 818:	4f 92       	push	r4
 81a:	5f 92       	push	r5
 81c:	6f 92       	push	r6
 81e:	7f 92       	push	r7
 820:	8f 92       	push	r8
 822:	9f 92       	push	r9
 824:	af 92       	push	r10
 826:	bf 92       	push	r11
 828:	cf 92       	push	r12
 82a:	df 92       	push	r13
 82c:	ef 92       	push	r14
 82e:	ff 92       	push	r15
 830:	0f 93       	push	r16
 832:	1f 93       	push	r17
 834:	cf 93       	push	r28
 836:	df 93       	push	r29
 838:	cd b7       	in	r28, 0x3d	; 61
 83a:	de b7       	in	r29, 0x3e	; 62
 83c:	ca 1b       	sub	r28, r26
 83e:	db 0b       	sbc	r29, r27
 840:	0f b6       	in	r0, 0x3f	; 63
 842:	f8 94       	cli
 844:	de bf       	out	0x3e, r29	; 62
 846:	0f be       	out	0x3f, r0	; 63
 848:	cd bf       	out	0x3d, r28	; 61
 84a:	09 94       	ijmp

0000084c <__epilogue_restores__>:
 84c:	2a 88       	ldd	r2, Y+18	; 0x12
 84e:	39 88       	ldd	r3, Y+17	; 0x11
 850:	48 88       	ldd	r4, Y+16	; 0x10
 852:	5f 84       	ldd	r5, Y+15	; 0x0f
 854:	6e 84       	ldd	r6, Y+14	; 0x0e
 856:	7d 84       	ldd	r7, Y+13	; 0x0d
 858:	8c 84       	ldd	r8, Y+12	; 0x0c
 85a:	9b 84       	ldd	r9, Y+11	; 0x0b
 85c:	aa 84       	ldd	r10, Y+10	; 0x0a
 85e:	b9 84       	ldd	r11, Y+9	; 0x09
 860:	c8 84       	ldd	r12, Y+8	; 0x08
 862:	df 80       	ldd	r13, Y+7	; 0x07
 864:	ee 80       	ldd	r14, Y+6	; 0x06
 866:	fd 80       	ldd	r15, Y+5	; 0x05
 868:	0c 81       	ldd	r16, Y+4	; 0x04
 86a:	1b 81       	ldd	r17, Y+3	; 0x03
 86c:	aa 81       	ldd	r26, Y+2	; 0x02
 86e:	b9 81       	ldd	r27, Y+1	; 0x01
 870:	ce 0f       	add	r28, r30
 872:	d1 1d       	adc	r29, r1
 874:	0f b6       	in	r0, 0x3f	; 63
 876:	f8 94       	cli
 878:	de bf       	out	0x3e, r29	; 62
 87a:	0f be       	out	0x3f, r0	; 63
 87c:	cd bf       	out	0x3d, r28	; 61
 87e:	ed 01       	movw	r28, r26
 880:	08 95       	ret

00000882 <_exit>:
 882:	f8 94       	cli

00000884 <__stop_program>:
 884:	ff cf       	rjmp	.-2      	; 0x884 <__stop_program>
