
grab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000162  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000098f  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000767  00000000  00000000  00000c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004af  00000000  00000000  00001386  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001838  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045b  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000197  00000000  00000000  00001d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001ec2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 98 00 	call	0x130	; 0x130 <main>
  9e:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Init>:

//Desarrollo de funciones
void I2C_Init(void)
{
	//Generacion de Bit Rate
	TWBR = ((uint8_t)BIT_RATE_GENERATOR);
  a6:	88 e4       	ldi	r24, 0x48	; 72
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	//Prescaler x1
	TWCR = (0<<TWPS1)|(0<<TWPS0);
  ac:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b0:	08 95       	ret

000000b2 <I2C_Start>:
}

uint8_t I2C_Start(void)
{
	uint8_t statusCode = 0;
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Generar la condicion de START
  b2:	84 ea       	ldi	r24, 0xA4	; 164
  b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while( !(TWCR & (1<<TWINT)) );// Esperar que el START sea transmitido
  b8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  bc:	88 23       	and	r24, r24
  be:	e4 f7       	brge	.-8      	; 0xb8 <I2C_Start+0x6>
	//Leo el Status Code
	statusCode = (TWCR & MASK_STATUS);
  c0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c4:	88 7f       	andi	r24, 0xF8	; 248
	//Evaluar el Status Code
	if( statusCode == START )
  c6:	88 30       	cpi	r24, 0x08	; 8
  c8:	21 f0       	breq	.+8      	; 0xd2 <I2C_Start+0x20>
	{
		//La transaccion a sido exitosa START
		return 1;
	}
	else if( statusCode == START_RPTD )
  ca:	80 31       	cpi	r24, 0x10	; 16
  cc:	19 f4       	brne	.+6      	; 0xd4 <I2C_Start+0x22>
	{
		//La transaccion a sido exitosa de START_RPTD
		return 2;
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	08 95       	ret
	statusCode = (TWCR & MASK_STATUS);
	//Evaluar el Status Code
	if( statusCode == START )
	{
		//La transaccion a sido exitosa START
		return 1;
  d2:	81 e0       	ldi	r24, 0x01	; 1
		//La transaccion a sido exitosa de START_RPTD
		return 2;
	}
	//La transaccion a sido fallida
	return statusCode;
}
  d4:	08 95       	ret

000000d6 <I2C_Write_Address_Slave>:
{
	uint8_t statusCode = 0;
	//Ejemplo:
	// (0100 000 0 & 1111 111 0) = ADDRESS
	// (0000 000 1 & 0000 000 1) = dato_RW
	TWCR = ( (address & 0xFE) | (data_dir & 0x01) ); //Cargar el byte de control a ser transmitido
  d6:	8e 7f       	andi	r24, 0xFE	; 254
  d8:	61 70       	andi	r22, 0x01	; 1
  da:	68 2b       	or	r22, r24
  dc:	ec eb       	ldi	r30, 0xBC	; 188
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	60 83       	st	Z, r22
	TWCR = (1<<TWINT)|(1<<TWEN); //Inicio la transmision del byte de control Addrees_Slave + RW
  e2:	84 e8       	ldi	r24, 0x84	; 132
  e4:	80 83       	st	Z, r24
	while( !(TWCR & (1<<TWINT)) ); //Espera mientras se realiza la transaccion del byte de control
  e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ea:	88 23       	and	r24, r24
  ec:	e4 f7       	brge	.-8      	; 0xe6 <I2C_Write_Address_Slave+0x10>
	//Leo el Status Code
	statusCode = (TWCR & MASK_STATUS);
  ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f2:	88 7f       	andi	r24, 0xF8	; 248
	//Evaluar el Status Code
	if( statusCode == MT_SLA_W)
  f4:	88 31       	cpi	r24, 0x18	; 24
  f6:	21 f0       	breq	.+8      	; 0x100 <I2C_Write_Address_Slave+0x2a>
	{
		//La transaccion a sido exitosa modo MT_SLA_W
		return 1;
	}
	else if( statusCode == MT_SLA_R)
  f8:	80 34       	cpi	r24, 0x40	; 64
  fa:	19 f4       	brne	.+6      	; 0x102 <I2C_Write_Address_Slave+0x2c>
	{
		//La transaccion a sido exitosa modo MT_SLA_R
		return 2;
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	08 95       	ret
	statusCode = (TWCR & MASK_STATUS);
	//Evaluar el Status Code
	if( statusCode == MT_SLA_W)
	{
		//La transaccion a sido exitosa modo MT_SLA_W
		return 1;
 100:	81 e0       	ldi	r24, 0x01	; 1
		//La transaccion a sido exitosa modo MT_SLA_R
		return 2;
	}
	//La transaccion a sido fallida
	return statusCode;
}
 102:	08 95       	ret

00000104 <I2C_Write_Data_Slave>:

uint8_t I2C_Write_Data_Slave(uint8_t data)
{
	uint8_t statusCode = 0;
	TWCR = data; //Cargar el registros de datos
 104:	ec eb       	ldi	r30, 0xBC	; 188
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 83       	st	Z, r24
	TWCR = (1<<TWINT)|(1<<TWEN); //Inicio la transmision del byte de datos
 10a:	84 e8       	ldi	r24, 0x84	; 132
 10c:	80 83       	st	Z, r24
	while( !(TWCR & (1<<TWINT)) ); //Esperar que el esclavo reciba el dato correctamente y responda con un ACK
 10e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 112:	88 23       	and	r24, r24
 114:	e4 f7       	brge	.-8      	; 0x10e <I2C_Write_Data_Slave+0xa>
	//Leo el Status Code
	statusCode = (TWCR & MASK_STATUS);
 116:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 11a:	88 7f       	andi	r24, 0xF8	; 248
	//Evaluar el Status Code
	if( statusCode == MT_DATA_ACK)
 11c:	88 32       	cpi	r24, 0x28	; 40
 11e:	09 f4       	brne	.+2      	; 0x122 <I2C_Write_Data_Slave+0x1e>
	{
		//La transaccion a sido exitosa
		return 1;
 120:	81 e0       	ldi	r24, 0x01	; 1
	}
	//La transaccion a sido fallida
	return statusCode;
}
 122:	08 95       	ret

00000124 <I2C_Stop>:

void I2C_Stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN); //Generar la condicion de STOP (parada)
 124:	ec eb       	ldi	r30, 0xBC	; 188
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	84 e9       	ldi	r24, 0x94	; 148
 12a:	80 83       	st	Z, r24
	while( (TWCR & (1<<TWSTO)) == 1 ); //Eperarar hasta que STOP sea transmitido al bus
 12c:	80 81       	ld	r24, Z
 12e:	08 95       	ret

00000130 <main>:
uint8_t decenas,unidades,centenas;
uint8_t Display_7Seg_A[10] = {0XC0,0XF9,0XA4,0XB0,0X99,0X92,0X82,0XF8,0X80,0X90};

int main(void)
{
	I2C_Init();
 130:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Init>

    while (1) 
    {
		
		            
	   I2C_Start();
 134:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_Start>
	   I2C_Write_Address_Slave(ADDR_PCF2,I2C_WRITE);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	8c e4       	ldi	r24, 0x4C	; 76
 13c:	0e 94 6b 00 	call	0xd6	; 0xd6 <I2C_Write_Address_Slave>
	   I2C_Write_Data_Slave(0XF9);
 140:	89 ef       	ldi	r24, 0xF9	; 249
 142:	0e 94 82 00 	call	0x104	; 0x104 <I2C_Write_Data_Slave>
	   I2C_Stop();
 146:	0e 94 92 00 	call	0x124	; 0x124 <I2C_Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	2f ef       	ldi	r18, 0xFF	; 255
 14c:	85 ea       	ldi	r24, 0xA5	; 165
 14e:	9e e0       	ldi	r25, 0x0E	; 14
 150:	21 50       	subi	r18, 0x01	; 1
 152:	80 40       	sbci	r24, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0x20>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0x2a>
 15a:	00 00       	nop
 15c:	eb cf       	rjmp	.-42     	; 0x134 <main+0x4>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
